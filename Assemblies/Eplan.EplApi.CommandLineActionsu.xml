<?xml version="1.0"?>
<doc>
    <assembly>
        "Eplan.EplApi.CommandLineActions"
    </assembly>
    <members>
        <member name="T:Eplan.EplApi.CommandLineActions.Import">
BEGIN_ACTION_DOC
<summary>
Action name = import

Action for importing projects, macros, and drawings. The following functions are supported: <br />
	• Import PXF project <br />
	• Import DXF/DWG drawings in macros (The import is not made via the project, but the DXF/DWG files are directly imported from a directory into the macros and stored in a directory.<br />
	• Insert DXF / DWG drawing into a page<br />
	• Import EPLAN 5 macros (requires Eplan5 to be installed)<br />
	• Import EPLAN 5 project
</summary><param name="TYPE">Type of task to be performed by the action:<br /><b>PXFPROJECT</b>:Import PXF project<br /><b>DXFDWGFILES</b>:Insert DXF / DWG drawings in macros.<br /><b>DXFPAGE</b>: Insert DXF drawing into a page<br /><b>DWGPAGE</b>:Insert DWG drawing into a page<br /><b>EPLAN5MACROS</b>: Import EPLAN 5 macros<br /><b>EPLAN5PROJECT</b>: Import EPLAN 5 project<br /><b>PDFCOMMENTS</b>: Import PDF comments into project.<br />
There are some settings that need to be set before doing import. 
For more informations please see EPLAN Electric P8 Help.
</param><param name="PROJECTNAME">Project name with full path.Is required for the following values of the TYPE parameter: EPLAN5MACROS,EPLAN5PROJECT and PDFCOMMENTS.
If TYPE is EPLAN5MACROS, the value for PROJECTNAME must be uppercase and the project must be located at the path: (drive):\EPLAN4\P\.
Is optional if the TYPE parameter has the following values: PXFPROJECT, DXFDWGFILES, DXFPAGE and DWGPAGE. 
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar).
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="IMPORTFILE">Path and name. This parameter is not effective with the following values of the TYPE parameter: EPLAN5MACROS and EPLAN5PROJECT. 
PXFPROJECT: Path and name of the file to be imported.DXFPAGE,DWGPAGE,PDFCOMMENTS: Path and name of the file to be imported.</param><param name="SOURCEPATH">Directory where the DXF/DWG files are located. Only applies to the DXFDWGFILES value of the TYPE parameter</param><param name="DESTINATIONPATH">Destination directory where the imported projects and macros are stored. 
Only applies to the EPLAN5MACROS,EPLAN5PROJECT,and DXFDWGFILES values of the TYPE parameter.
If this value contains "EPLAN4\P" (e.q. "C:\EPLAN4\P\SOMEPROJECTDIR") then such a directory (DESTINATIONPATH) will be created and project will be imported there. 
Project name will be the same as EPLAN 5 project name.
If DESTINATIONPATH parameter doesn't contain "EPLAN4\P", then project will be imported and strDestinationPath will be treated as full project path. 
Note that in such case DESTINATIONPATH must contain P8 project file at end of path. (e.q. "C:\test\ESS_Sample_Project.elk") </param><param name="IMPORTSCHEME">Name of the DXF/DWG import scheme (only name, without full path). 
(optional) Default wert= Most recently used scheme. 
If this parameter does not exist or is empty (""), the most recently used scheme is taken. 
Only applies to the TYPE parameter values: DXFPAGE, DWGPAGE, DXFDWGFILES</param><param name="PAGENAME">Name of page into which the CAD drawing is to be inserted. 
Only applies to the DXFPAGE and DWGPAGE values of the TYPE parameter</param><param name="XSCALE">Scaling in X direction. 
Default value=1. 
Only applies to the DXFPAGE and DWGPAGE values of the TYPE parameter. (optional)</param><param name="YSCALE">Scaling in Y direction. 
Default value=1. 
Only applies to the DXFPAGE and DWGPAGE values of the TYPE parameter. (optional)</param><param name="XOFFSET">Move to X direction. 
Default value=0. 
Only applies to the DXFPAGE and DWGPAGE values of the TYPE parameter. (optional)</param><param name="YOFFSET">Move to Y direction. 
Default value=0. 
Only applies to the DXFPAGE and DWGPAGE values of the TYPE parameter. (optional)</param><param name="MACROPROJECT">Full path of new macro project with file extension *.elk. 
Only applies to the EPLAN5MACROS value of the TYPE parameter.</param><param name="ONLYMACROPROJECT">Boolean parameter. <br />
1: Only create macro project. <br />
0: automatic export of all macros from created project to macro directory. <br />
Default: 0. <br />
Only applies to the EPLAN5MACROS value of the TYPE parameter. (optional)</param><param name="CODEPAGE">Character set of EPLAN5 project. Only applies to the EPLAN5MACROS and EPLAN5PROJECT values of the TYPE parameter (optional). <br />
Default value = 437.</param><param name="DRIVE">EPLAN 5 master data drive (e.g. C:). Only applies to the EPLAN5MACROS and EPLAN5PROJECT values of the TYPE parameter.</param><param name="SOURCEMACROPATH">Full path of an EPLAN 5 macro (with file extension) to be imported, or full path of an EPLAN 5 macro directory from which all macros are to be imported. 
The value must be uppercase and the macro must be located at the path: (drive):\EPLAN4\M\. Only applies to the EPLAN5MACROS value of the TYPE parameter. </param><param name="BALANCEARTICLES">Synchronization of imported parts data with database. Only applies to the EPLAN5PROJECT value of the TYPE parameter.<br />
Default: 0. (optional)</param><param name="GENERATEAUTOMATICCABLES">Indicates whether automatic cables are generated. Only applies to the EPLAN5PROJECT value of the TYPE parameter.<br />
Default: 0. (optional)</param><param name="DESTINATIONFILE">Destination path with file name. </param><param name="VERIFY">Indicates whether a project check is started after the import (0 or 1).<br />
Default = 0 (optional).</param><example>
Import PXF project:
<code>
import /TYPE:PXFPROJECT /IMPORTFILE:C:\Projects\ESS_Sample_Project.epj /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code>
Import DXF / DWG drawings in macros
<code>
import /TYPE:DXFDWGFILES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /SOURCEPATH:C:\Projects\DXF_DWG /DESTINATIONPATH:C:\Macros
</code>
Insert DXF / DWG drawing into a page:
<code>
import /TYPE:DWGPAGE /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME:=AP+ST1/4 /IMPORTFILE:C:\Projects\EPLAN\DXF_DWG\pline_1.dwg /XSCALE:0.5 /YSCALE:0.5 /XOFFSET:100.0 /YOFFSET:100.0
</code>
Import EPLAN 5 macros (one macro):
<code>
import /TYPE:EPLAN5MACROS /PROJECTNAME:C:\EPLAN4\P\EPLAN\ESS_Sample_Project.p /MACROPROJECT:C:\Projects\EPLAN\ESS_Sample_Project.elk /ONLYMACROPROJECT:0 /CODEPAGE:437 /DRIVE:C: /SOURCEMACROPATH:C:\EPLAN4\M\EPLAN\AB100.MZF  /DESTINATIONPATH:C:\Projects\EPLAN\Macros
</code>
Import EPLAN 5 macros (several macros):
<code>
import /TYPE:EPLAN5MACROS /PROJECTNAME:C:\EPLAN4\P\EPLAN\ESS_Sample_Project.p /MACROPROJECT:C:\Projects\EPLAN\ESS_Sample_Project.elk /ONLYMACROPROJECT:0 /CODEPAGE:437 /DRIVE:C: /SOURCEMACROPATH:C:\EPLAN4\M\EPLAN  /DESTINATIONPATH:C:\Projects\EPLAN\Macros
</code>
Import EPLAN 5 project:
<code>
import /TYPE:EPLAN5PROJECT /PROJECTNAME:C:\EPLAN4\P\EPLAN\ESS_Sample_Project.p /DESTINATIONPATH:"C:\temp\my imported projects"  /BALANCEARTICLES:0 /CODEPAGE:437 /DRIVE:C: /GENERATEAUTOMATICCABLES:0
</code><code>
import /TYPE:PDFCOMMENTS /IMPORTFILE:C:\PROJECTS\ESS_Sample_Project.edb\DOC\ESS_Sample_Project.pdf /PROJECTNAME:C:\PROJECTS\ESS_Sample_Project.elk
</code></example><remarks> 
When using folders other that &lt;drive&gt; Eplan4 for source of EPLAN5 import, additional folders will be created.
</remarks><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during an import operation.</exception>                                                                                                                                                                                                 
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Export">
BEGIN_ACTION_DOC
<summary>
Action name = export

Action to export pages and projects in graphical, DXF, DWG, PXF format. The following functions are supported:
	• Export project in PXF format
	• Export project and pages in graphical format (TIF, GIF, PNG, JPG)
	• Export project and pages in DXF / DWG format
</summary><param name="TYPE"> Type of task to be performed by the action:<br /><b>PXFPROJECT</b>: Export project in EPJ format.<br /><b>GRAPHICPROJECT</b>: Export project in graphical	format (TIF, GIF, PNG, JPG).<br /><b>GRAPHICPAGE</b>: Export pages in graphical format (TIF, GIF, PNG, JPG).<br /><b>DXFPROJECT</b>: Export project in DXF format.<br /><b>DWGPROJECT</b>: Export project in DWG format.<br /><b>DXFPAGE</b>: Export page(s) in DXF format.<br /><b>DWGPAGE</b>: Export page(s) in DWG format.<br /><b>PDFPAGESSCHEME</b>: Export pages in PDF format. Used together with PAGENAMEn parameters(e.g. /PAGENAME1:=AP+ST1/2 /PAGENAME2:=AP+ST1/4 /PAGENAME3:=AP+ST1/7 etc.) or	SELn paramenters (e.g. /SEL1:38/4/12/0 (result from StorableObject.ToStringIdentifier())) <br /><b>PDFPROJECTSCHEME</b>: Export project in PDF format.	<br /><b>DXFDWGPROJECTSCHEME</b>: Export a project in DXF or DWG format. All settings are read from scheme, also the DXF or DWG format.<br /><b>DXFDWGPPAGESSCHEME</b>: Export pages in DXF or DWG format. All settings are read from scheme, also the DXF or DWG format.<br />
Used together with PAGENAMEn parameters(e.g. /PAGENAME1:=AP+ST1/2 /PAGENAME2:=AP+ST1/4 /PAGENAME3:=AP+ST1/7 etc.) or SELn paramenters (e.g. /SEL1:38/4/12/0 (result from StorableObject.ToStringIdentifier()))</param><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first,	otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="EXPORTFILE">If the value of the TYPE parameter isPXFPROJECT then Name of the project to be exported (optional). 
Default: Project name.
If the TYPE parameter is set to PDFPROJECTSCHEME or PDFPAGESSCHEME then this parameter contains the name of the export file (required, full path name).
The file extension is automatically added by the system.</param><param name="EXPORTMASTERDATA">Specifies whether master data is to be included in the export (optional).
Default = 1(Yes). This parameter is only effective with the following value of the TYPE parameter: PXFPROJECT.</param><param name="EXPORTCONNECTIONS">Specifies whether connections are to beincluded in the export (optional). 
Default = 0(No). This parameter is only	effective with the following value of the TYPE parameter: PXFPROJECT.</param><param name="PAGENAME"> Name of the page to be exported (optional). 
This parameter is only effective with the DXFPAGE, DXFPROJECT, DWGPAGE, DWGPROJECT, GRAPHICPAGE, GRAPHICPROJECT values of the TYPE parameter.</param><param name="PAGENAMEn">Names of the pages to beexported (optional), where n is a number e.g. /PAGENAME1:=AP+ST1/2 /PAGENAME2:=AP+ST1/4 /PAGENAME3:=AP+ST1/7 etc. 
These parameters are only effective with the DXFPAGE, DWGPAGE, PDFPAGES, PDFPAGESSCHEME values of the TYPE parameter.</param><param name="DESTINATIONPATH">Target directory. Relevance of this parameter.
For GRAPHICPAGE, GRAPHICPROJECT: Directory where the graphical files are stored. If this directory does not exist yet, it is created. 
Below this directory, a new directory with the name of the project is created into which the individual image files are saved
For DXFPAGE, DXFPROJECT, DWGPAGE, DWGPROJECT, Directory to which the data is exported (optional). The project directory is the default value. 
If used with parameter "PAGENAMEn" it is ignored and directory is taken from scheme.</param><param name="FORMAT">Output format. Supported export formats are:<br />
• BMP: available color	depth: 1, 4, 8, 16, 24 and 32<br />
• TIF: available color	depth: 1, 4, 8, 24 and 32<br />
• GIF: color depth is irrelevant<br />
• PNG: available color	depth: 1, 4, 8, 16, 24 and 32<br />
• JPG: available color depth: 1, 4, 8, 16, 24 and 32.<br />
This parameter is optional.	<br />
Default value is TIF. This parameter is only effective with the GRAPHICPAGE, GRAPHICPROJECT values of the TYPE parameter.</param><param name="COLORDEPTH">Color depth of the image.	
The possible values are	1,8,16,24,32. This parameter is optional and 24 is the default value. 
This parameter is only effective with the GRAPHICPAGE and GRAPHICPROJECT values of the TYPE parameter.</param><param name="IMAGEWIDTH">Image width in pixels. 
The height is automatically	computed from the page dimensions.
This parameter is optional and 80 is the default value. 
This parameter is only effective with the GRAPHICPAGE and GRAPHICPROJECT values of then TYPE parameter.</param><param name="IMAGECOMPRESSION">Type of compression for	output in Tiff format.
This parameter has no effect on other output formats. The color depth is always 1 for CCITT3, CCITT4, and RLE compression, that is, a binary image is created.
This parameter is optional and possible values are LZW, RLE, CCITT3, CCITT4, NONE. Default value is NONE. 
This parameter is only effective with the GRAPHICPAGE and GRAPHICPROJECT values of the	TYPE parameter.</param><param name="BLACKWHITE">The output is in black and white. 
Note: This does not affect the image format or size, i. e., the files are not reduced. 
Default: 1(black/white) 
This parameter is also optional and only effective with the GRAPHICPAGE and RAPHICPROJECT values of the TYPE parameter.
This is also used for PDFPROJECTSCHEME and PDFPAGESSCHEME whereby 1 is b/w, 0 is color and 2 is grey level</param><param name="USEPAGEFILTER">Determines if only filtered pages should be used or all project pages (optional). 
It corresponds to "Active" check box in GUI. 
This parameter is only effective with the GRAPHICPAGE value of the TYPE parameter when PAGENAME or PAGENAMEn parameter is not used.
Default value: 0 </param><param name="EXPORTSCHEME">Scheme for DXF/DWG export (optional). 
If this	 parameter does not exist or is empty (""), the most recently used DXF/DWG export scheme is taken.
This parameter is only effective with the DXFPAGE, DXFPROJECT, DWGPAGE,DWGPROJECT, PDFPROJECTSCHEME, and PDFPAGESSCHEME values of the NTYPE parameter.</param><param name="USEZOOM">If set to 1, a zoom window is to be used when jumping from navigation pages to components in the PDF file.
The components are then displayed centered within the zoom window.</param><param name="ZOOMLEVEL">If USEZOOM is set to 1,you set in ZOOMLEVEL the desired zoom level in "mm".
The value entered reflects the height of the screen section that is to be displayed magnified after	the jump. 
A smaller value (e.g. 20 mm) thus leads to a greatly magnified display of the respective component on the screen. 
You can enter values between 1 and 3500.
If USEZOOM is 0, ZOOMLEVEL has no influence on the result.</param><param name="USESIMPLELINK">If set to 1, only a simple link is created in the PDF.
If set to 0 then "three-way" jumps are available for all components in the PDF.</param><param name="FASTWEBVIEW">If set to 1, fast web display will be enabled in the PDF. </param><param name="READONLYEXPORT">If set to 1, the PDF file will be write protected.</param><param name="USEPRINTMARGINS">If set to 1, print margins will be used during PDF export ignoring the setting in scheme.
This parameter is optional. If not passed setting from scheme will be applied. 
This parameter is only effective with the PDFPAGESSCHEME and PDFPROJECTSCHEME values of the TYPE parameter.</param><param name="TARGET">Specifies whether the target is email or disk. 
It may have the following values: 'Disk', 'EMail', 'FromSettings' (case insensitive).
If value is 'FromSettings', the target for the export (also the target directory) is specified by the settings (schema).
In other words, the settings decide whether the target is email or disk.
If value is 'Disk', the target directory is specified by the 'DESTINATIONPATH' parameter.
(Note: If not specified, the target is disk. This option shouldn't be used; preserved for compatibility	reasons only.)
This parameter is only effective with the following values of the TYPE parameter:DXFPROJECT, DXFPAGE, DWGPROJECT, DWGPAGE.
When exporting DXFPAGE or DWGPAGE with PAGENAMEn parameter, "TARGET" is automatically set to 'FromSettings'.</param><param name="LANGUAGE">Language identifier. Specifies the language to translate the project into before the export.
Note: This parameter is case-sensitive. Correct language specifiers are: en_US, de_DE, etc.
This parameter is only effective with the following values of the TYPE parameter:
DXFPROJECT, DXFPAGE, DWGPROJECT, DWGPAGE, PDFPAGE, PDFPAGES, PDFPROJECT, PDFPROJECTSCHEME and PDFPAGESSCHEME.</param><param name="SPLITSIZE">The value to overwrite the 'split size' setting.
This parameter is only effective with the following values of the TYPE parameter:
DXFPROJECT, DXFPAGE, DWGPROJECT, DWGPAGE and the TARGET parameter equal 'MAIL'.</param><param name="EXPORTMODEL">This is a boolean parameter.  
If true then any 3D models in the project will be exported along with the desired pages.  
Note that there are also settings in the schema that control which models will be exported.
This parameter is only effective with the following values of the TYPE parameter: PDFPROJECTSCHEME, PDFPAGESSCHEME. </param><remarks>
  • In case of EPJ project export (TYPE:PXFPROJECT), it is done with master data and without connections by default. So EXPORTMASTERDATA has true value and EXPORTCONNECTIONS is false by default.<br />
  • If a page was explicitly entered by the PAGENAME parameter, only this page is exported and the USEPAGEFILTER parameter is ignored.<br />
  • If no specific page was entered by the PAGENAME parameter, project pages are determined. If USEPAGEFILTER is set to 1, only pages filtered in GUI page navigator will be exported. If USEPAGEFILTER is not used or if it is set to 0, all project pages will be exported.<br />
  • USEPAGEFILTER corresponds to "Active" check box in the page navigator.<br />
  • In case of DXFPAGE, DXFPROJECT, DWGPAGE, and DWGPROJECT export, if TARGET parameter is not specified, the output target is taken form the settings and the DESTINATIONPATH parameter is ignored.<br />
  • In case of DXF/DWG and PDF exports this action internally calls the 'ExportDataExchange' action with the following sets of parameters:
		Action = 'RequestClearTargetDir', Target, ClearTargetDir
    and 
		Action = 'FileFinished', FullFileName, TargetDir, SubDir, FileName
</remarks><example>
Export a project in EPJ format
<code>
export /TYPE:PXFPROJECT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /EXPORTFILE:C:\temp\myPxf_Sample_Project
</code>
Export a project in graphical format
<code>
export /TYPE:GRAPHICPROJECT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /DESTINATIONPATH:C:\temp  /FORMAT:BMP /COLORDEPTH:24 /IMAGEWIDTH:1024 /BLACKWHITE:1
</code>
Export a page in graphical format
<code>
export /TYPE:GRAPHICPAGE /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME:=AP1+ST1/2 /DESTINATIONPATH:C:\temp /FORMAT:BMP /COLORDEPTH:24 /IMAGEWIDTH:1024 /BLACKWHITE:1
</code>
Export a project in pdf format
<code>
export /TYPE:PDFPROJECTSCHEME /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /EXPORTFILE:C:\ESS_Sample_Project.pdf /EXPORTSCHEME:myScheme
</code>
Export several pages in graphical format
<code>
export /TYPE:GRAPHICPAGE /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /DESTINATIONPATH:C:\temp /FORMAT:BMP /COLORDEPTH:24 /IMAGEWIDTH:1024 /BLACKWHITE:1 /USEPAGEFILTER:1
</code>
Export a project in DXF/DWG format
<code>
export /TYPE:DXFPROJECT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /DESTINATIONPATH:C:\temp
</code>
Export a page in DXF/DWG format
<code>
export /TYPE:DXFPAGE /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME:=AP1+ST1/2 /DESTINATIONPATH:C:\temp
</code>
Export several pages in DXF/DWG format
<code>
export /TYPE:DXFPAGE /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /DESTINATIONPATH:C:\temp /EXPORTSCHEME:dxf_scheme
</code>
Export several pages in DXF/DWG format. Output path is taken from scheme.
<code>
export /TYPE:DXFPAGE /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME1:=AP1+ST1/2 /PAGENAME2:=AP+ST1/4 /EXPORTSCHEME:"Standard Settings"
</code>
Export several pages in pdf format. For export a single page use "export /TYPE:PDFPAGE /PAGENAME:=AP+ST1/2"
<code>
export /TYPE:PDFPAGESSCHEME /EXPORTSCHEME:myScheme /PAGENAME1:=AP+ST1/2 /PAGENAME2:=AP+ST1/4 /PAGENAME3:=AP+ST1/7 /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /EXPORTFILE:C:\ESS_Sample_Project.pdf
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during an export operation.</exception>                                                                                                                  
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Topology">
BEGIN_ACTION_DOC
<summary>
Action for topology-related operations.
</summary><remarks>
This action is available only for users with license option: <c>Cabling</c>.
</remarks><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. <c>REQUIRED</c></param><param name="TYPE">Type of task to be performed by the action:
RouteConnections: Routes given topology connections.
CreateFunctions: Creates topology functions that are connected to structure routing fulcrums. <c>REQUIRED</c></param><example>
Route topology connections
<code>
Topology /TYPE:RouteConnections /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code>
Topology function generation
<code>
Topology /TYPE:CreateFunctions /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code></example>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.DeviceList">
            <summary>
Action name = devicelist

Action class for device list functions: import, export, and delete device lists.
</summary>
            <param name="TYPE">Type of task to be performed by the action:<br />
IMPORT: Import device list<br />
EXPORT:	Export device list<br />
DELETE: Delete device list </param>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is	used when the action is calledfrom GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" />
must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="IMPORTFILE">The directory and the file name of	 the device list to be imported	must be specified here.</param>
            <param name="EXPORTFILE">The directory and the file name of	the device list to be exported must be specified here.</param>
            <param name="FORMAT">Optional: File format ("XDLXmlExporter","XDLTxtImporterExporter", "XDLCsvImporterExporter", or	user-defined format)<br />
Default= XDLXmlExporter</param>
            <example>
import:
<code>
devicelist /TYPE:IMPORT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /IMPORTFILE:C:\EPLAN\deviceListe.xml
</code>
export:
<code>
devicelist /TYPE:EXPORT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /EXPORTFILE:C:\EPLAN\deviceListe2.xml
</code>
delete:
<code>
devicelist /TYPE:DELETE /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code></example>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a device list operation.</exception>                                                                  
BEGIN_ACTION_DOC
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.ExportToGraphics">
BEGIN_ACTION_DOC
<summary>
Action name = exportToGraphics

Action to export pages and projects to graphical (TIF, GIF, PNG, JPG) format.
</summary><param name="TYPE">Type of task to be performed:
<b>GRAPHICPROJECT</b>: Export project in graphical format (TIF, GIF, PNG, JPG).
<b>GRAPHICPAGE</b>:Export pages in graphical format (TIF, GIF, PNG, JPG)
</param><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from  the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first,otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. 
</param><param name="PAGENAME">Name of the page to be exported (optional). This parameter is only effective  with the GRAPHICPAGE value of the TYPE parameter.
</param><param name="EXPORTSCHEME">Scheme for graphical export (optional). Provides default values for other optional parameters.
If this parameter does not exist or is empty, the most recently used graphical export  scheme is taken.
</param><param name="DESTINATIONPATH">Target directory where the graphical files are stored. If this directory does not exist yet, it is created. 
In case of project export, below this directory, a new directory with the name of the project is created into which the individual image files are saved.
</param><param name="FORMAT">Output format. Supported export formats are:
• <b>BMP</b>: available color depth: 1, 4, 8, 16, 24 and 32
• <b>TIF</b>: available color depth: 1, 4, 8, 24 and 32
• <b>GIF</b>: color depth is irrelevant
• <b>PNG</b>: available color depth: 1, 4, 8, 16, 24 and 32
• <b>JPG</b>: available color depth: 1, 4, 8, 16, 24 and 32.
This parameter is optional. If not specified, a default value is taken from the scheme settings.
</param><param name="COLORDEPTH">Color depth of the image.The possible values are 1, 8, 16, 24, 32.
This parameter is optional. If not specified, a default value is taken from the scheme settings.
</param><param name="IMAGEWIDTH">Image width in pixels. The height is automatically  computed from the page dimensions. 
This parameter is optional. If not specified, a default value is taken from the scheme settings.
</param><param name="IMAGECOMPRESSION">Type of compression for the output in Tiff format.
Possible values are LZW, RLE, CCITT3, CCITT4, NONE.
This parameter has no effect on other output formats. 
The color depth is always 1 for CCITT3, CCITT4, and RLE compression, that is, a binary image is created.
This parameter is optional. If not specified, a default value is taken from the scheme settings.
</param><param name="BLACKWHITE">The output is in black and white. Note: This does not affect the image format or size. 
This parameter is optional.
Default value: 1 (black/white)
</param><param name="USEPAGEFILTER">Determines if only filtered pages should be used or all project pages (optional). 
It corresponds to the "Active" check box in GUI page navigator.
Default value: 0.
</param><remarks>
If a page was explicitly entered by the PAGENAME parameter, only this page is exported and the USEPAGEFILTER parameter is ignored. 
If no specific page was entered by the PAGENAME parameter and USEPAGEFILTER is set to 1, only pages filtered in GUI page navigator will be exported.
</remarks><example>
Export a project 
<code>
exportToGraphics /TYPE:GRAPHICPROJECT /PROJECTNAME:C:\\Projects\\EPLAN\\ESS_Sample_Project.elk /DESTINATIONPATH:C:\\temp  /FORMAT:BMP /COLORDEPTH:24 /IMAGEWIDTH:1024 /BLACKWHITE:1
</code>
Export a page 
<code>
exportToGraphics /TYPE:GRAPHICPAGE /PROJECTNAME:C:\\Projects\\EPLAN\\ESS_Sample_Project.elk /PAGENAME:=AP1+ST1/2 /DESTINATIONPATH:C:\\temp /FORMAT:BMP /COLORDEPTH:24 /IMAGEWIDTH:1024 /BLACKWHITE:1
</code>
Export several pages 
<code>
exportToGraphics /TYPE:GRAPHICPAGE /PROJECTNAME:C:\\Projects\\EPLAN\\ESS_Sample_Project.elk /DESTINATIONPATH:C:\\temp /FORMAT:BMP /COLORDEPTH:24 /IMAGEWIDTH:1024 /BLACKWHITE:1 /USEPAGEFILTER:1
</code>
Export a page with a 'scheme' parameter
<code>
exportToGraphics /TYPE:GRAPHICPAGE /PROJECTNAME:C:\\Projects\\EPLAN\\ESS_Sample_Project.elk /PAGENAME:=AP1+ST1/2 /EXPORTSCHEME:Bitmap
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during anexport operation.</exception>

END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.ChangeLayer">
BEGIN_ACTION_DOC
<summary>
Action name = changelayer

Changes graphical layer properties.
</summary><remarks>
It is possible to change properties of more than one layer in single action call. First it is necessary to add /LAYER parameter followed by a number - /LAYER1:EPLAN100, then each parameter should be followed by the same number /VISIBLE1:1 /COLORID1:10 etc.
In this way we can add next layers to change - /LAYER2:EPLAN110 /VISIBLE2:1 /COLORID2:55 (...) /LAYER15:EPLAN200 /TEXTHEIGHT15:3.75. Please look at the example.
</remarks><param name="PROJECTNAME">Project name with full path. Optional.
If not entered, the selected project is	used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="LAYER[n]">Name of layer. Parameter name may be followed by a number.</param><param name="VISIBLE[n]">The layer is visible. Parameter name may be followed by a number. This parameter is optional.</param><param name="PRINTED[n]">The layer is printed. Parameter name may be followed by a number. This parameter is optional.</param><param name="TEXTHEIGHT[n]">Specifies text height of layer. Parameter name may be followed by a number. This parameter is optional.</param><param name="COLORID[n]">Specifies color index of layer (0-255). Parameter name may be followed by a number. This parameter is optional.</param><param name="TRANSPARENCY[n]">Specifies transparency of 3D layer as double with a value between 0.0 and 1.0. Parameter name may be followed by a number. This parameter is optional.</param><example><code>
	changelayer /LAYER:EPLAN100 /VISIBLE:1 /PRINTED:1 /TEXTHEIGHT:2.75 /COLORID:1 
	changelayer /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /LAYER:EPLAN200 /VISIBLE:1 /PRINTED:0 /TEXTHEIGHT:5.5 /COLORID:15 
	changelayer /LAYER:560 /VISIBLE:1 /COLORID:9 /TRANSPARENCY:0.1
	changelayer /LAYER1:110 /VISIBLE1:1 /PRINTED1:1 /TEXTHEIGHT1:5 /COLORID1:1 /LAYER2:300 /VISIBLE2:1 /PRINTED2:1 /TEXTHEIGHT2:6 /COLORID2:11
</code></example>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Synchronize">
            <summary>
Action name = synchronize

Action class to synchronize project's data.
</summary>
            <remarks>
This action can be used to synchronize 'multi-line', 'single-line' and 'overview' project's data, and to synchronize the system parts with the project and vice versa.
</remarks>
            <param name="TYPE">Type of synchronization task to be performed:<br />
MULTILINE: 'Multi-line' data synchronization.<br />
SINGLELINE:'Single-line' data synchronization.<br />
OVERVIEW: 'Overview' data synchronization.<br />
SYSTEMPARTSTOPROJECT: Add system parts to your project.<br />
PARTSTOSYSTEM: Add parts of the project to the system.
</param>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first,otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="STOREMODE">Specifies whether existing parts are overwritten or only new ones added (optional). <br />
• Default = 0 (Append only new ones).<br />
• 1 (Overwrite existing).<br />
• 2 (Overwrite existing and append new).<br />
This parameter is only effective with the following value of the TYPE parameter: SYSTEMPARTSTOPROJECT.</param>
BEGIN_ACTION_DOC
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.UpdateSegmentsFilling">
            <summary>
Action name = UpdateSegmentsFilling

Calculates and sets value of property CABLINGSEGMENT_FILLING for all segments in project.
</summary>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
        </member>
        <member name="T:Eplan.EplApi.CommandLineActions.ImportPrePlanningData">
            <summary>
Action name = ImportPrePlanningData

Action to import pre-planning data.
</summary>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="FILENAME">Full file name of target file. This parameter is mandatory.</param>
            <param name="SCHEMENAME">Name of the scheme that defines the assignment of the external data fields to the EPLAN properties. This parameter is mandatory.</param>
            <param name="TABLENAME">If import is done from excel file then this parameter is used. It is a name of table or data area contained in the data source.</param>
            <param name="DELIMITER">If import is done from text file then this parameter is used. It is used to determine the separator that is used in the text file in order to separate the columns.</param>
            <param name="HEADER">If <c>1</c>then column names from the data table are output in the <c>External field</c>  column of the assignment table. If <c>0</c>the import ignores the column names.
Used only for import from excel file. Parameter is optional. Default = 0(No).</param>
            <param name="TARGETNAME">Name of object (DMPLAOBJECT_FULLDESIGNATION) below which the imported data are to be inserted. If parameter not exists then data are inserted under project.</param>
            <param name="SKIPERRORS">If <c>1</c> the import will not be aborted because of errors and messages that occur. Parameter is optional. Default = 1(Yes).</param>
            <param name="OVERWRITE">If <c>1</c>then existing planning objects will be overwritten with the data from the planning objects of the same name from the import file.
If <c>0</c> then existing planning objects remain unchanged. Parameter is optional. Default = 1(Yes).
</param>
            <param name="UPDATEONLY">If <c>1</c> then only data of existing structure segments and planning objects will be updated. Parameter is optional. Default = 0(No).</param>
            <example>
Importing pre-planning data from excel file:  
<code>
ImportPrePlanningData /PROJECTNAME:C:\Projects\ESS_Sample_Project.elk /FILENAME:C:\Projects\EPLAN\preplanning.xls	/SCHEMENAME:config_scheme	/HEADER:1 /SKIPERRORS:0 /UPDATEONLY:0
</code></example>
        </member>
        <member name="T:Eplan.EplApi.CommandLineActions.InsertModelViewAction">
            <summary>
Action name = InsertModelViewAction

Action to insert model view object on a page.
</summary>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). If called from the windows command line,
PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="LAYOUTSPACE">Name of layout space for which model view is created. This parameter is mandatory.</param>
            <param name="STRUCTURE">Structure identifier for which model view is created. This parameter is mandatory if name of layout space is not unique in project.</param>
            <param name="PAGENAME">Full name of page on which model view will be inserted. This parameter is mandatory.</param>
            <param name="X">X-coordinate of model view's lower left corner. This parameter is mandatory.</param>
            <param name="Y">Y-coordinate of model view's lower left corner. This parameter is mandatory.</param>
            <param name="DX">Width of model view. This parameter is mandatory.</param>
            <param name="DY">Height of model view. This parameter is mandatory.</param>
            <param name="VIEWNAME">Name of model view.</param>
            <param name="DESCRIPTION">Description of model view. Value of this parameter can be in multi-language string format.</param>
            <param name="ANGLE">Rotation of the content of model view. 
Possible values are: 
1 - content is rotated 90° counter-clockwise; 
2 - content is rotated 90° in opposite direction.</param>
            <param name="SELECTIONSCHEME">Name of the selection scheme.</param>
            <param name="STYLE">Style in which content of model view is displayed.
Possible values are:
0 - <c>Wire frame model</c>;
1 - <c>Hidden lines</c>;
2 - <c>Shading</c>;
3 - <c>Hidden lines / Simplified representation</c>;
4 - <c>Shading / Simplified representation</c>.</param>
            <param name="ITEMLABELING">Name of the scheme which is applied for labeling the items in the model view.</param>
            <param name="VIEWPOINT">The direction from which objects are seen in model view.
Possible values are:
0 - <c>Default</c>;
1 - <c>Bottom</c>;
2 - <c>Top</c>;
3 - <c>Left</c>;
4 - <c>Right</c>;
5 - <c>Front</c>;
6 - <c>Rear</c>;
7 - <c>SE isometric</c>;
8 - <c>SW isometric</c>;
9 - <c>NE isometric</c>;
10 - <c>NW isometric</c>;
</param>
            <param name="ROOTELEMENTS">Values of property FUNCTION3D_ID_RELATIVE separated by <c>#</c> from 3D placements which will be set as root elements in created model view.</param>
            <param name="SCALESETTING">Type of scaling used to display objects in the model view.
Possible values are:
0 - <c>Automatic</c>;
1 - <c>Fit</c>;
2 - <c>Manually defined</c>;
</param>
            <param name="SCALE">Scale used to display objects in model view.</param>
            <param name="OBJECTID">[OUT] Object id of created model view.</param>
        </member>
        <member name="T:Eplan.EplApi.CommandLineActions.PLCService">
BEGIN_ACTION_DOC
<summary>
Action name = plcservice

Exports/imports PLC data using the specified converter. 
</summary><param name="TYPE">Type of task to be performed by the action
BUSDATAEXPORT: Bus data export.
BUSDATAIMPORT: Bus data import.
GENERATEPLCSCHEMATIC: Schematics generation.
</param><param name="PROJECTNAME">Project name with full path.</param><param name="LANGUAGE">Language identifier 
This parameter is only effective with the following values of the TYPE parameter: BUSDATAEXPORT, BUSDATAIMPORT</param><param name="CONVERTERID">Identification for busdata exporter. Values are:<br />
• <b>PlcDcExchangerMitsubishiAML</b> = Mitsubishi iQ-Works<br />
• <b>PlcDcExchangerSiemensTIAAML</b> = Siemens SIMATIC STEP 7 TIA-Portal<br />
• <b>PlcDcXMLExchangerABB</b> = ABB Automation Suite<br />
• <b>PlcDcXMLExchangerBandR</b> = B and R Automation Studio<br />
• <b>PlcDcXMLExchangerBeckhoff</b> = Beckhoff TwinCAT<br />
• <b>PlcDcXMLExchangerCodesys</b> = 3S Codesys<br />
• <b>PlcDcXMLExchangerLogiCals</b> = logi.cals Automation<br />
• <b>PlcDcXMLExchangerMitsubishi</b> = Mitsubishi GX Works<br />
• <b>PlcDcXMLExchangerRexroth</b> = Rexroth IndraWorks<br />
• <b>PlcDcXMLExchangerSchneider</b> = Schneider Unity Pro<br />
• <b>PlcDcXMLExchangerSiemens</b> = Siemens SIMATIC STEP 7<br />
• <b>PlcDcXMLExchangerUniversal</b> = PLC standard exchange format<br />
• <b>XMLRockwellExchanger</b> = RSLogix Architect<br />
This parameter is only effective with the following values of the TYPE parameter:BUSDATAEXPORT, BUSDATAIMPORT</param><param name="CONFIGURATIONPROJECT">The name of the PLC configuration data set to export. 
This parameter is only effective with the following values of the TYPE parameter:BUSDATAEXPORT</param><param name="DESTINATIONFILE">Destination file for data export.
This parameter is only effective with the following values of the TYPE parameter:BUSDATAEXPORT</param><param name="SOURCEFILE">Source file for data import.
This parameter is only effective with the following values of the TYPE parameter:BUSDATAIMPORT.</param><param name="OVERWRITE">If the output file already exists, this parameter specifies	whether it should be overwritten.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:BUSDATAEXPORT.</param><param name="IMPORTMATCH">Matching options for PLC data import. 
The import process tries to match imported objects with those existing in the project.
Based on the option selected, the matching may be performed by internal object ids or by objects' identifying names.
If an imported object is matched with an existing function, properties of the existing function will be updated whereas for unmatched imported objects, new functions will be created in the project.
The options are:<br />
0 = Match by internal object ids.<br />
1 = Match by identifying names. Note: in this case, a comparison dialog may be displayed for the user to individually selecting some function to update.<br />
2 = Don't match. Create new functions for all imported objects.<br />
This parameter is only effective with the following values of the TYPE parameter:BUSDATAIMPORT.</param><param name="SHOWCOMPAREDLG">Shows compare dialog.<br />
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:BUSDATAIMPORT.</param><param name="CONFIGFILE">A path to a <see cref="M:Eplan.EplApi.HEServices.PlcService.GenerateSchematic(Eplan.EplApi.DataModel.Project,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" /> configuration file for schematics generation.
This parameter is only effective with the following values of the TYPE parameter:GENERATEPLCSCHEMATIC.</param><param name="SINGLELINEPAGES">If set, single-line pages will be generated.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:GENERATEPLCSCHEMATIC.</param><param name="MULTILINEPAGES">If set, multi-line pages will be generated.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:GENERATEPLCSCHEMATIC.</param><param name="OVERVIEWS">If set, overview pages will be generated.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:GENERATEPLCSCHEMATIC.</param><param name="RACKOVERVIEWS">If set, rack overview pages will be generated.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:GENERATEPLCSCHEMATIC.</param><example>
Bus data export:
<code>
plcservice 
		/TYPE:BUSDATAEXPORT
		/CONFIGURATIONPROJECT:Schneider-Electric
		/DESTINATIONFILE:"c:\tempdir\plcservice_export_1.xef"
		/PROJECTNAME:"C:\Users\Public\EPLAN\Electric P8\Projects\Microsoft\ESS_Sample_Project.elk" 
		/LANGUAGE:de_DE
		/CONVERTERID:PlcDcXMLExchangerSchneider
		/OVERWRITE:1
</code>
Bus data import:
<code>
plcservice 
		/TYPE:BUSDATAIMPORT
		/SOURCEFILE:"c:\tempdir\plcservice_export_2.pbf"
		/PROJECTNAME:"C:\Users\Public\EPLAN\Electric P8\Projects\Microsoft\ESS_Sample_Project.elk" 
		/LANGUAGE:de_DE
		/CONVERTERID:PlcDcXMLExchangerUniversal
</code>
Schematics generation:
<code>
plcservice 
		/TYPE:GENERATEPLCSCHEMATIC
		/PROJECTNAME:"C:\Users\Public\EPLAN\Electric P8\Projects\Microsoft\ESS_Sample_Project.elk" 
		/CONFIGFILE:"c:\tempdir\schematics_generation_config.xml"
		/SINGLELINEPAGES:1
		/MULTILINEPAGES:1
</code></example>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Backup">
            <summary>
Action name = backup

Action class for backup functions: backup a project and master data (forms, symbols,...)
</summary>
            <param name="TYPE">Type of task to be performed:<br /><b>PROJECT</b>: Backing up the entire project <br /><b>MASTERDATA</b>:	Backing up the master data</param>
            <param name="PROJECTNAME">Project name with full path(optional). 
If not entered, the selected project is used when the action is	called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction">ProjectAction</see> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="ARCHIVENAME">Archive name.
Name of the file where the backed up data is to be saved (without path information).</param>
            <param name="DESTINATIONPATH">Target directory</param>
            <param name="COMMENT">Remark on backup (optional).
The remark is written as a string to the corresponding property	of the backed up project.
Default	= corresponding property is not set.</param>
            <param name="BACKUPMEDIA">Type of saving:
<strong>EMAIL:</strong> Project is sent by e-mail.
<strong>DISK:</strong> Project is backed up to a hard drive, diskette, etc.</param>
            <param name="SPLITSIZE">If the project to be backed up is to be packed (zipped), the target file can be automatically split into several parts to be sent by e-mail. 
SPLITSIZE specifies the maximum file size in megabytes. If SPLITSIZE = 0, the file is not split up. If the parameter: BACKUPMEDIA = DISK, SPLITSIZE is ignored.
The parameter is optional.
Default = 0.0</param>
            <param name="BACKUPAMOUNT">An enum constant that may assume the following values:
<b>BACKUPAMOUNT_ALL</b>: The contents of the project directory is backed up completely.
<b>BACKUPAMOUNT_MIN</b>: Only the database files required to restore the project are backed up; redundant database files are ignored.
Default = BACKUPAMOUNT_ALL.</param>
            <param name="COMPRESSPRJ">Specifies whether the database is to be compressed before being backed up (optional, 0 = No, 1= Yes).
Default = 0</param>
            <param name="INCLEXTDOCS">Specifies whether external documents are to be included in the backup (optional, 0 = No, 1= Yes).
Default = 0</param>
            <param name="INCLIMAGES">Specifies whether image files are to be included in the backup (optional, 0 = No, 1=Yes).
Default = 0</param>
            <param name="COPYREFDATA">Specifies whether external files that are referenced by the project 
are copied to the project's directory (the '\DOC' subdirectory) before the backup.
(optional, 0 = No, 1 = Yes).
Default = 0
Valid only if TYPE parameter equals 'PROJECT'.</param>
            <param name="BACKUPMETHOD">Type of backup:<br /><b>BACKUP</b>:	Project is backed up<br /><b>SOURCEOUT</b>: Project is filed off<br /><b>ARCHIVE</b>: Project is archived. Must not be set if BACKUPMEDIA parameter is set to EMAIL.<br /><b>PACK</b>: Project is packed.</param>
            <param name="MDTYPE">Type of master data to be backed up:
SYMBOLS,
MACROS,
FORMS,
ARTICLES,
LANGUAGES,
STANDARDSHEET,
STATIONDATA</param>
            <param name="SOURCEPATH">Source directory, only applies to backup of master data.</param>
            <param name="FILENAME">Name of the file to be backed up.<br />
• The file name can be entered with or without the complete path.<br />
• The file extension must be specified.<br />
• A file extension with a wildcard is also possible (for example: /FILENAME:*.fn1, /FILENAME:*.*, /FILENAME:*sh)<br />
This only applies to the backup of master data.</param>
            <remarks>
Archive names of the form &lt;some name&gt;.nnn (n = a digit 0 - 9) are forbidden, because an archive name of this form ( with a three-digit-extension)is automatically created when the backup file is split into several parts. 
</remarks>
            <example>
Back up project:
<code>
backup /TYPE:PROJECT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /DESTINATIONPATH:U:\temp /ARCHIVENAME:ESS_Sample_Project.zw1 /COMMENT:Hello /BACKUPMETHOD:BACKUP /BACKUPMEDIA:DISK /SPLITSIZE:0.0 /BACKUPAMOUNT:BACKUPAMOUNT_ALL /COMPRESSPRJ:0 /INCLEXTDOCS:1 /INCLIMAGES:1
</code><code>
backup  /TYPE:PROJECT /COMMENT:Hello /DESTINATIONPATH:U:\temp /ARCHIVENAME:ESS_Sample_Project.zw1 /BACKUPMETHOD:BACKUP /BACKUPMEDIA:DISK /SPLITSIZE:0.0 /BACKUPAMOUNT:BACKUPAMOUNT_ALL /COMPRESSPRJ:0 /INCLEXTDOCS:1 /INCLIMAGES:1
</code></example>
            <example>
Back up master data:

Back up plot frame with full path:
<code>
backup /TYPE:MASTERDATA /FILENAME:C:\PlotFrames\EPLAN\ESS_A3DP.fn1 /SOURCEPATH:C:\PlotFrames\EPLAN /DESTINATIONPATH:U:\temp /ARCHIVENAME:my_MasterData /COMMENT:"Hello world" /BACKUPMEDIA:DISK /SPLITSIZE:0.0 /MDTYPE:STANDARDSHEET
</code>
Back up plot frame without full path:
<code>
backup /TYPE:MASTERDATA /FILENAME:ESS_A3DP.fn1 /SOURCEPATH:C:\PlotFrames\EPLAN /DESTINATIONPATH:U:\temp /ARCHIVENAME:my_MasterData /COMMENT:"Hello world" /BACKUPMEDIA:DISK /SPLITSIZE:0.0 /MDTYPE:STANDARDSHEET
</code>
Back up all plot frames (*.fn1):
<code>
backup /TYPE:MASTERDATA /FILENAME:*.fn1 /SOURCEPATH:C:\PlotFrames\EPLAN /DESTINATIONPATH:U:\temp /ARCHIVENAME:my_MasterData /COMMENT:"Hello world" /BACKUPMEDIA:DISK /SPLITSIZE:0.0 /MDTYPE:STANDARDSHEET
</code>
Back up all files (*.*) in specified source directory:
<code>
backup /TYPE:MASTERDATA /FILENAME:*.* /SOURCEPATH:C:\PlotFrames\EPLAN /DESTINATIONPATH:U:\temp /ARCHIVENAME:my_MasterData /COMMENT:"Hello world" /BACKUPMEDIA:DISK /SPLITSIZE:0.0 /MDTYPE:STANDARDSHEET
</code>
Back up all files (*.*) in specified source directory whose file extensions include 'sh':
<code>
backup /TYPE:MASTERDATA /FILENAME:*sh /SOURCEPATH:C:\PlotFrames\EPLAN /DESTINATIONPATH:U:\temp /ARCHIVENAME:my_MasterData /COMMENT:"Hello world" /BACKUPMEDIA:DISK /SPLITSIZE:0.0 /MDTYPE:STANDARDSHEET
</code></example>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a data backup operation.</exception>                                                                                                                                                                                                  
BEGIN_ACTION_DOC
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Translate">
            <summary>
Action name = translate

Action class for translate functions: translate a project, export missing translation list, and remove languages from a project.
</summary>
            <remarks>
The main language of a project cannot be removed from it. 
If several languages are to be removed from the project, they must be entered individually, separated by comma, e.g., /LANGUAGE:en_US,fr_FR,da_DK
</remarks>
            <param name="TYPE">Type of task to be performed by the action:<br />
TRANSLATEPROJECT: Translate project<br />
TRANSLATEPAGES: Translate given pages<br />
REMOVELANGUAGE: Remove language entry<br />
EXPORTMISSINGTRANSLATIONS: Export missing-word list<br />
IMPORTTOTRANSDB: Import database texts<br />
EXPORTFROMTRANSDB: Export database texts
</param>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="IMPORTFILE">Name of the file with texts to import. Only applies to the parameter TYPE equal to IMPORTTOTRANSDB</param>
            <param name="EXPORTFILE">Name of file containing exported missing word list. 
This parameter is only effective with the TYPE equal to EXPORTMISSINGTRANSLATIONS or EXPORTFROMTRANSDB</param>
            <param name="CONVERTER">Name of converter (optional). This name is used as the input and output format.
Default values:"XTrLanguageDbXmlConverterImpl" 
(Native format XML) for TYPE equal to EXPORTFROMTRANSDB, XTrLanguageDbXml2TabConverterImpl for IMPORTTOTRANSDB and EXPORTMISSINGTRANSLATIONS
This parameter is only effective with the TYPE equal to EXPORTMISSINGTRANSLATIONS, IMPORTTOTRANSDB or EXPORTFROMTRANSDB</param>
            <param name="LANGUAGE">Translation language, e.g., fr_FR
Only applies to the parameter: REMOVELANGUAGEEXPORTMISSINGTRANSLATIONS</param>
            <param name="USEPAGEFILTER">Determines if only filtered pages should be used or all project pages (optional). It corresponds to "Active" check box in GUI. 
These parameters are only effective with the TRANSLATEPAGES value of the TYPE parameter.
Default	value: 0 </param>
            <param name="PAGFILTERNAME">Pages are read from pagefilter with the name pagefiltername.These parameters are only effective with the TRANSLATEPAGES value of the TYPE parameter.</param>
            <param name="PAGENAME">Name of the page to be translated (optional).</param>
            <param name="PAGENAMEn">Names of the pages to be translated (optional), where n is a number e.g. /PAGENAME1:=AP+ST1/2 /PAGENAME2:=AP+ST1/4 /PAGENAME3:=AP+ST1/7 etc. 
These parameters are only effective with the TRANSLATEPAGES value of the TYPE parameter.</param>
            <param name="SELn">Identifier of the pages to be translated (optional), where n is a number (e.g. /SEL1:38/4/12/0 (result from StorableObject.ToStringIdentifier())) 
parameters are only effective with the TRANSLATEPAGES value of the TYPE parameter.</param>
            <example>
Translate project
<code>
translate /TYPE:TRANSLATEPROJECT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code>

Remove translation from project:
<code>
translate /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk  /TYPE:REMOVELANGUAGE /LANGUAGE:en_US
</code>

Export missing-word list
<code>
translate /TYPE:EXPORTMISSINGTRANSLATIONS /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /LANGUAGE:en_US /EXPORTFILE:C:\temp\missingTransFile.txt /CONVERTER:XE5LanguageDbXmlConverterImpl
</code></example>
            <exception cref="T:Eplan.EplApi.Base.BaseException"> An error occurs during a
                                translate operation.</exception>                                                                                                                           
BEGIN_ACTION_DOC
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Renumber">
BEGIN_ACTION_DOC
<summary>
Action name = renumber


</summary><param name="TYPE">Type of task to be performed by the action<br />
DEVICES: Renumber devices.<br />
PAGES: Renumber pages.<br />
TERMINALS: Renumbering terminals<br />
CABLES: Renumbering cables<br />
ADDITIONALPAGEFIELDS: Renumbering additional page fileds<br />
CONNECTIONS: Renumbering connections</param><param name="PROJECTNAME">Project name with full path.Optional.
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" />  must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown.
This parameter is only effective with the following values of the TYPE parameter:DEVICES, PAGES, TERMINALS, CABLES, ADDITIONALPAGEFIELDS, CONNECTIONS.</param><param name="USESELECTION">Optional. If this flag is set, only the objects currently selected in GUI will be renumbered instead of all objects in the project.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:DEVICES, PAGES, TERMINALS, CABLES, ADDITIONALPAGEFIELDS, CONNECTIONS.</param><param name="CONFIGSCHEME">Name of the renumbering scheme. Optional.
If not specified, the last used scheme will be selected again.
This parameter is only effective with the following values of the TYPE parameter:DEVICES, TERMINALS, CABLES, CONNECTIONS.</param><param name="STARTVALUE">Start value. Integer. Optional. If not specified, 1 is taken by default.
This parameter is only effective with the following values of the TYPE parameter:DEVICES, PAGES, TERMINALS, CABLES, ADDITIONALPAGEFIELDS.</param><param name="STEPVALUE">Increment value. Integer. Optional. If not specified, 1 is taken by default.
This parameter is only effective with the following values of the TYPE parameter:DEVICES, PAGES, TERMINALS, CABLES.</param><param name="POSTNUMERATE">Optional. If this flag is set, only invalid device tags (i.e. those containing '?' character) will be renumbered.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:DEVICES, TERMINALS.</param><param name="ALSONUMERATEDBYPLC">Optional. If this flag is set, device tags which are influenced by PLC numbering will be numerated.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:DEVICES, TERMINALS.</param><param name="PERMITSORTCHANGE">Optional. Permit sort change.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="FILLGAPS">Optional. Fill Gaps.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="IDENTIFIER">Identifier, e.g. 'X*'. Optional. 
If used, all devices from the project matching the identifier are taken for renumeration regardless of whether the 'USESELECTION' parameter is used or not.
This parameter is only effective with the following values of the TYPE parameter:DEVICES.</param><param name="NUMERATECABLES">Optional. If this flag is set, cables whose device tags contain source and target information are also numerated.
Possible values: '0' - No (default), '1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:DEVICES.</param><param name="STRUCTUREORIENTED">Set this parameter to true to provide numbering per structure identifier.
If false, then pages are continuously number without accounting for the structure identifiers.
This parameter is only effective with the following values of the TYPE parameter:PAGES.</param><param name="KEEPINTERVAL">In combination with the definition of the start page, this parameter retains the increments between the selected pages for the target pages.
In this way you can move any desired number of selected pages by a specified increment.
Entering the increment size is not possible in this case. 
This parameter is only effective with the following values of the TYPE parameter:PAGES.</param><param name="KEEPTEXT">Set this to 1, if the alphabetic part of the page name should not be overwritten.
This parameter is only effective with the following values of the TYPE parameter:PAGES.</param><param name="SUBPAGES">Values are:
0 = Retain: Existing subpages are adopted unchanged into the target page.<br />
1 = ConsecutiveNumbering: Existing subpages are renumbered using the starting value "1" and an increment of "1".<br />
	At every change of the main page, the subpage numbering begins again from "1".<br />
	The subpage numbering follows the project settings defined in the project setting "Characters for subpages".<br />
2 = ConvertIntoMainPages: Subpages are converted to main pages and renumbered.<br />
This parameter is only effective with the following values of the TYPE parameter:PAGES.</param><param name="PREFIX">Prefix.
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="SUFFIX">Suffix.
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="SEQUENCE">Mode to use for numbering. Values are:
0 = Like sorting:The terminal / pin sorting sequence displayed under Terminal strips - (Project name) or Plugs - (Project name) is used. 
Select this option if you would like to number existing terminals / pins but retain the existing sorting.<br />
1 = Page oriented<br />
2 = Cable oriented<br />
3 = Level oriented<br />
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="EXTENT">Parameter to define the scope of numbering. Values are:<br />
0 = Selected - only the selected terminals or pins will be numbered.<br />
1 = All selected terminal strips - all terminals of the same strip as selected terminal will be numbered.<br />
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="POTENTIAL_N">Parameter to determine how N terminals will be treated during numbering. Values are:<br />
0 = Ignore<br />
1 = Do not modify, include in sequence.	PE, N or SH terminals are not modified during numbering but are taken into account when numbering the other terminals.
	This means that the designations of the other terminals are assigned as though the PE, N or SH terminals were being included in the numbering.<br />
2 = Renumber<br />
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="POTENTIAL_PE">Parameter to determine how PE terminals will be treated during numbering. Values are:<br />
0 = Ignore<br />
1 = Do not modify, include in sequence. PE, N or SH terminals are not modified during numbering but are taken into account when numbering the other terminals.
	This means that the designations of the other terminals are assigned as though the PE, N or SH terminals were being included in the numbering.<br />
2 = Renumber<br />
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="POTENTIAL_SH">Parameter to determine how SH terminals will be treated during numbering. Values are:<br />
0 = Ignore<br />
1 = Do not modify, include in sequence. PE, N or SH terminals are not modified during numbering but are taken into account when numbering the other terminals.
	This means that the designations of the other terminals are assigned as though the PE, N or SH terminals were being included in the numbering.<br />
2 = Renumber<br />
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="MULTIPLETERMINALS">Also renumber multi path terminals.Values are:<br />
0 = Don't modify - terminals with the property "Allow same designations" are ignored during numbering<br />
1 = Number same - terminals with the same designation with the "Allow same designations" property are given the same number
2 = Number individually - terminals with the "Allow same designations" property are each given their own number.<br />
	Therefore, multiple terminals which had the same number before numbering will have different numbers after numbering
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="KEEPALPHA">Keep alphabetical elements of the terminal number. Values are:<br />
0 = Dont modify - terminals or pins with alphabetical elements in the designation are ignored during numbering.<br />
1 = Keep alphabetical elements - the alphabetical elements of the terminal or pin designation are retained. The first numeric elements are renumbered. If the designation only has alphabetical elements, the old designation is attached to the new numbering. Sequential terminals with different counters but the same numerical component receive the same numerical component in the counter even after the numbering. <br />
2 = Number - all terminals / pins are renumbered. In doing so, the old designation is overwritten
This parameter is only effective with the following values of the TYPE parameter:TERMINALS.</param><param name="KEEPEXISTING">Overwrite mode. If set to 1, already existing cable names will not be changed.
This parameter is only effective with the following values of the TYPE parameter:CABLES.</param><param name="FIELD">Additional page field(property number).
This parameter is only effective with the following values of the TYPE parameter:ADDITIONALPAGEFIELDS.</param><param name="INDEX">Additional page field property index.
This parameter is only effective with the following values of the TYPE parameter:ADDITIONALPAGEFIELDS.</param><param name="NUMBERDIGITS">Number of digits from 0 to 10.
This parameter is only effective with the following values of the TYPE parameter:ADDITIONALPAGEFIELDS.</param><param name="STARTVALUE_n">Start value. Where n is a connection group number (1,2,3...).
This parameter is only effective with the following values of the TYPE parameter:CONNECTIONS.</param><param name="STEPVALUE_n">Step value. Where n is a connection group number (1,2,3...).
This parameter is only effective with the following values of the TYPE parameter:CONNECTIONS.</param><param name="GROUP_n">Group parameter. Where n is a connection group number (1,2,3...).
This parameter is only effective with the following values of the TYPE parameter:CONNECTIONS.</param><param name="OVERWRITE">Overwrite mode. Values are:<br />
0 = All (always overwrite)<br />
1 = ExceptManuals (overwrite all except those, which are marked as 'manually set') <br />
2 = None (never overwrite)<br />
This parameter is only effective with the following values of the TYPE parameter:CONNECTIONS.</param><param name="AVOIDIDENTICALDESIGNATIONS">Values are:<br />
0 = In entire project<br />
1 = In the selection<br />
2 = None<br />
3 = Per counter reset range (structure/page)<br />
This parameter is only effective with the following values of the TYPE parameter:CONNECTIONS.</param><param name="VISIBILITY">Visiblity. Values are:<br />
0 = All visible<br />
1 = Do not modify<br />
2 = Once per page and range<br />
This parameter is only effective with the following values of the TYPE parameter:CONNECTIONS.</param><param name="MARKASMANUAL">Mark as 'manually set'. This parameter is only effective with the following values of the TYPE parameter:CONNECTIONS.</param><example>
Numbering devices
<code>
renumber /TYPE:DEVICES /STARTVALUE:1 /STEPVALUE:1 /USESELECTION:0 /OMITNUMERATEDBYPLC:0 /NUMERATECABLES:0 /IDENTIFIER:X* /CONFIGSCHEME:\"Kennbuchstabe Zähler\" /POSTNUMERATE:0
renumber /TYPE:DEVICES /IDENTIFIER:V /POSTNUMERATE:0 /ALSONUMERATEDBYPLC:1 /NUMERATECABLES:1 /STARTVALUE:100 /STEPVALUE:5 /USESELECTION:1	
</code>
Numbering page supplementary fields
<code>
renumber /TYPE:ADDITIONALPAGEFIELDS /FIELD:11901 /INDEX:5 /STARTVALUE:13 /USESELECTION:1 /STEPVALUE:2 /NUMBERDIGITS:3 /USESELECTION:1
</code>
Numbering pages
<code>
renumber /TYPE:PAGES /STRUCTUREORIENTED:0 /STARTVALUE:3 /STEPVALUE:10 /KEEPINTERVAL:1 /KEEPTEXT:0 /SUBPAGES:1 /USESELECTION:0
</code>
Numbering cables
<code>
renumber /CONFIGSCHEME:Standard /TYPE:CABLES /STARTVALUE:7 /STEPVALUE:7 /USESELECTION:1 /KEEPEXISTING:1
renumber /TYPE:CABLES /STARTVALUE:999 /USESELECTION:0
</code>
Numbering connections
<code>
renumber /TYPE:CONNECTIONS /CONFIGSCHEME:Verbindungsorientiert /STARTVALUE_1:1 /STEPVALUE_1:1 /OVERWRITE:1 /AVOIDIDENTICALDESIGNATIONS:1 /VISIBILITY:1 /MARKASMANUAL:0 /USESELECTION:1 /GROUP_1:1
renumber /TYPE:CONNECTIONS /CONFIGSCHEME: Potenzialorientiert /STARTVALUE_1:13 /STEPVALUE_1:3 /OVERWRITE:0 /AVOIDIDENTICALDESIGNATIONS:0 /VISIBILITY:1 /MARKASMANUAL:1 /USESELECTION:0 /GROUP_1:1
</code>
Numbering terminals:
<code>
renumber /TYPE:TERMINALS /CONFIGSCHEME:Numerisch /SEQUENCE:1 /POTENTIAL_N:1 /POTENTIAL_PE:2 /POTENTIAL_SH:2 /POSTNUMERATE:0 /ALSONUMERATEDBYPLC:1 /MULTIPLETERMINALS:1 /KEEPALPHA:0 /STARTVALUE:1 /STEPVALUE:1 /PREFIX:p_ /SUFFIX:_s /USESELECTION:1
</code></example>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.CallEEC">
BEGIN_ACTION_DOC
<summary>
Action name = navigateToEEC

Action class to navigate to an object in the EPLAN Engineering Configuration.
</summary><param name="EECOBJECTID">Object-Id in the EEC to navigate to.</param><exception cref="T:Eplan.EplApi.Base.BaseException">An object-id is not given or it is invalid.</exception>                                                                                               						
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Label">
BEGIN_ACTION_DOC
<summary>
Action name = label

Action class to create labels for projects.
</summary><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown.
</param><param name="CONFIGSCHEME">Configuration scheme (optional).
Default value: Most recently used configuration scheme.</param><param name="FILTERSCHEME">Filter scheme (optional).
Default value: Filter scheme name is taken from configuration scheme. If this parameter is not available, nofiltering can be performed.</param><param name="SORTSCHEME">Sorting scheme.
Default value: Sorting scheme name is taken from configuration scheme. If this parameter is not available, no sorting can be performed.</param><param name="LANGUAGE">Language (e.g., en_US or ??_?? for all display languages).</param><param name="DESTINATIONFILE">Target file where the labeling results are saved.
The following formats are supported: txt, xls, xml. Format must be set according to the extension that is in CONFIGSCHEME.
Default value: file indicated by a configuration scheme (CONFIGSCHEME parameter) </param><param name="RECREPEAT">Optional: Number of repetitions per label (&gt;=1).			
Default value: 0</param><param name="TASKREPEAT">Optional: Number of repetitions of total output (&gt;=1).			
Default value: 0</param><param name="SHOWOUTPUT">Optional: Decide whether the output file should be shown.
Default value: 0</param><param name="USESELECTION">Optional: Decide if use the selection as an input objects for labeling.
Default value: 0</param><example><code>
label /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk  /CONFIGSCHEME:config_scheme /FILTERSCHEME:filter_scheme  /SORTSCHEME:sort_scheme /LANGUAGE:en_US /DESTINATIONFILE:C:\temp\labeling.txt /RECREPEAT:3 /TASKREPEAT:2
</code>

Use the most recent configuration scheme: The CONFIGSCHEME parameter is not entered. It is empty.

<code>
label /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /FILTERSCHEME:filter_scheme /SORTSCHEME:sort_scheme /LANGUAGE:en_US /DESTINATIONFILE:C:\temp\labeling.txt /RECREPEAT:3 /TASKREPEAT:2
</code>

Carry out labeling without filtering and sorting: The FILTERSCHEME and SORTSCHEME parameters are not passed in this case.
<code>
label /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk  /CONFIGSCHEME:config_scheme /LANGUAGE:en_US /DESTINATIONFILE:C:\temp\labeling.txt /RECREPEAT:3 /TASKREPEAT:2
</code></example><remarks>
If the current selection in the project should be included in the output of the labeling, then you must use the /USESELECTION parameter.

Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)
</remarks><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a
                                label operation.</exception>                                                                                                                                                                         						
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Restore">
            <summary>
Action name = restore

Action class for restore functions: restore projects and restore master data(Forms, symbols,...)
</summary>
            <remarks>
Restored project is automatically upgraded to the currently used EPLAN version.
</remarks>
            <param name="TYPE">Type of task to be performed:
PROJECT: Restore project
MASTERDATA: Restore master data</param>
            <param name="PROJECTNAME">Project name with full path.This only applies to TYPE = PROJECT.</param>
            <param name="ARCHIVENAME">Archive name. Name of the  archive to be restored.</param>
            <param name="DESTINATIONPATH">Target directory. Path where the projects or data are to be restored.
Only applies to TYPE = MASTERDATA</param>
            <param name="UNPACKPROJECT">Specifies whether the previously packed project is to be unpacked (optional, Yes= 1, No = 0). 
Set this flag to 0, only if previously packed projects are to be unpacked,
Default value=0
Only applies to TYPE = PROJECT.</param>
            <param name="MODE">if set to 0, project information file (ProjectInfo.xml) will not be restored (optional).
Default value=1
Only applies to TYPE = PROJECT.</param>
            <example>
Restore project:
<code>
restore /TYPE:PROJECT /ARCHIVENAME:C:\temp\ESS_Sample_Project.zw1 /PROJECTNAME:C:\temp\ESS_Sample_Project.elk /UNPACKPROJECT:0
</code>

Restore master data (plot frames, ...) to a DestinationPath
<code>
restore /TYPE:MASTERDATA /ARCHIVENAME:C:\temp\ESS_Sample_Project.zw2 /DESTINATIONPATH:C:\temp
</code></example>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a restore operation.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case
                                              of invalid
                                              arguments or
                                              Parameter
                                              arguments are
                                              missing. E.g.
                                              the project
                                              name is
                                              missing. </exception>                                        
BEGIN_ACTION_DOC
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.GedRedraw">
            <summary>
Action name = gedRedraw

Action class for GED redraw.
</summary>
            <remarks>
The action can be used only interactively
</remarks>
            <example>
Redraw GED surface:
<code>
gedRedraw
</code></example>
            <exception cref="T:System.ApplicationException"> The graphics editor interface could not be created. </exception>
        </member>
        <member name="T:Eplan.EplApi.CommandLineActions.CommandLineAction">
http://intranet/fue/prod/Eplan%20Redesign/Systemdesign/Loesungen/InternalDoc_Guideline.dot
BEGIN_ACTION_DOC
<summary />
END_ACTION_DOC
</member>
        <member name="M:Utilities.getFirstProjectFromMRUList(EString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Get the first project from MRU List.
</summary>
            <param name="esProjectName">Project name with a full path and extension</param>
        </member>
        <member name="M:Utilities.setProjectAsFirstInMRUList(EString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set a project as the first one in MRU List.
</summary>
            <param name="esProjectName">Project name with a full path and extension</param>
        </member>
        <member name="M:Utilities.GetFilteredPages(ProjectHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Collections.ArrayList,System.String)">
            <summary>
Get pages.  get only pages filtered in filter strFilterName using page browser. 
</summary>
            <param name="hProject">Handle to project.</param>
            <param name="lstPgs">List of filtered pages.</param>
            <param name="strFilterName">the name of the pagefilter to use.</param>
        </member>
        <member name="M:Utilities.GetFilteredPages(ProjectHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Collections.ArrayList,System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Get pages. If bActivePageFilter is set, then get only pages filtered in GUI using page browser. Otherwise 
get all project pages.
</summary>
            <param name="hProject">Handle to project.</param>
            <param name="lstPgs">List of filtered pages.</param>
            <param name="bActivePageFilter">Determines if only filtered pages should be used.
                               Corresponds to "Active" check box in GUI page browser.</param>
            <remarks>If bActivePageFilter is set and the user has not used any filtering in page browser, so the delivered page set is empty.</remarks>
        </member>
        <member name="M:Utilities.CheckProject(EString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Checks whether the specified project name is an empty string. If it is empty,
an attempt is made to fetch the first project name from the list of recently opened projects.&lt;USER.SYSTEM.GUI.MRU.0.Project&gt;.
If the list does not contain any projects or if the project name in the list is empty, an exception is thrown.
</summary>
            <param name="esProjectName">Project name.</param>
            <exception cref="!:ArgumentException">If no project exists in the list of recently opened projects, 
 or if the project name in the list is empty.</exception>
        </member>
        <member name="T:Utilities">
            <summary>
Private class which defines some of the utilities used in the current module.
</summary>
        </member>
        <member name="M:EsDevTag.getNestedFunctions(DMFunctionHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;DMFunctionHandle,std.allocator&lt;DMFunctionHandle&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Collects all function which are directly nested in source function.
</member>
        <member name="M:DMInPlaceContext.getMousePosY">
            <summary>
Get mouse position y in screen coordinates.
</summary>
            <returns>y-position of mouse </returns>
        </member>
        <member name="M:DMInPlaceContext.getMousePosX">
            <summary>
Get mouse position x in screen coordinates.
</summary>
            <returns>x-position of mouse </returns>
        </member>
        <member name="M:DMInPlaceContext.setMousePosition(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Set the mouse position in screen coordinates
</summary>
            <param name="x">x-position</param>
            <param name="y">y-position</param>
        </member>
        <member name="M:DMInPlaceContext.getY">
            <summary>
Get y-position of dialog
</summary>
            <returns>The y-position</returns>
        </member>
        <member name="M:DMInPlaceContext.setY(System.Int32)">
            <summary>
Set y-position of dialog
</summary>
            <param name="y">y-position</param>
        </member>
        <member name="M:DMInPlaceContext.getX">
            <summary>
Get x-position of dialog
</summary>
            <returns>The x-position</returns>
        </member>
        <member name="M:DMInPlaceContext.setX(System.Int32)">
            <summary>
Set x-position of dialog
</summary>
            <param name="x">x-position</param>
        </member>
        <member name="F:SUM_SUBTOTAL">
CR 7348: Summierungen ////////
</member>
        <member name="M:DmgDimensionCircle.internalGetGripPoints(std.vector&lt;DmgGripPointInfo,std.allocator&lt;DmgGripPointInfo&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDmgDrawingContext*)">
            <summary>
get the grip points
</summary>
        </member>
        <member name="M:DmgDimensionCircle.internalFindNearestSnapPoint(System.Int32,EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Dmg.DmgSnapTypes*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDmgDrawingContext*)">
            <summary>
Method searches for snap points around pntLocation. If a snap is found with a distance smaller than dMniDist then true is returned and dMinDist,
pntFound and nFoundType are actualised.
</summary>
        </member>
        <member name="M:DmgDimensionCircle.isDiameterMeasured">
            <summary>
Find out if diameter or radius is measured.
</summary>
            <returns>True if diameter is measured, otherwise false.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setTypeOfMeasure(System.Boolean)">
            <summary>
Set type of measure i.e. if radius or diamete should be measured.
</summary>
            <param name="bMeasDiameter">If true, diameter is measured otherwise radius.</param>
        </member>
        <member name="M:DmgDimensionCircle.getStyleOfCircleDimension">
            <summary>
Get the style of circle dimension.
</summary>
            <returns>The style of circle dimension.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setStyleOfCircleDimension(Dmg.DmgTypeOfCircleDimension!System.Runtime.CompilerServices.IsConst)">
            <summary>
Set the style of the circle dimension.
</summary>
            <param name="nType">The style of circle dimension.</param>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionTextPosition(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the dimension text position.
</summary>
            <param name="pntTextPosition">The dimension text position.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionTextPosition">
            <summary>
Get the dimension text position.
</summary>
            <returns>The dimension text position.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionText(EString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the dimension text.
</summary>
            <param name="esDimensionText">The dimension text.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionText">
            <summary>
Get dimension text.
</summary>
            <returns>The dimension text.</returns>
        </member>
        <member name="M:DmgDimensionCircle.getPointExtensionLine">
            <summary>
Get vertex of extension line.
</summary>
            <returns>the vertex of extension line.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setPointExtensionLine(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the vertex of extension line.
</summary>
            <param name="pntExtensionLine">Vertex extension line.</param>
        </member>
        <member name="M:DmgDimensionCircle.getVertex">
            <summary>
Get the vertex of dimension line.
</summary>
            <returns>The vertex.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setVertex(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the vertex. This indicates the vertex of dimension line.
</summary>
            <param name="pntVertex">The vertex.</param>
        </member>
        <member name="M:DmgDimensionCircle.getCenter">
            <summary>
Get the center.
</summary>
            <returns>the center of circle or circular arc.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setCenter(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the center of the circle or circular arc.
</summary>
            <param name="pntCenter">The center of circle or circular arc.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionPosition">
            <summary>
Get the dimension position.
</summary>
            <returns>The dimension position.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionPosition(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the dimension position. This position indicates the vertex of dimension line on the circle.
</summary>
            <param name="pntDimensionPosition">The dimension position.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionPoint">
            <summary>
Get the dimension point. This point indicates the vertex of dimension line on the circle.
</summary>
            <returns>The dimension point.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionPoint(DmgDimensionPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the dimension point. This point indicates the vertex of dimension line on the circle.
</summary>
            <param name="dimDimPoint">The dimension point to set.</param>
        </member>
        <member name="T:DmgSpecialMirrorRotateTexts">
            <summary>
This is a class for transforming texts in a special manner used e.g. for
the change of norms, for mirroring in the ged or by the symbol editor.
You can mirror texts or ratate texts by 90, 180 and 270 degrees.
</summary>
        </member>
        <member name="M:EGeoSpline.getSplineAsPolyline(EGeoPolyLine*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>
methods converts spline into a polyline
</summary>
            <param name="geoPoly">converted polyline </param>
            <param name="nSegments">number of segments of new created polyline, default:128
	Created polyine may contain only one segment, if control points of bezier curve are on the line
	between pntstart and pntend</param>
            <returns>true if everything is allright </returns>
        </member>
        <member name="F:Aflicense.m_bIsLicensingAvailable">
is licensing is available
</member>
        <member name="M:Aflicense.isLicensingAvailable">
Checks if licensing is available
</member>
        <member name="F:AfApplication.sm_Application">
************************************************************************
************************************************************************
</member>
        <member name="T:EUnicodeConverter">
EUnicodeConverter.h
</member>
        <member name="M:op_BitwiseAnd(IEArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
global operator to write an EColor into an archive or to read it from
</member>
        <member name="M:EBox3D.getCenter">
get box center point 
</member>
        <member name="M:EBox3D.getDiagonal">
get box direction vector.
</member>
        <member name="M:EPosition3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion from eCabinet/Triga
</member>
        <member name="M:EPosition3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
explicit set
</member>
        <member name="M:EPosition3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion from eCabinet/Triga
</member>
        <member name="M:EPosition3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
explicit constructor
</member>
        <member name="M:EPosition3D.#ctor(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion from ETransform3D
</member>
        <member name="M:EPosition3D.#ctor(EPosition3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EPosition3D.#ctor(EPosition3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EPosition3D.#ctor">
default constructor
</member>
        <member name="F:EArc3D.m_Angle">
angle to End-Point
</member>
        <member name="F:EArc3D.m_StartVector">
Start-Point
</member>
        <member name="F:EArc3D.m_Normal">
normal vector 
</member>
        <member name="F:EArc3D.m_Origin">
center point
</member>
        <member name="M:EArc3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Methodes from Interface ICurve3D
	@see : ICurve3D

</member>
        <member name="M:EPath3D.getEndPoint">
Interface Function
</member>
        <member name="M:EPath3D.getStartPoint">
Interface Function
</member>
        <member name="M:EPath3D.isClosed">
Interface Function
</member>
        <member name="M:EContour3D.triangulate(std.vector&lt;ETriangle3D,std.allocator&lt;ETriangle3D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
triangulate closed contour
</member>
        <member name="M:EContour3D.getEndPoint">
Interface Function
</member>
        <member name="M:EContour3D.getStartPoint">
Interface Function
</member>
        <member name="M:EContour3D.isClosed">
Interface Function
</member>
        <member name="T:EPointArray3D">
represents an array of points

</member>
        <member name="M:EBoundingBox3D.checkBoxZRange(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
special Function to compare the Z-range of two bounding boxes. 
Needed for hidden line calculation.
returns a negative value if this Z-range is closer to 0 than bb
returns 0 if Z-ranges overlap
returns a positive value if bb Z-range is closer to 0 than this 

</member>
        <member name="M:EBoundingBox3D.isInsideBoxXY(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
special Function to compare two bounding boxes by ignoring z-axis. 
Needed for hidden line calculation.
True if this is inside or touching bb
False if this and bb are disjunct. 

</member>
        <member name="M:EBoundingBox3D.isInside(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
special function for polygon inside/outside test:
		return value is true if point is inside, else
		LowCount is increased, if p is left, lower, nearer then LDF
		HighCount is increased, if p is right, upper, farer then RUB

</member>
        <member name="M:EBoundingBox3D.getSize">
returns getLength(GetDiagonale())
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getCenter">
returns getRub()-getLdf()/2
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getDiagonal">
returns getRub()-getLdf()
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRub">
returns right, up back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRuf">
returns right, up, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRdb">
returns right, down, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRdf">
returns right, down, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLub">
returns left, up, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLuf">
returns left, up, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLdb">
returns left, down, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLdf">
returns left, down, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.isSet">
check, if at least one point was set (is false after clear)
</member>
        <member name="M:EBoundingBox3D.merge(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
adds another BoundingBox
</member>
        <member name="M:EBoundingBox3D.merge(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
adds one Point
</member>
        <member name="M:EBoundingBox3D.clear">
initializes the BoundingBox empty
</member>
        <member name="M:EBoundingBox3D.set(ERectangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
initializes the BoundingBox whith a 2D rectangle and the z range
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox whith to corner points
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox as a cube with edges of "size" length
</member>
        <member name="M:EBoundingBox3D.set(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox by another BoundingBox
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox with one point (size()=0)
</member>
        <member name="M:EPlane3D.getDirectedDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
distance in direction of normal is positive, other side negative
this value will be negative(!) if the point is opposite to the nomal of the plane
</member>
        <member name="M:EPlane3D.intersect(EPlane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ERay3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
intersect Plane with plane; result is a ray 
</member>
        <member name="M:EPlane3D.intersect(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
intersect ray with plane
</member>
        <member name="M:EPlane3D.project(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
projected vector on plane
</member>
        <member name="M:EPlane3D.project(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
projected point on plane
</member>
        <member name="M:EPlane3D.getPointFromPlane(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Plane coordinates to world
</member>
        <member name="M:EPlane3D.getPointOnPlane(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
World coordinates to plane, true if exact on plane, else projected point
</member>
        <member name="M:EPlane3D.getDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:EPlane3D.getDistanceSq(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:EPlane3D.transform(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform plane
</member>
        <member name="M:EPlane3D.isOn(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if ray is flat in the plane
</member>
        <member name="M:EPlane3D.isOn(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if vector is flat in the plane
</member>
        <member name="M:EPlane3D.isOn(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if point is on Plane
</member>
        <member name="M:EPlane3D.isParallel(EPlane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
check for parallel Planes, true if normals are colinear 
</member>
        <member name="M:EPlane3D.op_Equality(EPlane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Plane equality operator.
</member>
        <member name="M:EPlane3D.getAxisV">
Plane V-Axis (calculated from normal)
</member>
        <member name="M:EPlane3D.getAxisU">
Plane U-Axis (calculated from normal)
</member>
        <member name="M:EPlane3D.getOrigin">
Plane getOrigin
</member>
        <member name="M:EPlane3D.getNormal">
Plane normal vector.
</member>
        <member name="M:ERay3D.rayDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
pkt is projected orthogonal to the ray. then the directed distance between the ray origin and this projection is calculated
	this is reverse to getPoint(dbl); 

pkt is projected orthogonal to the ray. then the directed distance between the ray origin and this projection is calculated
</member>
        <member name="M:ERay3D.rayDistanceSq(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates distance between two rays
if result ==0.0, rays intersect, result has coordinates of the intersection point
if result &gt;0.0, the rays don't intersect, result has coordinates of the point of minimal distance on ray1.

</member>
        <member name="M:ERay3D.projectTo(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate closest point to given Point
</member>
        <member name="M:ERay3D.getDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and ray
</member>
        <member name="M:ERay3D.getDistanceSq(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:ERay3D.transform(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform ray
</member>
        <member name="M:ERay3D.isOn(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
ray is on 
</member>
        <member name="M:ERay3D.isParallel(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
check for parallel rays, true if directions are collinear 
</member>
        <member name="M:ERay3D.op_Equality(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
ray equality operator.
</member>
        <member name="M:ERay3D.getOrigin">
ray origin
</member>
        <member name="M:ERay3D.getDirection">
ray direction vector.
</member>
        <member name="M:ERay3D.setOrigin(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ray getOrigin
</member>
        <member name="M:ERay3D.setDirection(EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ray direction vector.
</member>
        <member name="M:ERay3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor
</member>
        <member name="M:EUnitVector3D.normalizedScalarprod(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates scalarproduct with unit vectors
</member>
        <member name="M:EUnitVector3D.unit">
normalize to unit length
</member>
        <member name="M:EUnitVector3D.getLength">
get length
</member>
        <member name="M:EUnitVector3D.getLengthSq">
get square of length
</member>
        <member name="M:EUnitVector3D.op_SubtractionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace subtract a vector
</member>
        <member name="M:EUnitVector3D.op_AdditionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add a vector
</member>
        <member name="M:EUnitVector3D.op_DivisionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
divide by a scale
</member>
        <member name="M:EUnitVector3D.op_MultiplicationAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
multiplicate inplace by a scalar
</member>
        <member name="M:EUnitVector3D.set(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ordinates
</member>
        <member name="M:EUnitVector3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EUnitVector3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EUnitVector3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EContour2D.addSegmentBegin(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Alias of addSegmentPoint
</member>
        <member name="M:ETransform3D.getMov">
access to transformation vector component of the transformation
</member>
        <member name="M:ETransform3D.getMat">
access to rotation matrix component of the transformation
</member>
        <member name="M:ETransform3D.getScale">
calculates the scale of a 3D-transform. is the 3.root of getDeterminante
	does not work properly, if scaling for x y and z is different 
</member>
        <member name="M:ETransform3D.isMirror">
returns true, if the transformation does mirror objects
</member>
        <member name="M:ETransform3D.getDeterminante">
calculates the determinant of the matrix
</member>
        <member name="M:ETransform3D.transpose">
transpose Matrix (swap columns and rows)
</member>
        <member name="M:ETransform3D.op_UnaryNegation">
build inverse transform 
</member>
        <member name="M:ETransform3D.op_Multiply(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform distance (eg. radius); does not work properly if scaling in x,y and z is different
</member>
        <member name="M:ETransform3D.transform(EVector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a vector inplace

transform a vector inplace
</member>
        <member name="M:ETransform3D.transform(EPoint3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a pointvector inplace

transform a pointvector inplace
</member>
        <member name="M:ETransform3D.op_Multiply(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a pointvector
</member>
        <member name="M:ETransform3D.op_Multiply(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a vector
</member>
        <member name="M:ETransform3D.op_MultiplicationAssignment(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
in place combine two transformation by matrix multiply
</member>
        <member name="M:ETransform3D.op_Multiply(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
combine two transformation by matrix multiply
</member>
        <member name="M:ETransform3D.op_Equality(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test equality

test equality
</member>
        <member name="M:ETransform3D.setIdentity">
build identity transform
</member>
        <member name="M:ETransform3D.op_Assign(ETransform3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
move operator
</member>
        <member name="M:ETransform3D.op_Assign(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
assignment operator
</member>
        <member name="M:ETransform3D.#ctor(EMatrix3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a from values
</member>
        <member name="M:ETransform3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a translating ETransform3D
</member>
        <member name="M:ETransform3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation ETransform3D, that rotates counter clock wise around the given center point and axis
</member>
        <member name="M:ETransform3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a ETransform3D, from two axis and an origin point
</member>
        <member name="M:ETransform3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a ETransform3D from two axis, calculates w = u%v
</member>
        <member name="M:ETransform3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a ETransform3D from three axis
</member>
        <member name="M:ETransform3D.#ctor(System.Double)">
constructs a scaling ETransform3D
</member>
        <member name="M:ETransform3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation ETransform3D by three angles 
</member>
        <member name="M:ETransform3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation ETransform3D by axis and angle
</member>
        <member name="M:ETransform3D.#ctor(ETransform3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
the move constructor
</member>
        <member name="M:ETransform3D.#ctor(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
the copy constructor
</member>
        <member name="M:ETransform3D.#ctor">
constructs a unit transform
</member>
        <member name="M:EMatrix3D.op_MultiplicationAssignment(EMatrix3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
in place combine two transformation by matrix multiply
</member>
        <member name="M:EMatrix3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.">
constructs a from values
</member>
        <member name="M:EMatrix3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a scaling matrix
</member>
        <member name="M:EMatrix3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation matrix by three angles 
</member>
        <member name="M:EMatrix3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation matrix by axis and angle
</member>
        <member name="M:EMatrix3D.#ctor(EMatrix3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
the copy constructor

the move constructor
</member>
        <member name="M:EMatrix3D.#ctor">
constructs a unit matrix
</member>
        <member name="M:EVector3D.getV">
get as array of doubles 
</member>
        <member name="M:op_Multiply(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
friend operator, first operand not a W3dGeometry class 
skalar multiplication

skalar multiplication
</member>
        <member name="M:EVector3D.normalizedCrossprod(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates cross product with unit vectors
</member>
        <member name="M:EVector3D.normalizedScalarprod(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates scalarproduct with unit vectors
</member>
        <member name="M:EVector3D.getAngle(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate angle between vectors (0-360°), plane normal vector decides what is the right angle
</member>
        <member name="M:EVector3D.getAngleXY(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate angle between vectors (0-180°)
</member>
        <member name="M:EVector3D.getAngle(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate angle between vectors (0-180°)
</member>
        <member name="M:EVector3D.isNull">
faster test if getLength() equals 0.0
</member>
        <member name="M:EVector3D.isColinear(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if two Vectors are colinear 
</member>
        <member name="M:EVector3D.unit">
normalize to unit length
</member>
        <member name="M:EVector3D.getLength">
get length
</member>
        <member name="M:EVector3D.getLengthSq">
get square of length
</member>
        <member name="M:EVector3D.op_Inequality(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test unequal; to bee implemented if needed 
</member>
        <member name="M:EVector3D.op_Equality(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test equal
</member>
        <member name="M:EVector3D.op_UnaryNegation">
negate a vector
</member>
        <member name="M:EVector3D.op_Modulus(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
vector product
</member>
        <member name="M:EVector3D.op_Subtraction(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
subtract a vector
</member>
        <member name="M:EVector3D.op_Addition(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
add a vector
</member>
        <member name="M:EVector3D.op_Multiply(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
scalar product
</member>
        <member name="M:EVector3D.op_Multiply(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
multiplicate by a scalar
</member>
        <member name="M:EVector3D.op_SubtractionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace subtract a vector
</member>
        <member name="M:EVector3D.op_AdditionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add a vector
</member>
        <member name="M:EVector3D.op_DivisionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
divide by a scale
</member>
        <member name="M:EVector3D.op_MultiplicationAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
multiplicate inplace by a scalar
</member>
        <member name="M:EVector3D.set(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ordinates
</member>
        <member name="M:EVector3D.getAt(System.UInt32)">
get cordinate at index (0, 1 or 2)

get coordinate 
</member>
        <member name="M:EVector3D.setZ(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set z coordinate

set z coordinate
</member>
        <member name="M:EVector3D.getZ">
get z coordinate

get z coordinate
</member>
        <member name="M:EVector3D.setY(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set y coordinate

set y coordinate
</member>
        <member name="M:EVector3D.getY">
get y coordinate

get y coordinate
</member>
        <member name="M:EVector3D.setX(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set x cordinate

set x cordinate
</member>
        <member name="M:EVector3D.getX">
get x cordinate

get x cordinate
</member>
        <member name="M:EVector3D.init">
clear content

clear content
</member>
        <member name="M:EVector3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion constructor: treat point as vector
</member>
        <member name="M:EVector3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EVector3D.#ctor(EVector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
move constructor
</member>
        <member name="M:EVector3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EVector3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EVector3D.#ctor">
default constructor
</member>
        <member name="M:EPoint3D.getAt(System.UInt32)">
get coordinate 
</member>
        <member name="M:EPoint3D.getV">
get Point as array of doubles 

get as array of doubles 
</member>
        <member name="M:EPoint3D.distanceTo(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates distance 
</member>
        <member name="M:EPoint3D.distanceSqTo(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates square of distance (faster than calc distance)
</member>
        <member name="M:EPoint3D.setZ(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set z coordinate

set z coordinate
</member>
        <member name="M:EPoint3D.z">
get z coordinate

get z coordinate
</member>
        <member name="M:EPoint3D.setY(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set y coordinate

set y coordinate
</member>
        <member name="M:EPoint3D.y">
get y coordinate

get y coordinate
</member>
        <member name="M:EPoint3D.setX(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set x cordinate

set x cordinate
</member>
        <member name="M:EPoint3D.x">
get x cordinate

get x cordinate
</member>
        <member name="M:EPoint3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion constructor
</member>
        <member name="M:EAngleType.op_UnaryNegation">
invert angle
</member>
        <member name="M:EAngleType.op_SubtractionAssignment(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add angles 
</member>
        <member name="M:EAngleType.op_Subtraction(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
add angles 
</member>
        <member name="M:EAngleType.op_AdditionAssignment(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add angles 
</member>
        <member name="M:EAngleType.op_Addition(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
add angles 
</member>
        <member name="M:EAngleType.value(enAngleType,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle specifyed unit
</member>
        <member name="M:EAngleType.value(enAngleType)">
get Angle specifyed unit
</member>
        <member name="M:EAngleType.trn">
get Angle in turns; circle=1
</member>
        <member name="M:EAngleType.rad">
get Angle in radian; circle=2*PI
</member>
        <member name="M:EAngleType.deg">
get Angle in degrees; circle=360deg
</member>
        <member name="M:EAngleType.trn(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle in turns; circle=1
</member>
        <member name="M:EAngleType.rad(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle in radian; circle=2*PI
</member>
        <member name="M:EAngleType.deg(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle in degrees; circle=360deg
</member>
        <member name="M:EAngleType.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EAngleType.#ctor(enAngleType,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EAngleType.#ctor">
default constructor
</member>
        <member name="T:enAngleType">
Type to define angle value range
</member>
        <member name="F:AT_TURNS">
circle 1.0
</member>
        <member name="F:AT_RADIAN">
circle 2*PI
</member>
        <member name="F:AT_DEGREE">
circle 360°
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.RouteTopology">
BEGIN_ACTION_DOC
<summary>
Action name = routetopology

Action class for routing of topology connections.
</summary><remarks>
This action is available only for users with license option: <c>Cabling</c>.
</remarks><param name="PROJECTNAME">Project name with full
                          path (optional).<para />If
                          not entered, the
                          selected project is used
                          when the action is
                          called from GUI (like
                          from a script or button
                          bar). If called from the
                          windows command line,
                          PROJECTNAME must be set
                          or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" />
                          must be used first,
                          otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" />
                          exception is thrown. </param><example>
route topology connections
<code>
routetopology /PROJECTNAME:C:\\Projects\\EPLAN\\ESS_Sample_Project.elk
</code></example>
END_ACTION_DOC
<exclude /></member>
        <member name="T:Eplan.EplApi.CommandLineActions.Print">
            <summary>
Action name = print

Action class to print projects and pages.
</summary>
            <remarks>
If a page was explicitly entered by the PAGENAME parameter, then only this page is printed and the USEPAGEFILTER, parameter is ignored.

If no specific page was explicitly entered by the PAGENAME parameter, project pages are determined. If USEPAGEFILTER is set to 1, only pages filtered in GUI page navigator will be printed. If USEPAGEFILTER is not used or if it is set to 0, all project pages will be printed.

USEPAGEFILTER corresponds to "Active" check box in the page navigator.

Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the action.
</remarks>
            <param name="TYPE">Type of task to ben performed:<br />
PROJECT: Print project.<br />
PAGES: Print pages.</param>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first,otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="PRINTERNAME">Name of printer (optional).
Default value: Printer set on your computer.</param>
            <param name="PAGENAME">Page to be printed (optional).</param>
            <param name="PRINTCOLLATE">Sorted order (optional, 0 = No, 1 = Yes).
Default value: 1</param>
            <param name="PRINTREVERSE">Reverse order (optional, 0 = No, 1 = Yes).
Default value: 0 </param>
            <param name="NUMBER">Number of copies.
Default:1 </param>
            <param name="DESTINATIONFILE">Path and name of the output file.
Default value: Printer set or Specified </param>
            <param name="USEPAGEFILTER">Determines if only filtered pages should be used or all project pages (optional). It corresponds to "Active"check box in GUI.
Default value: 0 </param>
            <param name="PRINTCHANGEDPAGES">Print only changed pages</param>
            <example>
Print page:
<code>
print /TYPE:PAGES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME:=AP+ST1/6 /PRINTERNAME:my_printer /NUMBER:2
</code>
Print page to file:
<code>
print /TYPE:PAGES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PRINTCOLLATE:0 /PRINTREVERSE:1 /DESTINATIONFILE:C:\TEMP\ESS_Sample_Project_print.prn /USEPAGEFILTER:1
</code>
Print project:
<code>
print /TYPE:PROJECT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PRINTCOLLATE:0 /PRINTREVERSE:1 /DESTINATIONFILE:C:\TEMP\\ESS_Sample_Project_print.prn
</code></example>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a print operation.</exception>                                                                                 
BEGIN_ACTION_DOC
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.ImportSegmentsTemplate">
            <summary>
Action name = ImportSegmentsTemplate

Action to import segment templates from file to project.
</summary>
            <param name="PROJECTNAME">Project name with full path(optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="FILENAME">Full file name of source file. Can't be <c>null</c> or <c>empty</c>.</param>
        </member>
        <member name="T:Eplan.EplApi.CommandLineActions.Edit">
            <summary>
Action name = edit

Action class for edit functions: open a project, open a page with a name, open a page with a device name and open a page with name and set the cursor at x y coordinates.
</summary>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is	used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="PAGENAME">Name of the page to be opened(optional). Required if X, Y have been specified as parameters. </param>
            <param name="DEVICENAME">Name of an item (optional).</param>
            <param name="X">X coordinate (optional). Parameter is only valid if the PAGENAME parameter is available.</param>
            <param name="Y">Y coordinate (optional). Parameter is only valid if the PAGENAME parameter is available.</param>
            <param name="INSTALLATIONSPACE">Name of the installation space too be opened (optional). not possible to use with PAGENAME</param>
            <param name="DEVICENAME3D">Name of an item inside of an installation space (optional).</param>
            <remarks>

The current action checks the parameters and execute the corresponding operation. One of the following operation will be done. 
The operation n° 1 has a highest priority and the operation n° 5 has the lowest priority. 
For example if a page	name and device name are set, so the operation n° 1 will be executed. 
Otherwise it checks if it is possible to execute the remaining operations. 
If at all no parameter was set, soonly the project will be opened(operation n° 5). <br />
1- open a page with name and a device name. The device will be selected. If the given device was not found on the page, so the page will be opened and no element will be selected. <br />
   In this case an error message will be inserted into message system. <br />
2- open a page with a name, X and Y coordinates. <br />
3- open a page only with a name. <br />
4- open a page which holds the	first device name found. <br />
5- open a project

</remarks>
            <example>
                <bold>Open project:</bold>
                <code>
edit /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code>
Open page:
<code>
edit /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME:=AP+ST1/7
</code>
Open page by a device tag of a device, which is located on the page:
<code>
edit /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /DEVICENAME:=AP+PT1-G1
</code>
Open page and set cursor to X, Y position:
<code>
edit /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME:=AP+ST1/7 /X:200 /Y:100
</code><code>
edit /PROJECTNAME:$(MD_PROJECTS)\ESS_Sample_Project.elk /INSTALLATIONSPACE:"=EB3+ET1 (-MP1)"
</code><code>
edit /PROJECTNAME:$(MD_PROJECTS)\ESS_Sample_Project.elk /DEVICENAME3D:=EB3+ET1-F14
</code></example>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during an
                                edit operation.</exception>                                                                         
BEGIN_ACTION_DOC
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.SwitchProjectType">
            <summary>
Action to change type of project.
</summary>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected  project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" />  must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="PROJECTTYPE">New type of project (optional). Type is represented by numbers: 
1 - Schematic project; 
2 - Macro project. 
If this parameter is not used then action will switch current type to the second.</param>
        </member>
        <member name="T:Eplan.EplApi.CommandLineActions.Search">
BEGIN_ACTION_DOC
<summary>
Action name = search

Action class for search operations. Search items in a  project.
</summary><param name="TYPE">Describes the search area:<br />
DEVICETAG: Search for devices<br />
ALLPROPERTIES: Search through all properties<br />
TEXTS: Text search<br />
PAGEDATA: Search through page data<br />
PROJECTDATA: Search through project data</param><param name="PROJECTNAME">Project name with full path optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line,PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="SEARCHITEM">Text you are searching for.</param><param name="CASESENSITIVE">Match case (optional, 1 = Yes, 0 = No).
Default value: Most recently used value which is currently set in GUI.</param><param name="WHOLETEXT">Find whole texts only (optional, 1 = Yes, 0 = No).
Default value: Most recently used value which is currently set in GUI.</param><param name="LOGICPAGES">Search on logic pages (optional, 1 = Yes, 0 = No).
Default value: Most recently used value which is currently set in GUI.</param><param name="GRAPHICPAGES">Search on graphical pages (optional, 1 = Yes, 0 = No).
Default value: Most recently used value which is currently set in GUI.</param><param name="EVALUATIONPAGES">Search on report pages (optional, 1 = Yes, 0 = No).
Default value: Most recently used value which is currently set in GUI.</param><param name="NOTPLACEDFUNCTIONS">Search in unplaced functions (optional, 1 = Yes, 0 = No).
Default value: Most recently used value which is currently set in GUI.</param><param name="SEARCHDB">Don't use this parameter any more.</param><example><code>
search /TYPE:TEXTS /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /SEARCHITEM:Hallo /CASESENSITIVE:1 /WHOLETEXT:0 /LOGICPAGES:1
</code><code>
search /TYPE:PAGEDATA /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /SEARCHITEM:Antrieb /CASESENSITIVE:0 /WHOLETEXT:0 /LOGICPAGES:1 /EVALUATIONPAGES:1 /NOTPLACEDFUNCTIONS:1
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a
                                search operation.</exception><remarks>
The results of the search will only be visible in the list of results dialog, if the project for which the search was conducted is currently open in EPLAN.
</remarks>                                                                                                                                                                              
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Generate">
BEGIN_ACTION_DOC
<summary>
Action name = generate

Action class for generate functions: generate connections and generate cables.
</summary><param name="TYPE">Type of task to be performed by the action:
CONNECTIONS: Connection generation
CABLES: Cable generation </param><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is  called from GUI (like from a script or button bar). 
If called from the windows command line,PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="CREATIONSCHEME">Name of the scheme; for cable generation (optional).
Default value: Most recently used scheme.
This only applies to cable generation.</param><param name="NUMBERINGSCHEME">Name of the scheme; for cable numbering (optional).
Default value: Recent scheme.
This only applies to cable generation.</param><param name="AUTOSELECTSCHEME">Name of the scheme; for automatic cable selection (optional).
Default value: Recent scheme.
This only applies to cable generation.</param><param name="KEEPOLDNAMES">Specifies whether existing cable names are to be preserved (optional, 0 = No, 1 = Yes).
Default value = 1
This only applies to cable generation.</param><param name="STARTVALUE">Start value for DT counter (optional).
Default value: 1This only applies to cable generation.</param><param name="STEPVALUE">Increment; value by which the DT counter is increased (optional).
Default value: 1
Only applies to cable generation.</param><param name="ONLYAUTOCABLES">Specifies whether the cable selection should be made only for automatically generated cables (optional, 0 = No, 1 = Yes).
Default value: 1
Only applies to cable generation.</param><param name="REBUILDALLCONNECTIONS">If set to 1, the action	rebuilds all connections, otherwise it updates only.</param><param name="PAGENAME">Name of the page to be updated (optional).
This parameter is only effective with the CONNECTIONS value of the TYPE parameter.</param><param name="USEPAGEFILTER">Determines if only filtered pages should be used or all project pages (optional). It corresponds to "Active" check box in GUI. 
These parameters are only effective with the CONNECTIONS value of the TYPE parameter.
Default value: 0 </param><param name="PAGEFILTERNAME">Pages are read from pagefilter with the name pagefiltername.These parameters are only effective  with the CONNECTIONS value of the TYPE parameter.</param><param name="PAGENAMEn">Names of the pages to be included in connections update (optional), where n is a number e.g. /PAGENAME1:=AP+ST1/2 /PAGENAME2:=AP+ST1/4 /PAGENAME3:=AP+ST1/7 etc. 
These parameters are only effective with the CONNECTIONS value of the TYPE parameter.</param><param name="SELn">Identifier of the pages to be included in connections update  (optional), where n is a number (e.g. /SEL1:38/4/12/0 (result from StorableObject.ToStringIdentifier())) parameters are only effective with the CONNECTIONS value of the TYPE parameter.</param><example>
Connection generation
<code>
generate /TYPE:CONNECTIONS /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code>
Cable generation
<code>
generate /TYPE:CABLES /KEEPOLDNAMES:0 /STARTVALUE:5 /STEPVALUE:2 /ONLYAUTOCABLES:0
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a generate operation.</exception>                                                         
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Check">
BEGIN_ACTION_DOC
<summary>
Action name = check

Action class for check functions: check a project and check pages.
</summary><remarks>
If a page was explicitly entered by the PAGENAME parameter, then only this page is checked and the USEPAGEFILTER parameter is ignored. 
If no specific page was explicitly entered by the PAGENAME parameter, project pages are determined. 
If USEPAGEFILTER is set to 1, only pages filtered in GUI page navigator will be checked. 
If USEPAGEFILTER is not used or if it is set to 0, all project pages will be checked. USEPAGEFILTER corresponds to "Active" check box in the page navigator.
</remarks><param name="TYPE">Type of task to be performed by the action.
Possible values are:<br />
PROJECT: Check project<br />
PAGE: Check page<br />
INSTALLATIONSPACE: Check installation space<br />
ONLYCOMPLETED: Check project, only completed messages<br />
PARTS: Check parts</param><param name="PROJECTNAME">Project name with full path(optional).
If not entered, the selected project is used when the action is	called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="VERIFICATIONSCHEME">Name of scheme used for the project check (optional, scheme name only, without path).
Default	value: Most recently used scheme.</param><param name="VERIFYCOMPLETEDONLY">Verifies completed messages only, when set to 1. Default is 0.
This parameter is only effective with the PROJECT and PARTS value of TYPE parameter, and without the PARTNUMBERn parameter.</param><param name="USEPAGEFILTER">Determines if only filtered pages should be used or all project pages (optional). 
It corresponds to "Active" check box in GUI<br />
Default	value: 0 </param><param name="PAGENAME">Name of the page to be checked (optional).</param><param name="SELn">Identifier of the pages to be Checked (optional), where n is a number (e.g. /SEL1:38/4/12/0 (result from StorableObject.ToStringIdentifier())) parameters are only effective with the PAGE value of the TYPE parameter.</param><param name="PARTNUMBERn">Part number to be checked (optional), where n is a counter (e.g. /PARTNUMBER1:MyPartNumberA /PARTNUMBER2:MyPartNumberB</param><param name="PARTVARIANTn">Part variant to be checked (optional), where n is a counter.
Parameter is only effective with corresponding PARTNUMBER parameter (e.g. /PARTNUMBER1:MyPartNumberA /PARTVARIANT1:V2</param><param name="INSTALLATIONSPACENAME">Name of the installation space to be checked. Value stored under property <see text="INSTALLATIONSPACE_DESIGNATION" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_DESIGNATION(System.Int32)" /></param><param name="INSTALLATIONSPACENAMEn">Name of the installation space to be checked, where n is a number e.g. /INSTALLATIONSPACENAME1:BR1 /STRUCTURE1:=EB3+ET1 /INSTALLATIONSPACENAME2:BR2 /STRUCTURE2:=EB3+ET2 etc.
Value stored under property <see text="INSTALLATIONSPACE_DESIGNATION" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_DESIGNATION(System.Int32)" /></param><param name="STRUCTURE">Structure identifier of installation space to be checked. This	parameter is only effective	with the INSTALLATIONSPACE value of the	TYPE parameter.</param><param name="STRUCTUREn">Structure identifier of installation space to be checked, where n is a number e.g. /INSTALLATIONSPACENAME1:BR1 /STRUCTURE1:=EB3+ET1 /INSTALLATIONSPACENAME2:BR2 /STRUCTURE2:=EB3+ET2 etc.
This parameter is only effective with the INSTALLATIONSPACE value of the TYPE parameter.</param><example>
Check project with scheme: Offline
<code>
check /TYPE:PROJECT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /VERIFICATIONSCHEME:Offline
</code>
Check most recently used project with most recently used scheme
<code>
check /TYPE:PROJECT
</code>
Check page
<code>
check /TYPE:PAGES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /PAGENAME:=AP+ST1/6
</code>
Check pages of the recently used project 
<code>
check /TYPE:PAGES /USEPAGEFILTER:1
</code>
Check an installation space
<code>
check /TYPE:INSTALLATIONSPACE /INSTALLATIONSPACENAME:BR1
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a check operation.</exception>                                                         						
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.PartsList">
BEGIN_ACTION_DOC
<summary>
Action name = partslist

Action class for exporting and importing parts and other parts management items like addresses, constructions, terminals, accessory lists and accessory placements. Allows also to delete stored properties.
</summary><param name="TYPE">Type of task to be performed:<br />
IMPORT: Import parts lists<br />
EXPORT: Export parts lists<br />
IMPORTTOSYSTEM: Import to parts management<br />
EXPORTFROMSYSTEM: Export from parts management<br />
DELETESTOREDPROPERTIES: Delete stored properties from project</param><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line,PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="IMPORTFILE">The directory and the file name of the file to be imported must be specified here. This only applies to IMPORT.</param><param name="EXPORTFILE">The directory and the file name of the file to be exported must be specified here. The file extension is automatically added by the system. This only applies to EXPORT</param><param name="FORMAT">Optional: File format ("XPalXmlExporter","XPalCSVConverter", or user-defined format). 
For parts management ( IXPamImportE21, IXPamImportE5, IXPamImportText, IXPamImportCSV, IXPamImportEcad, XPamImportXml and IXPamImportText, IXPamImportCSVAddresses, XPamExportXml)
XPalXmlExporter is the default format value for tasks of 'TYPE': IMPORT, EXPORT,
XPamExportXml is the default format value for tasks of 'TYPE': IMPORTTOSYSTEM, EXPORTFROMSYSTEM.
See also <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" /> and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.
</param><param name="SQLFILTERPART">Optional: Sql filter for advanced users.
Default value: 1=1</param><param name="SQLFILTERADDRESS">Optional: Sql filter for advanced users (used with 'IXPamImportCSVAddresses' format).
Default value: 1=1</param><param name="SQLFILTERCONSTRUCTION">Optional: Sql filter for advanced users. Used for exporting constructions.
Default value: 1=0</param><param name="SQLFILTERTERMINAL">Optional: Sql filter for advanced users. Used for exporting terminals.
Default value: 1=0</param><param name="SQLFILTERACCESSORYLIST">Optional: Sql filter for  advanced users. Used for exporting accessory lists.
Default value: 1=0</param><param name="SQLFILTERACCESSORYPLACEMENT">Optional: Sql filter for advanced users. Used for exporting accessory placements.
Default value: 1=0</param><param name="CFGFILE">Optional: The directory and the file name of the configuration file.
Default value: the currently used config file.</param><param name="FIELDASSIGNMENTSCHEME">Optional: Name of scheme that is used to assign fields in some article properties</param><param name="MODE">Optional: Import mode.<br />
Supported modes are:<br />
0: append new records only<br />
1: update existing records only<br />
2: update existing records and append new ones<br />
Default value= 0, append new records only. If an invalid value is set, the default value 0 will be used.</param><param name="ADDITIONAL_LANGUAGE">Optional.Valid only when TYPE has 'IMPORTTOSYSTEM' value.
If the value of this parameter is 1, multi-language properties will be updated with another language values rather than being replaced with the file's content.
If the parameter is omitted, content of the file replaces values of multi-language properties.</param><param name="CONFIGSCHEME">Configuration scheme for deleting stored properties (optional).
Default value: Recent configuration scheme. The most recently used scheme is taken if an empty string is passed. This applies only to delete stored properties.</param><example>
Export:
<code>
partslist /TYPE:EXPORT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk    /FORMAT:XPalCSVConverter /EXPORTFILE:C:\temp\PartsList.csv
</code>
Import:
<code>
partslist /TYPE:IMPORT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk    /FORMAT:XPalCSVConverter /IMPORTFILE:C:\temp\PartsList.csv
</code>
Deletes stored properties from a project.
<code>
partslist /TYPE:DELETESTOREDPROPERTIES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /CONFIGSCHEME:config_scheme
</code>
Use the most recent configuration scheme: The 'CONFIGSCHEME'
parameter is not entered.
<code>
partslist /TYPE:DELETESTOREDPROPERTIES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a parts list operation.</exception>                                                                              
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Projectmanagement">
            <summary>
Action name = projectmanagement

Action class for project management.
</summary>
            <param name="TYPE">Type of task to be performed:
• READPROJECTINFO: Load project information from an XML file into the project.
• ToggleSections:If project sections are enabled, temporarily enables/disables whole project for the currently logged-in user. Note: The project must be open.
• PUBLISHTODISK: Publishes project to disk.
• PUBLISHTOEMAIL: Publishes project to e-mail.
• CREATESNAPSHOTCOPY:Creates snapshot copy of the project.
• EXPORTPROPERTYPLACEMENTSSCHEMAS:Exports property placements schemas.
• IMPORTPROPERTYPLACEMENTSSCHEMAS:Imports property placements schemas.
• REORGANIZE:Reorganizes project.
• CORRECTPROJECTITEMS:Corrects project items.
</param>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is call from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" />  must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" />  exception is thrown. </param>
            <param name="FILENAME">Full path / name of the XML file to be imported, or the filename to be send by e-mail, or full file path to be published to,
or full file path to target project when creating snapshot copy.</param>
            <param name="SCHEME">Name of the scheme. This parameter is only effective with the following values of the TYPE parameter:PUBLISHTODISK, PUBLISHTOEMAIL, CREATESNAPSHOTCOPY, CORRECTPROJECTITEMS.</param>
            <param name="OVERWRITE">If the imported property placement schema already exists, this parameter specifies whether it should be overwritten. 
Possible values: 
'0' - No (default), 
'1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:IMPORTPROPERTYPLACEMENTSSCHEMAS.</param>
            <param name="EXTENDEDMODE">Enables extended mode while reorganizing the project.
Possible values: 
'0' - No (default), 
'1' - Yes.
This parameter is only effective with the following values of the TYPE parameter:REORGANIZE.</param>
            <remarks>
The specified project may be open or closed. If the project is not open, it is opened when the process is started and closed after the export.
</remarks>
            <example>
                <code>
projectmanagement /TYPE:READPROJECTINFO /PROJECTNAME:"C:\Projects\EPLAN\ESS_Sample_Project.elk" /FILENAME:C:\Files\ProjectInfo.xml

projectmanagement /TYPE:ToggleSections /PROJECTNAME:"C:\Projects\EPLAN\ESS_Sample_Project.elk"

projectmanagement /TYPE:EXPORTPROPERTYPLACEMENTSSCHEMAS /PROJECTNAME:"C:\Projects\EPLAN\ESS_Sample_Project.elk" /FILENAME:C:\Files\PPSchemas.xml

projectmanagement /TYPE:IMPORTPROPERTYPLACEMENTSSCHEMAS /PROJECTNAME:"C:\Projects\EPLAN\ESS_Sample_Project.elk" /FILENAME:C:\Files\PPSchemas.xml /OVERWRITE:1

projectmanagement /TYPE:REORGANIZE /PROJECTNAME:"C:\Projects\EPLAN\ESS_Sample_Project.elk" /EXTENDEDMODE:1

projectmanagement /TYPE:CORRECTPROJECTITEMS /PROJECTNAME:"C:\Projects\EPLAN\ESS_Sample_Project.elk" /SCHEME:Default
</code>
            </example>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a
                                project management
                                operation.</exception>                                                                               
BEGIN_ACTION_DOC   
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.GenerateMacros">
BEGIN_ACTION_DOC
<summary>
Action name = generatemacros

Action for generating macros from project.
</summary><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from thewindows command line,PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><remarks>	
Project must have property "Type of project" set to "Macro project".			
</remarks><example>
Macros generation
<code>
generatemacros /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk
</code></example>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.ProjectSetting">
BEGIN_ACTION_DOC
<summary>
Action name = projectsettings

This action is deprecated.
Allows to set project settings.
</summary><remarks>internal</remarks><param name="PROJECTNAME">Project name with full path.
Optional.If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" />  exception is thrown. </param><param name="SETTING">Path of setting</param><param name="INDEX">Index of setting</param><param name="VALUE">Value of setting</param><example><code>
	projectsettings /SETTING:TRANSLATEGUI.TRANSLATE_LANGUAGES /INDEX:0 /VALUE:en_US;de_DE
	projectsettings /SETTING:EnfMVC.PDDs.DeviceHierarchy.ColEntries /INDEX:2 /VALUE:test
</code></example>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Reports">
BEGIN_ACTION_DOC
<summary>
Action name = reports

Action class to update all project evaluations.
</summary><param name="TYPE">Type of task to be performed by the action:<br />
PROJECT: Generate project reports.<br />
PAGES: Update all reports of the same type as given pages. Only the particular report, to which the page belongs, will be updated
UPDATEMODELVIEWPAGES: Update model views on given pages.<br />
CREATEMODELVIEWS: Create model views<br />
CREATECOPPERUNFOLDS: Create copper unfolds<br />
CREATEDRILLINGVIEWS: Create drilling views<br /></param><param name="PROJECTNAME">Project name with full path (optional).
If not	entered, the selected project is used, in case the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first.</param><param name="PAGENAME">Name of the page to be updated (optional).
If specified, only the particular report, to which the page belongs, will be updated.
This parameter is only effective with the PAGES and UPDATEMODELVIEWPAGES values of the TYPE parameter.</param><param name="USEPAGEFILTER">Determines if only filtered pages should be used or all project pages  (optional). 
It corresponds to "Active" check box in GUI. 
These parameters are only effective with the PAGES and UPDATEMODELVIEWPAGES values of the TYPE parameter.
Default value: 0 </param><param name="PAGEFILTERNAME">Pages are read from pagefilter with the name pagefiltername.
These  parameters are only effective with the PAGES and UPDATEMODELVIEWPAGES values of the TYPE parameter.</param><param name="PAGENAMEn">Names of the pages to be  included in reports update (optional), where n is a number e.g. /PAGENAME1:=AP+ST1/2 /PAGENAME2:=AP+ST1/4 /PAGENAME3:=AP+ST1/7 etc. 
These parameters are only effective with the PAGES and UPDATEMODELVIEWPAGES values of the TYPE parameter.</param><param name="SELn">Identifier of the pages to be included in report update  (optional), where n is a number (e.g. /SEL1:38/4/12/0 (result from StorableObject.ToStringIdentifier()))  parameters are only effective with the PAGES and UPDATEMODELVIEWPAGES values of the TYPE parameter.</param><param name="TEMPLATEn">Templates used for generating report pages, where n is a number e.g. /TEMPLATE1:"Template1" /TEMPLATE2:"Template2" etc. These parameters are only effective  with CREATEMODELVIEWS, CREATECOPPERUNFOLDS and CREATEDRILLINGVIEWS value of the TYPE parameter.</param><param name="REPLACEEXISTING">Replaces existing model views, copper unfolds or drilling views when set to 1.
This parameter is only effective with CREATEMODELVIEWS, CREATECOPPERUNFOLDS and CREATEDRILLINGVIEWS value of the TYPE parameter.</param><example><code>
reports /TYPE:PROJECT /PROJECTNAME:C\\Projects\EPLAN\ESS_Sample_Project.elk
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a reports operation.</exception>                                                                     						
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.Export3D">
BEGIN_ACTION_DOC
<summary>
Action name = export3d

Action to export installation spaces in STEP format.
</summary><param name="TYPE">Type of task to be performed by the action:
STEPINSTALLATIONSPACES: Export installation spaces to STEP format. </param><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI	(like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" />  exception is thrown. </param><param name="INSTALLATIONSPACENAME">Name of the InstallationSpace to be exported. This parameter is only effective
with the STEPINSTALLATIONSPACES value of the TYPE parameter.</param><param name="INSTALLATIONSPACENAMEn">Names of the InstallationSpaces to be exported (optional), where n is a number e.g. /INSTALLATIONSPACENAME1:BR1 /INSTALLATIONSPACENAME2:BR2 /INSTALLATIONSPACENAME:BR3 etc. 
These parameters are only effective with the STEPINSTALLATIONSPACES value of the TYPE parameter.</param><param name="STRUCTURE">Structure indetifier of the InstallationSpace to be exported (optional). 
This parameter is only effective with the STEPINSTALLATIONSPACES value of the TYPE parameter.</param><param name="STRUCTUREn">Structure indetifiers of the InstallationSpaces to be exported (optional), where n is a number e.g. /INSTALLATIONSPACENAME1:BR1 /STRUCTURE1:=EB3+ET1 /INSTALLATIONSPACENAME2:BR2 /STRUCTURE2:=EB3+ET2 etc. 
These parameters are only effective with the STEPINSTALLATIONSPACES value of the TYPE parameter.</param><param name="DESTINATIONPATH">Target directory. Relevance of this parameter.
For STEPINSTALLATIONSPACES: Directory where the step files are stored. If this directory does not exist yet, it is created.</param><param name="EXPORTSCHEME">Scheme for STEPINSTALLATIONSPACES export(optional). If this parameter does not exist or is empty (""), the most
recently used STEPINSTALLATIONSPACES export scheme is taken. This parameter is only effective with the STEPINSTALLATIONSPACES value of the
TYPE parameter.</param><param name="SEPARATEFILES">Relevance of this parameter.
For STEPINSTALLATIONSPACES: 
If 1 then each first level child will be exported in separate file. 
If 0 then names of files are generated from properties INSTALLATIONSPACE_FULLNAME. 
If true then property FUNC_FULLNAME is added at the end of file name.</param><remarks>
If passed INSTALLATIONSPACENAME is not unique in project and STRUCTURE parameter was not specified action will export all InstallationSpaces with the same INSTALLATIONSPACENAME.
</remarks><example>
Export a installation spaces BR1 and BR2 to STEP.
<code>
export3d /TYPE:STEPINSTALLATIONSPACES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /INSTALLATIONSPACENAME1:BR1 /INSTALLATIONSPACENAME2:BR2 /DESTINATIONPATH:C:\temp\step_export
</code>		
Export a installation spaces BR1 and BR2 to STEP with specified structure identifiers.
<code>
export3d /TYPE:STEPINSTALLATIONSPACES /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /INSTALLATIONSPACENAME1:BR1 /STRUCTURE1:=EB3+ET1 /INSTALLATIONSPACENAME2:BR2 /STRUCTURE2:=EB3+ET2 /DESTINATIONPATH:C:\temp\step_export
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException"> An error occurs during an export operation.</exception>                                                                                                                  
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.CreateTopologyFunctions">
BEGIN_ACTION_DOC
<summary>
Action name = CreateTopologyFunctions

Action class for CreateTopologyFunctions functions: CreateTopologyFunctions connections and CreateTopologyFunctions cables.
</summary><remarks>
This action is available only for users with license option: <c>Cabling</c>.
</remarks><param name="PROJECTNAME">Project name with full
                          path (optional).<para />If
                          not entered, the
                          selected project is used
                          when the action is
                          called from GUI (like
                          from a script or button
                          bar). If called from the
                          windows command line,
                          PROJECTNAME must be set
                          or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" />
                          must be used first,
                          otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" />
                          exception is thrown. </param><example>
Topology function generation
<code>
CreateTopologyFunctions /PROJECTNAME:C:\\Projects\\EPLAN\\ESS_Sample_Project.elk
</code></example>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.ExportSegmentsTemplate">
            <summary>
Action name = ExportSegmentsTemplate

Action to export segment templates to file.
</summary>
            <param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is called from GUI	(like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" />
must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param>
            <param name="FILENAME">Full file name of target file. Can't be <c>null</c> or <c>empty</c>.</param>
            <param name="DESCRIPTION">Description which is contained in exported file. Value should be in multilang string format.</param>
        </member>
        <member name="T:Eplan.EplApi.CommandLineActions.Compress">
BEGIN_ACTION_DOC
<summary>
Action name = compress

Action class to compress projects.
</summary><param name="PROJECTNAME">Project name with full path (optional).
If not entered, the selected project is used when the action is	called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" />exception is thrown.
</param><param name="CONFIGSCHEME">Configuration scheme for project compression (optional).
Default value: Recent configuration	scheme. The most recently used scheme is taken if an empty string is passed. </param><param name="FILTERSCHEME">Filter scheme for project compression (optional).
Default	value: Most recently used filter scheme. The most recently used	 scheme is taken if an empty string is passed.</param><param name="USEFILTER">Use the filterscheme in the FILTERSCHEME Parameter. Default value is true.</param><example>
Compress a project.
<code>
compress /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /CONFIGSCHEME:config_scheme /FILTERSCHEME:filter_scheme
</code>
Use the most recent configuration scheme: The 'CONFIGSCHEME' parameter is not entered.
<code>
compress /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /FILTERSCHEME:filter_scheme
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a compress operation.</exception>                                                                                 						
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.GraphicalLayerTable">
BEGIN_ACTION_DOC
<summary>
Action name = graphicallayertable

Action class for graphical layer table functions: import, export.
</summary><param name="TYPE">Type of task to be performed by the action:<br />
IMPORT:Import graphical layer table<br />
EXPORT:Export graphical layer table</param><param name="PROJECTNAME">Project name with full path(optional).
If not entered, the selected project is used when the action is called from GUI (like from a script or button bar). 
If called from the windows command line, PROJECTNAME must be set or the <see text="ProjectAction" cref="!:Eplan::EplApi::CommandLineActions::XEsProjectAction" /> must be used first, otherwise an <see text="System.ArgumentException" cref="T:System.ArgumentException" /> exception is thrown. </param><param name="IMPORTFILE">The directory and the file name of the table to be imported must be specified here.</param><param name="EXPORTFILE">The directory and the file name of the table to be exported must be specified here.</param><example>
import:
<code>
graphicallayertable /TYPE:IMPORT /PROJECTNAME:C:\Projects\EPLAN\ESS_Sample_Project.elk /IMPORTFILE:C:\EPLAN\ESS_Sample_Project.elc
</code>
export:
<code>
graphicallayertable /TYPE:EXPORT /PROJECTNAME:C:\Projekte\EPLAN\ESS_Sample_Project.elk /EXPORTFILE:C:\EPLAN\ESS_Sample_Project.elc
</code></example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a
                                graphical layer table operation.</exception>
END_ACTION_DOC
</member>
        <member name="T:Eplan.EplApi.CommandLineActions.SelectionSet">
BEGIN_ACTION_DOC
<summary>
Action name = selectionset

Action class for selection set functions: get current project, get selected projects, get selected pages.
</summary><remarks>
The results of the selection are returned in the CallingContext.<br />
Current project:

Parameter name in calling context = PROJECT;

Values from calling context = full project name with path and file extension (e.g. C:\MyProjects\ESS_Sample_Project.elk).


If projects are selected:

Parameter name in calling context = PROJECTS;

Values from calling context = full project names with path and file extension separated by ';' (e.g. C:\MyProjects\ESS_Sample_Project.elk;C:\Projects\EPLAN\ESS_Sample_Project2.elk).


If pages are selected:

Parameter name in calling context = PAGES;

Values from calling context = all page names separated by ';', e.g. 'Page1;Page2;Page3'
</remarks><param name="TYPE">Type of task to be performed:<br />
PROJECT: Return current project<br />
PROJECTS: Return selected projects<br />
PAGES: Return selected pages</param><example>
Return current project:
<code>
selectionset  /TYPE:PROJECT
</code>
Results in calling context: Parameter name = 'PROJECT'

Value = 'C:\Projects\EPLAN\ESS_Sample_Project.elk'

Return currently selected projects:
<code>
selectionset  /TYPE:PROJECTS
</code>
Results in calling context: Parameter name = 'PROJECTS'

Value = 'C:\Projects\EPLAN\ESS_Sample_Project.elk;C:\Projects\EPLAN\ESS_Sample_Project2.elk'

Return currently selected pages:
<code>
selectionset  /TYPE:PAGES
</code>
Results in calling context: Parameter name = 'PAGES'

Value = '=AP+ST1/1;=AP+ST1/2;=AP+ST1/5'

</example><exception cref="T:Eplan.EplApi.Base.BaseException">An error occurs during a selection set operation.</exception>
END_ACTION_DOC
</member>
    </members>
</doc>