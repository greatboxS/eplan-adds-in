<?xml version="1.0"?>
<doc>
    <assembly>
        "Eplan.EplApi.HEServices"
    </assembly>
    <members>
        <member name="M:Eplan.EplApi.HEServices.Reports.fillEvaluationBlockSchemeData(DMEvaluationBlockHandle*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary>
Gets Scheme data from properties as set them in DMEvaluationBlock.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateDrillingViews(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>Creates drilling views report</summary>
            <param name="oProject">Project</param>
            <param name="colTemplates">Collection of templates</param>
            <param name="bReplaceExisting">Replace existing drilling views when true</param>
            <example>
                <code lang="C#">
StringCollection oTemplates = new StringCollection();
oTemplates.Add("1");
new Reports().CreateDrillingViews(m_oProject, oTemplates, true);
</code>
            </example>
            <exception cref="T:System.ArgumentNullException">If any of parameters is null.</exception>
            <exception cref="T:System.ArgumentException">If any of parameters is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateCopperUnfolds(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>Creates copper unfolds report</summary>
            <param name="oProject">Project</param>
            <param name="colTemplates">Collection of templates</param>
            <param name="bReplaceExisting">Replace existing copper unfolds when true</param>
            <example>
                <code lang="C#">
StringCollection oTemplates = new StringCollection();
oTemplates.Add("1");
new Reports().CreateCopperUnfolds(m_oProject, oTemplates, true);
</code>
            </example>
            <exception cref="T:System.ArgumentNullException">If any of parameters is null.</exception>
            <exception cref="T:System.ArgumentException">If any of parameters is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateViewPlacements(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>Creates model views report</summary>
            <param name="oProject">Project</param>
            <param name="colTemplates">Collection of templates</param>
            <param name="bReplaceExisting">Replace existing model views when true</param>
            <example>
                <code lang="C#">
//prepare page macro file for a report template
System.IO.File.Copy(strMacrosDirectory + "\\ModelView.emp", new ProjectManager().Paths.Macros + "\\ModelView.emp", true);
//load report template
ProjectSettings oProjectSettings = new ProjectSettings(m_oProject);
oProjectSettings.ReadSettings(strXMLDirectory + "\\ModelView.xml");
StringCollection oTemplates = new StringCollection();
oTemplates.Add("1");
new Reports().CreateViewPlacements(m_oProject, oTemplates, true);
</code>
            </example>
            <exception cref="T:System.ArgumentNullException">If any of parameters is null.</exception>
            <exception cref="T:System.ArgumentException">If any of parameters is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateReportsFromTemplates(Eplan.EplApi.DataModel.Project,System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType})">
            <summary>Creates reports from templates of given document type.</summary>
            <param name="oProject">Project in which reports will be created.</param>
            <param name="colDocTypes">Collection report template types which from which reports will be generated.</param>
            <exception cref="T:System.ArgumentNullException">If any of parameters is null.</exception>
            <exception cref="T:System.ArgumentException">If any of parameters is invlaid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create reports. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating embedded report
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateReport(Eplan.EplApi.DataModel.ReportBlock,System.String)">
            <summary>
Creates report pages. Only one report for one device can exist in a project, therefore it's always overwritten, when creating. 
Different situation is while device list is an overview report. There can be many device list in a project(perhaps with different filters), therefore
it's never overwritten when creating a new one. To update an existing list of devices, use Reports.Update function.
</summary>
            <param name="oReportBlock">Report block which contains settings for generating reports.</param>
            <param name="strFirstPageName">Full name of the start page for each report block generated by this method.</param>
            <remarks>
                <para>Page with name passed in parameter <c>strFirstPageName</c> can exists in project but it has to be a report page
(can't have the member <see text="ReportBlock" cref="P:Eplan.EplApi.DataModel.Page.ReportBlock" /><c>empty</c>). Existing report
pages will be replaced with new reports.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If any of parameters is null.</exception>
            <exception cref="T:System.ArgumentException">If any of parameters is invlaid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create report pages. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating embedded report
                                Please refer
                                to the error
                                message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Thrown when invalid scheme name is set and scheme data is empty. 
Please refer to the error message for more information.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateEmbeddedReport(Eplan.EplApi.DataModel.ReportBlock,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Creates embedded report.
</summary>
            <remarks>Embedded report can be created only on interactive page.
<para>If <see text="SortSchemeName" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeName" />
is set and <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
is empty then <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
will be filled automatically. The same is with <see text="FilterScheme" cref="!:Eplan::EplApi::DataModel::ReportBlock::FilterSchemeName" />.</para></remarks>
            <param name="oReportBlock">Report block which describes the embedded report.</param>
            <param name="oPage">
                <c>Page</c> on which the embedded report will me placed.</param>
            <param name="oLocation">Location on the <c>Page</c> where the upper-left corner of the embedded report will be placed.</param>
            <param name="storableObjects">Objects, for which the report will be created.</param>
            <returns>Returns <c>ReportBlockReference</c> object related to created report, or null if report wasn't created.</returns>
            <exception cref="T:System.ArgumentNullException">Null was set to one of parameters.</exception>
            <exception cref="T:System.ArgumentException">If form which name and type are stored in <c>oReportBlock</c> has not been found in project. If name or type of form are incorrect.
If page isn't interactive or one of parameters is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create embedded report. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating embedded report
                                Please refer
                                to the error
                                message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Thrown when invalid scheme name is set and scheme data is empty. 
Please refer to the error message for more information.</exception>
            <seealso cref="M:Eplan.EplApi.DataModel.DocumentTypeManager.IsInteractivePage(Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType)" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateEmbeddedReport(Eplan.EplApi.DataModel.ReportBlock)">
            <summary>
Creates embedded report. This method starts an interaction so the report is attached to the mouse pointer.
</summary>
            <remarks>Embedded report can be created only on interactive page.
<p>Method can't be used if the application was start in quiet mode.</p><p>If <see text="SortSchemeName" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeName" />
is set and <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
is empty then <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
will be filled automatically. The same is with <see text="FilterScheme" cref="!:Eplan::EplApi::DataModel::ReportBlock::FilterSchemeName" />.</p></remarks>
            <example>Example shows how to create an embedded report:
<code lang="cs" source="P8_API_Example_HEServices_Embedded_Create_2.cs.txt" /></example>
            <param name="oReportBlock">Report block which describes the embedded report.</param>
            <returns>Returns <c>ReportBlockReference</c> object related to created report or null if report wasn't created.</returns>
            <exception cref="T:System.ArgumentNullException">If <c>oReportBlock</c> is null.</exception>
            <exception cref="T:System.ArgumentException">If form which name and type are stored in <c>oReportBlock</c> has not been found in project. 
If name or type of the form are incorrect.</exception>
            <exception cref="T:System.ApplicationException">Failed to create embedded report. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating embedded report
                                Please refer
                                to the error
                                message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Thrown when invalid scheme name is set and scheme data is empty. 
Please refer to the error message for more information.</exception>
            <seealso cref="M:Eplan.EplApi.DataModel.DocumentTypeManager.IsInteractivePage(Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType)" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateEmbeddedReport(Eplan.EplApi.DataModel.ReportBlock,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,System.Boolean)">
            <summary>
Creates embedded report.
</summary>
            <remarks>Embedded report can be created only on interactive page.
<para>If <see text="SortSchemeName" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeName" />
is set and <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
is empty then <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
will be filled automatically. The same is with <see text="FilterScheme" cref="!:Eplan::EplApi::DataModel::ReportBlock::FilterSchemeName" />.</para></remarks>
            <example>Example shows how to create an embedded report on page:
<code lang="cs" source="P8_API_Example_HEServices_Embedded_Create_1.cs.txt" /></example>
            <param name="oReportBlock">Report block which describes the embedded report.</param>
            <param name="oPage">
                <c>Page</c> on which the embedded report will me placed.</param>
            <param name="oLocation">Location on the <c>Page</c> where the upper-left corner of the embedded report will be placed.</param>
            <param name="bEvaluateCurrentPage">Only data from oPage will be evaluated in the report.</param>
            <returns>Returns <c>ReportBlockReference</c> object related to created report, or null if report wasn't created.</returns>
            <exception cref="T:System.ArgumentNullException">Null was set to one of parameters.</exception>
            <exception cref="T:System.ArgumentException">If form which name and type are stored in <c>oReportBlock</c> has not been found in project. If name or type of form are incorrect.
If page isn't interactive or one of parameters is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create embedded report. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating embedded report
                                Please refer
                                to the error
                                message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Thrown when invalid scheme name is set and scheme data is empty. 
Please refer to the error message for more information.</exception>
            <seealso cref="M:Eplan.EplApi.DataModel.DocumentTypeManager.IsInteractivePage(Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType)" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.CreateEmbeddedReport(Eplan.EplApi.DataModel.ReportBlock,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD)">
            <summary>
Creates embedded report.
</summary>
            <remarks>Embedded report can be created only on interactive page.
<para>If <see text="SortSchemeName" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeName" />
is set and <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
is empty then <see text="SortSchemeData" cref="!:Eplan::EplApi::DataModel::ReportBlock::SortSchemeData" />
will be filled automatically. The same is with <see text="FilterScheme" cref="!:Eplan::EplApi::DataModel::ReportBlock::FilterSchemeName" />.</para></remarks>
            <example>Example shows how to create an embedded report on page:
<code lang="cs" source="P8_API_Example_HEServices_Embedded_Create_1.cs.txt" /></example>
            <param name="oReportBlock">Report block which describes the embedded report.</param>
            <param name="oPage">
                <c>Page</c> on which the embedded report will me placed.</param>
            <param name="oLocation">Location on the <c>Page</c> where the upper-left corner of the embedded report will be placed.</param>
            <returns>Returns <c>ReportBlockReference</c> object related to created report, or null if report wasn't created.</returns>
            <exception cref="T:System.ArgumentNullException">Null was set to one of parameters.</exception>
            <exception cref="T:System.ArgumentException">If form which name and type are stored in <c>oReportBlock</c> has not been found in project. If name or type of form are incorrect.
If page isn't interactive or one of parameters is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to create embedded report. Please refer to the error message.</exception>
            <exception cref="!:BaseException">An internal error occurred
                                during creating embedded report
                                Please refer
                                to the error
                                message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Thrown when invalid scheme name is set and scheme data is empty. 
Please refer to the error message for more information.</exception>
            <seealso cref="M:Eplan.EplApi.DataModel.DocumentTypeManager.IsInteractivePage(Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType)" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.GenerateProject(System.String)">
            <summary>
Generate project reports.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project for which reports will be generated.
</param>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.GenerateProject(Eplan.EplApi.DataModel.Project)">
            <summary>
Generate project reports.
</summary>
            <param name="oProject">Project for which reports will be generated.
</param>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.Update(Eplan.EplApi.DataModel.ReportBlockReference)">
            <summary>
Updates dynamic formular or embedded report 
represented by <see text="ReportBlockReference" cref="T:Eplan.EplApi.DataModel.ReportBlockReference" />.
</summary>
            <param name="oReportBlockRef">Report to be updated. </param>
            <remarks />
            <exception cref="!:BaseException">An internal error occurred
                                during creating embedded report
                                Please refer
                                to the error
                                message.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>oReportBlockRef</c> is null, not placed or is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.Update(Eplan.EplApi.DataModel.Page)">
            <summary>
Updates report pages or all embedded reports on a page.
</summary>
            <param name="oPage">Report page or a page with embedded
                    report(s) to be updated. </param>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Reports.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Reports">
            <summary>
Class providing functionality for generating reports. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.RenameDevice(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.FunctionBasePropertyList,Eplan.EplApi.DataModel.FunctionBasePropertyList,System.Boolean,System.Boolean)">
            <summary>
Rename all functions of device.
</summary>
            <param name="pProject">Project for which functions of device will be renamed.</param>
            <param name="pOldName">List of name properties of device that functions will be renamed. 
Device without DT cannot be renamed so this list cannot be empty. 
Device must exist otherwise method throws exception.</param>
            <param name="pNewName">List of name properties that will be set to functions of device, can be empty.</param>
            <param name="bRenameCDPsAlso">If <c>true</c> then connection of this device (example: wires of cable) also will be renamed.</param>
            <param name="bKeepDescribingProps">IF <c>true</c> then describing properties of functions will not be changed.</param>
            <exception cref="T:System.ArgumentException">Thrown when cannot find device from pOldName or trying to rename device without DT.</exception>
            <exception cref="T:System.ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.RenameDevice(Eplan.EplApi.DataModel.Function,Eplan.EplApi.DataModel.FunctionBasePropertyList,System.Boolean,System.Boolean)">
            <summary>
Rename all functions of device.
</summary>
            <param name="pFunction">Function from device which name will be changed.</param>
            <param name="pNewName">Name that will be set to functions of device.</param>
            <param name="bRenameCDPsAlso">If <c>true</c> then connection of this device (example: wires of cable) also will be renamed.</param>
            <param name="bKeepDescribingProps">IF <c>true</c> then describing properties of functions will not be changed.</param>
            <exception cref="T:System.ArgumentException">Invalid parameters were found.</exception>
            <exception cref="T:System.ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.SetName(Eplan.EplApi.DataModel.Function)">
            <summary>
Sets a default device tag to the function.
(I.e. a device tag which is automatically assigned when manually inserting a symbol on a page)
</summary>
            <returns />
            <remarks>
The function must have its function definition configured (since the code letter is provided by this).
</remarks>
            <param name="func">A function whose name is to be set.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.CanDeviceTagBeNested(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.Function)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="pFunction">Function for check.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.CanDeviceTagBeNested(Eplan.EplApi.DataModel.Function)">
            <summary />
            <param name="pFunction">Function for check.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EnableAdjustmentOfDeviceTagSeparator(Eplan.EplApi.DataModel.Page,System.Boolean)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="bAdjustDevTagSeparator">Parameter controls if the device tag separator is adjusted according to the setting or is kept as it is.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EnableAdjustmentOfDeviceTagSeparator(System.Boolean)">
            <summary />
            <param name="bAdjustDevTagSeparator">Parameter controls if the device tag separator is adjusted according to the setting or is kept as it is.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EnableRemovalOfUnnecessaryDeviceTagNameParts(Eplan.EplApi.DataModel.Page,System.Boolean)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="bForceRemoval">Parameter controls if can get complete device tag from a Function placed left from it in the schematic page.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EnableRemovalOfUnnecessaryDeviceTagNameParts(System.Boolean)">
            <summary />
            <param name="bForceRemoval">Parameter controls if can get complete device tag from a Function placed left from it in the schematic page.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EnableRemovalOfUnnecessaryProjectStructures(Eplan.EplApi.DataModel.Page,System.Boolean)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="bForceRemoval">Parameter controls if can get complete device tag from a Function placed left from it in the schematic page.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EnableRemovalOfUnnecessaryProjectStructures(System.Boolean)">
            <summary />
            <param name="bForceRemoval">Parameter controls if can get complete device tag from a Function placed left from it in the schematic page.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.UpdateConnectionDefinitionPointsParent(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.ConnectionDefinitionPoint)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="pCDP">Connection definition point for updates the graphical parent.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.UpdateConnectionDefinitionPointsParent(Eplan.EplApi.DataModel.ConnectionDefinitionPoint)">
            <summary />
            <param name="pCDP">Connection definition point for updates the graphical parent.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.FindNameGivingObject(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.Function)">
            <summary>
Finds an object, that would give the f function its name, if f
has no its instance name parts assigned (has no visible device tag).
Returns NULL, if no such object exists or f don't take over a name.
</summary>
            <remarks>Similar to the FindNameGivingFunction method
but returns objects like e.g. LocationBox too.
</remarks>
            <param name="page">A page to search the result object on.</param>
            <param name="f">Function, which takes over a name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.FindNameGivingObject(Eplan.EplApi.DataModel.Function)">
            <summary>
Finds an object, that would give the f function its name, when f
has no its instance name parts assigned (has no visible device tag).
Returns NULL, if no such object exists or f don't take over a name.
</summary>
            <remarks>Similar to the FindNameGivingFunction method
but returns objects like e.g. LocationBox too.
</remarks>
            <param name="f">Function, which takes over a name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page was not set before.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.FindNameGivingFunction(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.Function)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="pActual">Function, which give name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.FindNameGivingFunction(Eplan.EplApi.DataModel.Function)">
            <summary />
            <param name="pActual">Function, which give name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.GetSortedListOfLogicals(Eplan.EplApi.DataModel.Page)">
            <summary />
            <param name="pPage">Page to set.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.GetSortedListOfLogicals">
            <summary />
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.CorrectDeviceTagProperties(Eplan.EplApi.DataModel.UniversalPropertyList)">
            <summary />
            <param name="nameParts">PropertyList for correction.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EvaluateAndSetAllNamesTXN(Eplan.EplApi.DataModel.Project,System.Boolean,System.Boolean)">
            <summary>
Evaluate all names for all FunctionBase objects in the project by calling
EvaluateName for all those objects. This methods does own transactions,
so no transactions around the method are allowed.
</summary>
            <param name="pProject">Project for which names are evaluated.</param>
            <param name="bReEvaluateVisibleName">Whether evaluate visible name.</param>
            <param name="bReParseVisibleName">Whether parse visible name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EvaluateAndSetAllVisibleNames(Eplan.EplApi.DataModel.Page)">
            <summary />
            <param name="pPage">Page to set.</param>
            <returns />
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EvaluateAndSetAllVisibleNames">
            <summary />
            <returns />
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EvaluateAndSetAllNames(Eplan.EplApi.DataModel.Page)">
            <summary />
            <param name="pPage">Page to set.</param>
            <returns />
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EvaluateAndSetAllNames">
            <summary />
            <returns />
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.SetFullNameAndAdjustVisibleName(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.FunctionBase,Eplan.EplApi.DataModel.UniversalPropertyList)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="pFunctionBase">Function for which the name is set.</param>
            <param name="eplFullName">PropertyList with new full name.</param>
            <returns />
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.SetFullNameAndAdjustVisibleName(Eplan.EplApi.DataModel.FunctionBase,Eplan.EplApi.DataModel.UniversalPropertyList)">
            <summary />
            <returns />
            <param name="pFunctionBase">Function for which the name is set.</param>
            <param name="eplFullName">PropertyList with new full name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.AdjustVisibleName(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.FunctionBase)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="pFunctionBase">Function for which the name is evaluated.</param>
            <returns />
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.AdjustVisibleName(Eplan.EplApi.DataModel.FunctionBase)">
            <summary />
            <returns />
            <param name="pFunctionBase">Function for which the name is evaluated.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.SetVisibleNameAndAdjustFullName(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.FunctionBase,Eplan.EplApi.DataModel.UniversalPropertyList,System.String)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="pFunctionBase">Function for which the name is set.</param>
            <param name="eplVisibleName">PropertyList for evaluated name.</param>
            <param name="sVisibleNameFormat">New visible name.</param>
            <returns />
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.SetVisibleNameAndAdjustFullName(Eplan.EplApi.DataModel.FunctionBase,Eplan.EplApi.DataModel.UniversalPropertyList,System.String)">
            <summary />
            <returns />
            <param name="pFunctionBase">Function for which the name is set.</param>
            <param name="eplVisibleName">PropertyList for evaluated name.</param>
            <param name="sVisibleNameFormat">New visible name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.AdjustFullName(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.FunctionBase)">
            <summary />
            <returns />
            <param name="pPage">Page to set.</param>
            <param name="pFunctionBase">Function for which is evaluated name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.AdjustFullName(Eplan.EplApi.DataModel.FunctionBase)">
            <summary />
            <returns />
            <param name="pFunctionBase">Function for which is evaluated name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EvaluateName(Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.FunctionBase)">
            <summary />
            <param name="pPage">Page to set.</param>
            <param name="pFunctionBase">Function for which is evaluated name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.EvaluateName(Eplan.EplApi.DataModel.FunctionBase)">
            <summary />
            <param name="pFunctionBase">Function for which is evaluated name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.NameService.Page">
            <summary>
Gets/Sets the page. Page must be set, because most of the NameService class's methods work on page only
(except for e.g. CorrectDeviceTagProperties, EvaluateAndSetAllNamesTXN methods).
</summary>
            <param name="oPage">Page to set.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">When page is not set.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.#ctor(Eplan.EplApi.DataModel.Page)">
            <summary>
Constructor. Creates a NameService and call <c>set_Page</c> method.
</summary>
            <param name="oPage">Page to set.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.NameService">
            <summary>
Class for managing the Function names (device tags) on the
specified Page
</summary>
            <remarks>
When using EPLAN interactively, the system keeps track, that
the structure identifiers of a Function on a Page are
adjusted according to the page and according to location
boxes or black boxes in which the Function is located. In
API, the methods of the NameService class help you to do
this. Please read 'Adoption of Device Tags' chapter of P8 help 
in order to get further information about these rules.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ImportDescriptions(Eplan.EplApi.DataModel.Project)">
            <summary>
Imports descriptions from pre-planning to project.
</summary>
            <param name="pProject">Project to which pre-planning descriptions are imported. Can't be <c>null</c>.</param>
            <returns>
Returns <c>true</c> if import is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.NumberPCTLoops(System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.Planning.PlanningSegment})">
            <summary>
Numbers given PCTLoops. It is possible to number all PCTLoops in a given StructureSegment. Please look at the examples.
</summary>
            <param name="colObjects">Collection of objects to numerate. Can't be <c>null</c> or empty. 
Objects other then PCTLoop or StructureSegment are ignored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>colObjects</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when collection <c>colObject</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">If an Error occurred while numbering PCTLoops.</exception>
            <example>The following examples shows how to use method NumberPCTLoops.
	<code lang="cs" source="P8_API_Example_HEServices_PrePlanningService_NumberPCTLoops_Example1.cs.txt" /></example>
            <example>
                <code lang="cs" source="P8_API_Example_HEServices_PrePlanningService_NumberPCTLoops_Example2.cs.txt" />
            </example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.NumberPCTLoops(Eplan.EplApi.DataModel.Project)">
            <summary>
Numbers all PCTLoops in a Project
</summary>
            <param name="pProject">Project in which PCTLoops will be numbered. Can't be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">If an Error occurred while numbering PCTLoops.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ImportPropertyDefinitions(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Imports user defined properties from file to project.
</summary>
            <param name="pProject">Project to which user defined properties are imported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of source file. Can't be <c>null</c> or <c>empty</c>.</param>
            <returns>
Returns <c>true</c> if import is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ExportPropertyDefinitions(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Exports all user defined properties from project to file. Properties identified as "Do not use anymore" will not be exported.
</summary>
            <param name="pProject">Project from which all user defined properties are exported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of target file. Can't be <c>null</c> or <c>empty</c>.</param>
            <returns>
Returns <c>true</c> if export is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ReorganizeStructure(Eplan.EplApi.DataModel.Project)">
            <summary>
Reorganizes structure of planning objects in given project.
</summary>
            <remarks>
This method reorganizes structure (looks for planning objects with bit-flag "HAS_CHANGES4SUBOBJECTS") of planning objects
in given project. It also updates article references of children and re-numerates functions according to changed project structures.
</remarks>
            <param name="pProject">Project which planning structure will be reorganizated. Can't be <c>null</c>.</param>
            <returns>
Returns <c>false</c>, if locking of required objects was not possible.
</returns>
            <exception cref="T:System.ArgumentNullException">Null was set to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.UpdateDetailPlanning(Eplan.EplApi.DataModel.Project)">
            <summary>
Updates data to ensure that the property values in all planning objects from project are the same as in assigned functions.
</summary>
            <param name="pProject">Project which planning segments will be used. Can't be <c>null</c>.</param>
            <remarks>
If a placeholder is use in macro to transfer properties from planning object to the functions of the macro, the values from planning object are copied while placing the macro.
If the planning object is changed afterwards, the values at the functions stay the same and are different now.
This method copies this properties again, so that the property values in planning object are the same as in assigned functions.
</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.UpdateDetailPlanning(Eplan.EplApi.DataModel.Planning.PlanningSegment)">
            <summary>
Updates data to ensure that the property values in planning object are the same as in assigned functions.
</summary>
            <param name="pPlanningSegment">Planning segment will be used. Can't be <c>null</c>.</param>
            <remarks>
If a placeholder is use in macro to transfer properties from planning object to the functions of the macro, the values from planning object are copied while placing the macro.
If the planning object is changed afterwards, the values at the functions stay the same and are different now.
This method copies this properties again, so that the property values in planning object are the same as in assigned functions.
</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pPlanningSegment</c> is a <c>null</c> value.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ImportSegmentTemplates(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Imports segment templates from file to project.
</summary>
            <param name="pProject">Project to which segment template are imported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of source file. Can't be <c>null</c> or <c>empty</c>.</param>
            <returns>
Returns <c>true</c> if import is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ExportSegmentTemplates(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.Base.MultiLangString)">
            <summary>
Exports all segment templates from project to file.
</summary>
            <param name="pProject">Project from which all segment template are exported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of target file. Can't be <c>null</c> or <c>empty</c>.</param>
            <param name="mlsDescription">Description which is contained in exported file.</param>
            <returns>
Returns <c>true</c> if export is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ExportSegmentTemplates(Eplan.EplApi.DataModel.Planning.SegmentTemplate[],System.String,Eplan.EplApi.Base.MultiLangString)">
            <summary>
Exports segment templates to file.
</summary>
            <param name="arrTemplates">Array of segment template to export. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of target file. Can't be <c>null</c> or <c>empty</c>.</param>
            <param name="mlsDescription">Description which is contained in exported file.</param>
            <returns>
Returns <c>true</c> if export is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>arrTemplates</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ImportSegmentDefinitions(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Imports segment definitions from file to project.
</summary>
            <param name="pProject">Project to which segment definitions are exported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of source file. Can't be <c>null</c> or <c>empty</c>.</param>
            <returns>
Returns <c>true</c> if import is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ExportSegmentDefinitions(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Exports all segment definitions from project to file.
</summary>
            <param name="pProject">Project from which all segment definitions are exported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of target file. Can't be <c>null</c> or <c>empty</c>.</param>
            <returns>
Returns <c>true</c> if export is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <c>pProject</c> is a <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ImportData(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean,Eplan.EplApi.DataModel.Planning.PlanningSegment,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Imports lists with pre-planning data that were created in external applications.
</summary>
            <param name="pProject">Project to which file will be imported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of source file. Can't be <c>null</c> or <c>empty</c>.</param>
            <param name="strScheme">Name of the scheme that defines the assignment of the external data fields to the EPLAN properties. Can't be <c>null</c> or <c>empty</c>.</param>
            <param name="strAdditionalParameter">Additional parameter used by import routine.</param>
            <param name="bSkipHeader">If <c>true</c> then column names from the data table are output in the <c>External field</c>
Used only for import from excel file.</param>
            <param name="pSegmentPlanning">Object below which the imported data are to be inserted. If <c>null</c> then data are inserted under project.</param>
            <param name="bIgnoreErrors">If <c>true</c> the import will not be aborted because of errors and messages that occur.</param>
            <param name="bOverwrite">If <c>true</c> then existing planning objects will be overwritten with the data from the planning objects of the same name from the import file.
If <c>false</c> then existing planning objects remain unchanged.
</param>
            <param name="bUpdateOnly">If <c>true</c> then only data of existing structure segments and planning objects will be updated.</param>
            <param name="bDeleteMissing">If <c>true</c> that during import of preplanning data planning objects which are no longer in the import 
file are deleted from the structure if they belong to the same tree, which is imported.</param>
            <param name="bShowComparisonDialog">If <c>true</c> shows comparison dialog. Other dialogs like error messages will be also shown.</param>
            <remarks>
Import can be done from excel or text file. If import is done from excel file then additional parameter is interpreted as name of
table or data area contained in the data source. In case when import is done from text file then additional parameter is treated 
to determine the separator that is used in the text file in order to separate the columns.
</remarks>
            <returns>
Returns <c>true</c> if import is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Null was set to <c>pProject</c> parameter.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> or <c>strScheme</c>of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.ImportData(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean,Eplan.EplApi.DataModel.Planning.PlanningSegment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Imports lists with pre-planning data that were created in external applications.
</summary>
            <param name="pProject">Project to which file will be imported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of source file. Can't be <c>null</c> or <c>empty</c>.</param>
            <param name="strScheme">Name of the scheme that defines the assignment of the external data fields to the EPLAN properties. Can't be <c>null</c> or <c>empty</c>.</param>
            <param name="strAdditionalParameter">Additional parameter used by import routine.</param>
            <param name="bSkipHeader">If <c>true</c> then column names from the data table are output in the <c>External field</c>
Used only for import from excel file.</param>
            <param name="pSegmentPlanning">Object below which the imported data are to be inserted. If <c>null</c> then data are inserted under project.</param>
            <param name="bIgnoreErrors">If <c>true</c> the import will not be aborted because of errors and messages that occur.</param>
            <param name="bOverwrite">If <c>true</c> then existing planning objects will be overwritten with the data from the planning objects of the same name from the import file.
If <c>false</c> then existing planning objects remain unchanged.
</param>
            <param name="bUpdateOnly">If <c>true</c> then only data of existing structure segments and planning objects will be updated.</param>
            <remarks>
Import can be done from excel or text file. If import is done from excel file then additional parameter is interpreted as name of
table or data area contained in the data source. In case when import is done from text file then additional parameter is treated 
to determine the separator that is used in the text file in order to separate the columns.
</remarks>
            <returns>
Returns <c>true</c> if import is successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Null was set to <c>pProject</c> parameter.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> or <c>strScheme</c>of <c>null</c> or <c>empty</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.Finalize">
            <summary>
Non-deterministic Finalizer of PrePlanningService object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.Dispose">
            <summary>
Destructor for deterministic finalization of PrePlanningService object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PrePlanningService.#ctor">
            <summary> 
Default constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PrePlanningService">
            <summary> 
Class providing functionality for handling pre-planning data. 
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Insert.PlanningSegment">
            <summary>
Determines the planning segment to which all function inserted from window macro on page will be assign.
</summary>
            <example>
                <code lang="cs" source="P8_API_Example_HeServices_Insert_PlanningSegment_Example1.cs.txt" />
            </example>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Insert.ArePlanningObjectsStructureMerged">
            <summary>
Indicates whether planning objects structure will be merged with existing nodes or renumbered and added.
</summary>
            <remarks>
This flag is used in situation when structure of pre-planning objects imported from macro, contains nodes which already exists in project.
If <c>ArePlanningObjectsStructureMerged</c> is <c>true</c> then all children of duplicated node are added to coresponding nore from project. If value
is <c>false</c> then new name is assigned to such node and it is added to project with all its children.
</remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Insert.ArePCTLoopsRenumbered">
            <summary>
If true, renumbers PCT loop if name already exists.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Insert.ArePlanningObjectsInserted">
            <summary>
Indicates whether additional planning objects are inserted from macro into project.
</summary>
            <remarks>
                <para>
If macro contains pre-planning object structure this flag determine if it is imported or not.
Structure from macro is inserted under root node of project and only if its segment definition allows such parent.
</para>
                <para>
This flag has influence only on functions importing window macros.
</para>
            </remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.PageMacro(Eplan.EplApi.DataModel.MasterData.PageMacro,Eplan.EplApi.DataModel.Project,System.Boolean[],Eplan.EplApi.DataModel.MasterData.PageMacro.Enums.NumerationMode)">
            <summary>
Inserts a page macro into project. User can specify which pages can be overwritten over existing pages in project.
</summary>
            <remarks>
User can determine a name for each page under which it will be inserted. This is done by setting new name to page from 
<see text="PageMacro::Pages" cref="P:Eplan.EplApi.DataModel.MasterData.PageMacro.Pages" />. See example.
</remarks>
            <param name="oMacro">Page macro with will be inserted into project. Can not be null.</param>
            <param name="oProject">Project into with page macro will be inserted. Can not be null.</param>
            <param name="arrOverwritePages">Defines whether an existing page is to be overwritten when a page macro is being inserted.
Order of elements corresponds with order of elements in <see text="PageMacro::Pages" cref="P:Eplan.EplApi.DataModel.MasterData.PageMacro.Pages" />.
If null is passed all pages will not be overwritten.</param>
            <param name="nNumerationMode">Numeration mode.</param>
            <returns> Inserted pages and functions which were not placed (with null .Page property)</returns>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">The internal interface can not be append. Operation failed.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.PageMacro(System.String,Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.Project,System.Boolean,Eplan.EplApi.DataModel.MasterData.PageMacro.Enums.NumerationMode)">
            <summary>
Inserts a page macro into a project. You need to set the
page, after which the new pages are inserted. You can either
overwrite already existing pages having the same name,
or the macro pages will be appended after the
highest existing number of the location.
</summary>
            <param name="strEMPFileName">Full file name of the PageMacro to be
                     inserted.</param>
            <param name="oInsertAfterPage">Page after which the macro
                               will be inserted.</param>
            <param name="oProject">Project into which the macro
                       will be inserted.</param>
            <param name="overwrite">Pages with the same
                        designation will be
                        overwritten..</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted pages and functions which were not placed (with null .Page property)</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.PageMacro(System.String,Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.Project,System.Boolean)">
            <summary>
Inserts a page macro into a project. You need to set the
page, after which the new pages are inserted. You can either
overwrite already existing pages having the same name,
or the macro pages will be appended after the
highest existing number of the location.
</summary>
            <param name="strEMPFileName">Full file name of the PageMacro to be
                     inserted.</param>
            <param name="oInsertAfterPage">Page after which the macro
                               will be inserted.</param>
            <param name="oProject">Project into which the macro
                       will be inserted.</param>
            <param name="overwrite">Pages with the same
                        designation will be
                        overwritten..</param>
            <returns> Inserted pages and functions which were not placed (with null .Page property)</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.PageMacro(Eplan.EplApi.DataModel.MasterData.PageMacro,Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.Project,System.Boolean,Eplan.EplApi.DataModel.MasterData.PageMacro.Enums.NumerationMode)">
            <summary>
Inserts a page macro into a project. You need to set the
page, after which the new pages are inserted. You can either
overwrite already existing pages having the same name,
or the macro pages will be appended after the
highest existing number of the location.
</summary>
            <param name="oMacro">PageMacro object to be
                     inserted.</param>
            <param name="oInsertAfterPage">Page after which the macro
                               will be inserted. Some structure identifiers
							   will be taken from the Parent Node of this page.
							   If you transfer NULL for oInsertAfterPage,
							   then the structure identifiers will
                                be taken from the macro.
</param>
            <param name="oProject">Project into which the macro
                       will be inserted.</param>
            <param name="overwrite">Pages with the same
                        designation will be
                        overwritten..</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted pages and functions which were not placed (with null .Page property)</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.PageMacro(Eplan.EplApi.DataModel.MasterData.PageMacro,Eplan.EplApi.DataModel.Page,Eplan.EplApi.DataModel.Project,System.Boolean)">
            <summary>
Inserts a page macro into a project. You need to set the
page, after which the new pages are inserted. You can either
overwrite already existing pages having the same name,
or the macro pages will be appended after the
highest existing number of the location.
</summary>
            <param name="oMacro">PageMacro object to be
                     inserted.</param>
            <param name="oInsertAfterPage">Page after which the macro
                               will be inserted. Some structure identifiers
							   will be taken from the Parent Node of this page.
							   If you transfer NULL for oInsertAfterPage,
							   then the structure identifiers will
                               be taken from the macro.
</param>
            <param name="oProject">Project into which the macro
                       will be inserted.</param>
            <param name="overwrite">Pages with the same
                        designation will be
                        overwritten.</param>
            <returns> Inserted pages and functions which were not placed (with null .Page property)</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.SymbolMacro(Eplan.EplApi.DataModel.MasterData.SymbolMacro,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places a symbol macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="oMacro">SymbolMacro object to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.SymbolMacro(Eplan.EplApi.DataModel.MasterData.SymbolMacro,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places a symbol macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="oMacro">SymbolMacro object to be placed.</param>
            <param name="nRepType">Representation Type of Macro. If Value is Default, then
						the Representation Type will be taken from oPage  </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.SymbolMacro(Eplan.EplApi.DataModel.MasterData.SymbolMacro,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind)">
            <summary>
Places a symbol macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="oMacro">SymbolMacro object to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.SymbolMacro(System.String,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places a symbol macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="strEMSFileName"> Full file name of the SymbolMacro file (.ems) to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.SymbolMacro(System.String,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places a symbol macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="strEMSFileName"> Full file name of the SymbolMacro file (.ems) to be placed.</param>
            <param name="nRepType">Representation Type of Macro. If Value is Default, then
						the Representation Type will be taken from oPage  </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.SymbolMacro(System.String,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind)">
            <summary>
Places a symbol macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="strEMSFileName"> Full file name of the SymbolMacro file (.ems) to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.PrePlanningMacro(System.String,Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Planning.PlanningSegment)">
            <summary>
Inserts the pre-planning macros below the given structure segment. 
</summary>
            <param name="strMacroPath">Full file name of the pre-planning macro file (.emv) to be placed. Can't be <c>null</c> or <c>empty</c></param>
            <param name="pProject">Project into which macro will be inserted. Can't be <c>null</c>.</param>
            <param name="pParent">Planning segment under which macro will be inserted.</param>
            <remarks>
If parent of macro is <c>null</c> then macro is inserted under project in pre-planning stucture.
</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid parameter.</exception>
            <exception cref="T:System.ArgumentNullException">Null was set to a needed parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(Eplan.EplApi.DataModel.MasterData.WindowMacro,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode,System.Boolean)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="oMacro">WindowMacro object to be placed.</param>
            <param name="nRepType">RepresentationType of Macro
                                        </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position</param>
            <param name="nNumerationMode">Numeration mode</param>
            <param name="bDontResolveGroups">Determines if groups will be resolved
                                 Default value : false</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(Eplan.EplApi.DataModel.MasterData.WindowMacro,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="oMacro">WindowMacro object to be placed.</param>
            <param name="nRepType">RepresentationType of Macro
                                        </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(Eplan.EplApi.DataModel.MasterData.WindowMacro,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="oMacro">WindowMacro object to be placed.</param>
            <param name="nRepType">RepresentationType of Macro
                                        </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(Eplan.EplApi.DataModel.MasterData.WindowMacro,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
Representation type is taken from given page.
</summary>
            <param name="oMacro">WindowMacro object to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(System.String,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode,System.Boolean)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="strEMAFileName">Full file name of the WindowMacro file (.ema) to be placed.</param>
            <param name="nRepType">Representation Type of Macro. If Value is Default, then
						the Representation Type will be taken from oPage  </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position</param>
            <param name="nNumerationMode">numeration mode</param>
            <param name="bDontResolveGroups">Determines if groups will be resolved
                                 Default value : false</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
            <internal>
thi todo
</internal>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(System.String,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="strEMAFileName">Full file name of the WindowMacro file (.ema) to be placed.</param>
            <param name="nRepType">Representation Type of Macro. If Value is Default, then
						the Representation Type will be taken from oPage  </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
            <internal>
thi todo
</internal>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(System.String,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
</summary>
            <param name="strEMAFileName">Full file name of the WindowMacro file (.ema) to be placed.</param>
            <param name="nRepType">Representation Type of Macro. If Value is Default, then
						the Representation Type will be taken from oPage  </param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
            <internal>
thi todo
</internal>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.WindowMacro(System.String,System.Int32,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.Insert.MoveKind)">
            <summary>
Places a window macro onto a given position of a page. You
can set whether absolute coordinates or coordinates relative
to its original position on the page should be used.
Representation type is taken from given page.
</summary>
            <param name="strEMAFileName">Full file name of the WindowMacro file (.ema) to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oPage">Page on which to place the
                    macro.</param>
            <param name="oPlacement">Position on which to place he
                         macro.</param>
            <param name="moveCondition">Should the will the macro be
                            placed with absolute coordinates
                            or relatively to its original
                            position?</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Insert.MoveKind.Relative">
            <summary>Place macro using coordinates relative to its original position.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Insert.MoveKind.Absolute">
            <summary>Place macro using absolute coordinates.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Insert.MoveKind">
            <summary>
Enumeration, which determines whether a macro will be placed
using absolute coordinates or coordinates relative to its
original position on the page. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Insert">
            <summary>
Class for inserting different kinds of external data. The
class Insert contains all methods for placing window macros
or inserting window macros.
</summary>
            <example>The following example shows how to use insert a window macro using Insert class
<code lang="cs" source="P8_API_Example_HeServices_Insert_Example1.cs.txt" /></example>
            <example>
Following example shows how to insert page macro with overwriting some pages
<code lang="cs" source="P8_API_Example_HEServices_Insert_PageMacro_1.cs.txt" /></example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.DoLabel(Eplan.EplApi.DataModel.StorableObject[],System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
do a labeling for a given objects.
</summary>
            <param name="pObjectsToLabel">Array of objects to label.When array lenght is 0, labelling will stop.
							 </param>
            <param name="strConfigScheme">Name of the configuration
                              scheme.</param>
            <param name="strFilterScheme">Name of the filter
                              scheme.If this value is
                              empty filter scheme name
                              will be taken from
                              configuration scheme </param>
            <param name="strSortScheme">Name of the sorting scheme.
                            If this value is empty
                            sorting scheme name will be
                            taken from configuration
                            scheme</param>
            <param name="strLanguage">Language used by the
                          labeling operation, ex.
                          de_DE, en_EN, or ??_?? for all display languages.</param>
            <param name="strDestinationFile">Destination file where the
                                 labeling results will be
                                 stored.
								 If this parameter is empty, the destination file name
								 is taken from the configuration selected by the
								 strConfigScheme parameter.</param>
            <param name="nRecordRepeat">Repeating number per each
                            record. It must be greater
                            or equal 1</param>
            <param name="nTaskRepeat">Repeating number per task.
                          It must be greater or equal
                          1.</param>
            <param name="bShowOutput">Show output file.</param>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:ArgumentNullException">A parameter is a
                                        null reference.</exception>
            <exception cref="!:BaseException">Error occurred by
                                labeling.</exception>
            <remarks>
  * If a user scheme is not empty, so it will be checked for
    existence. An ArgumentException will be thrown if it does not
    exist. If the user configuration scheme is empty or null, so
    the last used configuration scheme will be implicitly reused
    which is currently set in GUI. If filter or sort scheme is
    empty or null, its name will be taken from configuration
    scheme.
  * The destination file should have the extension .txt, .xls
    or .xml. Otherwise the given extension will be replaced with
    .txt per default. 
  * Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)
  * In contrary to the behavior, when Labeling is executed
    via the EPLAN menu, the API never considers the current
    selection in the project. In EPLAN GUI the selection causes
    the filters to be ignored, in API, the filters are never
    ignored, when set.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.DoLabel(System.String,System.String,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
do a labeling for a project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                                  project, for which a
                                  labeling will be done.</param>
            <param name="strConfigScheme">Name of the configuration
                              scheme.</param>
            <param name="strLanguage">Language used by the
                          labeling operation, ex.
                          de_DE, en_EN, or ??_?? for all display languages.</param>
            <param name="strDestinationFile">Destination file where the
                                 labeling results will be
                                 stored.Extension of this
                                 \file must be set
                                 according to the
                                 configuration in
                                 strConfigScheme.
								 If this parameter is empty, the destination file name
								 is taken from the configuration selected by the
								 strConfigScheme parameter.</param>
            <param name="nRecordRepeat">Repeating number per each
                            record. It must be greater
                            or equal 1</param>
            <param name="nTaskRepeat">Repeating number per task.
                          It must be greater or
                          equal 1.</param>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:ArgumentNullException">A parameter is a
                                        null reference.</exception>
            <exception cref="!:BaseException">Error occurred by
                                labeling.</exception>
            <remarks>
  * If a user scheme is not empty, so it will be checked for
    existence. An ArgumentException will be thrown if it does not
    exist. If the user configuration scheme is empty or null, so
    the last used configuration scheme will be implicitly reused
    which is currently set in GUI. Filter and sort scheme names
    will be taken from configuration scheme.
  * The destination file should have the extension .txt, .xls
    or .xml. Otherwise the given extension will be replaced with
    .txt per default. 
  * Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)
  * In contrary to the behavior, when Labeling is executed
    via the EPLAN menu, the API never considers the current
    selection in the project. In EPLAN GUI the selection causes
    the filters to be ignored, in API, the filters are never
    ignored, when set.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.DoLabel(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
do a labeling for a project.
</summary>
            <param name="oProject">Project, for which a
                       labeling will be done.</param>
            <param name="strConfigScheme">Name of the configuration
                              scheme.</param>
            <param name="strLanguage">Language used by the
                          labeling operation, ex.
                          de_DE, en_EN, or ??_?? for all display languages.</param>
            <param name="strDestinationFile">Destination file where the
                                 labeling results will be
                                 stored.Extension of this
                                 \file must be set according
                                 to the configuration in
                                 strConfigScheme.
								 If this parameter is empty, the destination file name
								 is taken from the configuration selected by the
								 strConfigScheme parameter.</param>
            <param name="nRecordRepeat">Repeating number per each
                            record. It must be greater
                            or equal 1</param>
            <param name="nTaskRepeat">Repeating number per task.
                          It must be greater or equal
                          1.</param>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:ArgumentNullException">A parameter is a
                                        null reference.</exception>
            <exception cref="!:BaseException">Error occurred by
                                labeling.</exception>
            <remarks>
  * If a user scheme is not empty, so it will be checked for
    existence. An ArgumentException will be thrown if it does not
    exist. If the user configuration scheme is empty or null, so
    the last used configuration scheme will be implicitly reused
    which is currently set in GUI. Filter and sort scheme names
    will be taken from configuration scheme.
  * The destination file should have the extension .txt, .xls
    or .xml. Otherwise the given extension will be replaced with
    .txt per default. 
  * Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)
  * In contrary to the behavior, when Labeling is executed
    via the EPLAN menu, the API never considers the current
    selection in the project. In EPLAN GUI the selection causes
    the filters to be ignored, in API, the filters are never
    ignored, when set.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.DoLabel(System.String,System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
do a labeling for a project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                                  project, for which a
                                  labeling will be done.</param>
            <param name="strConfigScheme">Name of the configuration
                              scheme.</param>
            <param name="strFilterScheme">Name of the filter
                              scheme.If this value is
                              empty filter scheme name
                              will be taken from
                              configuration scheme </param>
            <param name="strSortScheme">Name of the sorting
                            scheme. If this value is
                            empty sorting scheme name
                            will be taken from
                            configuration scheme</param>
            <param name="strLanguage">Language used by the
                          labeling operation, ex.
                          de_DE, en_EN, or ??_?? for all display languages.</param>
            <param name="strDestinationFile">Destination file where the
                                 labeling results will be
                                 stored.Extension of this
                                 \file must be set
                                 according to the
                                 configuration in
                                 strConfigScheme.
								 If this parameter is empty, the destination file name
								 is taken from the configuration selected by the
								 strConfigScheme parameter.</param>
            <param name="nRecordRepeat">Repeating number per each
                            record. It must be greater
                            or equal 1</param>
            <param name="nTaskRepeat">Repeating number per task.
                          It must be greater or
                          equal 1.</param>
            <param name="bShowOutput">Show output file.</param>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:ArgumentNullException">A parameter is a
                                        null reference.</exception>
            <exception cref="!:BaseException">Error occurred by
                                labeling.</exception>
            <remarks>
  * If a user scheme is not empty, so it will be checked for
    existence. An ArgumentException will be thrown if it does not
    exist. If the user configuration scheme is empty or null, so
    the last used configuration scheme will be implicitly reused
    which is currently set in GUI. If filter or sort scheme is
    empty or null, its name will be taken from configuration
    scheme.
  * The destination file should have the extension .txt, .xls
    or .xml. Otherwise the given extension will be replaced with
    .txt per default. 
  * Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)
  * In contrary to the behavior, when Labeling is executed
    via the EPLAN menu, the API never considers the current
    selection in the project. In EPLAN GUI the selection causes
    the filters to be ignored, in API, the filters are never
    ignored, when set.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.DoLabel(System.String,System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
do a labeling for a project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                                  project, for which a
                                  labeling will be done.</param>
            <param name="strConfigScheme">Name of the configuration
                              scheme.</param>
            <param name="strFilterScheme">Name of the filter
                              scheme.If this value is
                              empty filter scheme name
                              will be taken from
                              configuration scheme </param>
            <param name="strSortScheme">Name of the sorting
                            scheme. If this value is
                            empty sorting scheme name
                            will be taken from
                            configuration scheme</param>
            <param name="strLanguage">Language used by the
                          labeling operation, ex.
                          de_DE, en_EN, or ??_?? for all display languages.</param>
            <param name="strDestinationFile">Destination file where the
                                 labeling results will be
                                 stored.Extension of this
                                 \file must be set
                                 according to the
                                 configuration in
                                 strConfigScheme.
								 If this parameter is empty, the destination file name
								 is taken from the configuration selected by the
								 strConfigScheme parameter.</param>
            <param name="nRecordRepeat">Repeating number per each
                            record. It must be greater
                            or equal 1</param>
            <param name="nTaskRepeat">Repeating number per task.
                          It must be greater or
                          equal 1.</param>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:ArgumentNullException">A parameter is a
                                        null reference.</exception>
            <exception cref="!:BaseException">Error occurred by
                                labeling.</exception>
            <exception cref="!:InvalidScheme">An error occurs
                                when used scheme
                                name doesn't exist</exception>
            <remarks>
  * If a user scheme is not empty, so it will be checked for
    existence. An ArgumentException will be thrown if it does not
    exist. If the user configuration scheme is empty or null, so
    the last used configuration scheme will be implicitly reused
    which is currently set in GUI. If filter or sort scheme is
    empty or null, its name will be taken from configuration
    scheme.
  * The destination file should have the extension .txt, .xls
    or .xml. Otherwise the given extension will be replaced with
    .txt per default. 
  * Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)
  * In contrary to the behavior, when Labeling is executed
    via the EPLAN menu, the API never considers the current
    selection in the project. In EPLAN GUI the selection causes
    the filters to be ignored, in API, the filters are never
    ignored, when set.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.DoLabel(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
do a labeling for a project.
</summary>
            <param name="oProject">Project, for which a
                       labeling will be done.</param>
            <param name="strConfigScheme">Name of the configuration
                              scheme.</param>
            <param name="strFilterScheme">Name of the filter
                              scheme.If this value is
                              empty filter scheme name
                              will be taken from
                              configuration scheme </param>
            <param name="strSortScheme">Name of the sorting scheme.
                            If this value is empty
                            sorting scheme name will be
                            taken from configuration
                            scheme</param>
            <param name="strLanguage">Language used by the
                          labeling operation, ex.
                          de_DE, en_EN, or ??_?? for all display languages.</param>
            <param name="strDestinationFile">Destination file where the
                                 labeling results will be
                                 stored.
								 If this parameter is empty, the destination file name
								 is taken from the configuration selected by the
								 strConfigScheme parameter.</param>
            <param name="nRecordRepeat">Repeating number per each
                            record. It must be greater
                            or equal 1</param>
            <param name="nTaskRepeat">Repeating number per task.
                          It must be greater or equal
                          1.</param>
            <param name="bShowOutput">Show output file.</param>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:ArgumentNullException">A parameter is a
                                        null reference.</exception>
            <exception cref="!:BaseException">Error occurred by
                                labeling.</exception>
            <remarks>
  * If a user scheme is not empty, so it will be checked for
    existence. An ArgumentException will be thrown if it does not
    exist. If the user configuration scheme is empty or null, so
    the last used configuration scheme will be implicitly reused
    which is currently set in GUI. If filter or sort scheme is
    empty or null, its name will be taken from configuration
    scheme.
  * The destination file should have the extension .txt, .xls
    or .xml. Otherwise the given extension will be replaced with
    .txt per default. 
  * Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)
  * In contrary to the behavior, when Labeling is executed
    via the EPLAN menu, the API never considers the current
    selection in the project. In EPLAN GUI the selection causes
    the filters to be ignored, in API, the filters are never
    ignored, when set.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.DoLabel(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
do a labeling for a project.
</summary>
            <param name="oProject">Project, for which a
                       labeling will be done.</param>
            <param name="strConfigScheme">Name of the configuration
                              scheme.</param>
            <param name="strFilterScheme">Name of the filter
                              scheme.If this value is
                              empty filter scheme name
                              will be taken from
                              configuration scheme </param>
            <param name="strSortScheme">Name of the sorting scheme.
                            If this value is empty
                            sorting scheme name will be
                            taken from configuration
                            scheme</param>
            <param name="strLanguage">Language used by the
                          labeling operation, ex.
                          de_DE, en_EN, or ??_?? for all display languages.</param>
            <param name="strDestinationFile">Destination file where the
                                 labeling results will be
                                 stored. Extension of this
                                 \file must be set according
                                 to the configuration in
                                 strConfigScheme.
								 If this parameter is empty, the destination file name
								 is taken from the configuration selected by the
								 strConfigScheme parameter.</param>
            <param name="nRecordRepeat">Repeating number per each
                            record. It must be greater
                            or equal 1</param>
            <param name="nTaskRepeat">Repeating number per task.
                          It must be greater or equal
                          1.</param>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:ArgumentNullException">A parameter is a
                                        null reference.</exception>
            <exception cref="!:BaseException">Error occurred by
                                labeling.</exception>
            <remarks>
  * If a user scheme is not empty, so it will be checked for
    existence. An ArgumentException will be thrown if it does not
    exist. If the user configuration scheme is empty or null, so
    the last used configuration scheme will be implicitly reused
    which is currently set in GUI. If filter or sort scheme is
    empty or null, its name will be taken from configuration
    scheme.
  * The destination file should have the extension .txt, .xls
    or .xml. Otherwise the given extension will be replaced with
    .txt per default. 
  * Microsoft Excel application is necessary to run Labeling with output file extension set to .xls (Excel format)				
  * In contrary to the behavior, when Labeling is executed
    via the EPLAN menu, the API never considers the current
    selection in the project. In EPLAN GUI the selection causes
    the filters to be ignored, in API, the filters are never
    ignored, when set.

</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Label.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Label">
            <summary>
Class used for labeling.
<example>The following example shows how to use class Label.
<code lang="cs" source="P8_API_Example_HEServices_Label_Example1.cs.txt" /></example></summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MergeDataService.WriteBackConnectionData(Eplan.EplApi.DataModel.MergedConnection[])">
            <summary>
Writes back the data of merged connections to whose corresponding connections
</summary>
            <param name="arrMergedConnections">Merged connections to write back data.</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MergeDataService.WriteBackFunctionData(Eplan.EplApi.DataModel.MergedFunction[])">
            <summary>
Writes back the data of merged functions to whose corresponding functions
</summary>
            <param name="arrMergedFunctions">Merged functions to write back data.</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MergeDataService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MergeDataService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MergeDataService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.MergeDataService">
            <summary>
Class providing mounting panel functionalities such as reorganize legend numbers.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.OptimizeNetAutomatically(Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean)">
            <summary>
Automatic optimization of nets and connections from whole project are routed in them.
</summary>
            <param name="pProject">Project for which net optimalization will be done. Can't be null.</param>
            <param name="nMinSize">Specifies the number of connections per net that is to trigger an optimization. The minimum number is 2.</param>
            <param name="bCloseDaisyChains">If true then an additional connection from the first to the last connection point of the chain is generated.</param>
            <returns>True if operation has been finished without problems. If false then check system messages for more information about problem.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if project is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if project is invalid.</exception>
            <exception cref="!:BaseException">Thrown when an error occurred during the optimization. Please refer to the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.OptimizeNetAutomatically(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Connection3D},System.Int32,System.Boolean,System.Boolean)">
            <summary>
Automatic optimization of nets and connections routed in them.
</summary>
            <param name="colConnections3D">Collection of 3d connections for which net optimalization will be done. Can't be null.</param>
            <param name="nMinSize">Specifies the number of connections per net that is to trigger an optimization. The minimum number is 2.</param>
            <param name="bPartiallySelected">If true then all nets included in collection completely or partially are optimized.</param>
            <param name="bCloseDaisyChains">If true then an additional connection from the first to the last connection point of the chain is generated.</param>
            <returns>True if operation has been finished without problems. If false then check system messages for more information about problem.</returns>
            <exception cref="T:System.ArgumentNullException">Null was passed to as parameter or one of element in collection is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">One of element in collection is invalid.</exception>
            <exception cref="!:BaseException">Thrown when an error occurred during the optimization. Please refer to the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.SetRoutingType(Eplan.EplApi.DataModel.E3D.Connection3D.Enums.RoutingType,Eplan.EplApi.DataModel.E3D.Connection3D[])">
            <summary>
Sets type of routing (with/without using a network) for the Connection3Ds
</summary>
            <param name="nType">The type of routing (undefined (0) or with (1) or without(2) using a network).</param>
            <param name="Connections3D">An array of Connections3D.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.Import(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
The method imports the Connection3Ds from file using schema into the giving project
</summary>
            <param name="oProject">Destination project.</param>
            <param name="strImportFilePath">Filename of the import file.</param>
            <param name="strSchemeName">Name of the import schema. If the schema name is empty the last used schema of the project will be used.</param>
            <returns>
An array of imported Connections3D.
</returns>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.ImportExcel(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Int32,System.Int32,Eplan.EplApi.DataModel.FunctionDefinition,System.String,System.String,Eplan.EplApi.HEServices.ConnectionService3D.ImportMode)">
            <summary>
The method imports the Connection3Ds from Excel file using schema into the giving project. If schema dos
</summary>
            <param name="oProject">Destination project.</param>
            <param name="strImportFilePath">Filename of the import file.</param>
            <param name="strSchemeName">Name of the import schema. If the schema name is empty the last used schema of the project will be used.</param>
            <param name="strTableName">Excel sheet name.</param>
            <param name="nHeadLinePos">The position of the head line that will be used to asssign the column values at the import.</param>
            <param name="nHeadLineCount">The count of head lines that will be skipped at the import.</param>
            <param name="oFuncDef">Default Function Definition</param>
            <param name="strIntern">Designation for 'internal'.</param>
            <param name="strExtern">Designation for 'external'.</param>
            <param name="eMode"> The import mode can be a combination of the XPProcImportMode enum and controls the import action (in)(optional)
eCreateMode = 1: The import create only missing device tags
eChangeMode = 2: The import change only existing device tags
eDeleteMode = 4: The import delete only unnecessary existing device tags</param>
            <returns>
An array of imported Connections3D.
</returns>
            <remarks> If new schema is not present old import method is used</remarks>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.ImportText(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Int32,System.Int32,Eplan.EplApi.DataModel.FunctionDefinition,System.String,System.String,Eplan.EplApi.HEServices.ConnectionService3D.ImportMode)">
            <summary>
The method imports the Connection3Ds from Text file using schema into the giving project
</summary>
            <param name="oProject">Destination project.</param>
            <param name="strImportFilePath">Filename of the import file.</param>
            <param name="strSchemeName">Name of the import schema. If the schema name is empty the last used schema of the project will be used.</param>
            <param name="strSeparator">Which character is used as separator.</param>
            <param name="nHeadLinePos">The position of the head line that will be used to asssign the column values at the import.</param>
            <param name="nHeadLineCount">The count of head lines that will be skipped at the import.</param>
            <param name="oFuncDef">Default Function Definition</param>
            <param name="strIntern">Designation for 'internal'.</param>
            <param name="strExtern">Designation for 'external'.</param>
            <param name="eMode"> The import mode can be a combination of the XPProcImportMode enum and controls the import action (in)(optional)
eCreateMode = 1: The import create only missing device tags
eChangeMode = 2: The import change only existing device tags
eDeleteMode = 4: The import delete only unnecessary existing device tags</param>
            <returns>
An array of imported Connections3D.
</returns>
            <remarks> If new schema is not present old import method is used</remarks>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.BundleConnections(Eplan.EplApi.DataModel.Project,System.Int32,System.Int32,System.Int32,System.Double,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Bundle connections of project.
</summary>
            <param name="pProject">Project, which connections will be bundled</param>
            <param name="nStartValue">Start value for bundle numbers</param>
            <param name="nStepWith">Step with for bundle numbers</param>
            <param name="nNumWiresInBundleMax">Maximum number of wires per bundle</param>
            <param name="dSubXSectionInBundle">Maximum summary cross-section in a bundle</param>
            <param name="arrBundlingSchemas">List of bundling schemes</param>
            <param name="bPreferChains">If true daisy chanins (Net) will be prefered in bundle.</param>
            <param name="bDoCompleteProject">Apply for entire project</param>
            <param name="bShowPreview">Show preview</param>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The System::Int32ernal System::Int32erface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.BundleConnections(System.Collections.Generic.List{Eplan.EplApi.DataModel.StorableObject},Eplan.EplApi.HEServices.ConnectionService3D.BundleCriteria,Eplan.EplApi.HEServices.ConnectionService3D.BundleOptions,System.Int32,System.Int32)">
            <summary>
Bundle connections of objects.
Objects may be components or 3d connections.
</summary>
            <param name="listOfObjects">List of objects, which connections will be bundled</param>
            <param name="nCriteria">Criterias for bundling</param>
            <param name="nOptions">Additional options. see BundleOptions</param>
            <param name="nStartValue">Start value for bundle numbers</param>
            <param name="nStepWith">Step with for bundle numbers</param>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The System::Int32ernal System::Int32erface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
            <summary>
bundle connections of objects
</summary>
            <param name="listOfObjects">list of objects</param>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.BundleConnections(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.ConnectionService3D.BundleCriteria,Eplan.EplApi.HEServices.ConnectionService3D.BundleOptions,System.Int32,System.Int32)">
            <summary>
Bundle connections of project.
</summary>
            <param name="pProject">Project, which connections will be bundled</param>
            <param name="nCriteria">Criterias for bundling</param>
            <param name="nOptions">Additional options. see BundleOptions</param>
            <param name="nStartValue">Start value for bundle numbers</param>
            <param name="nStepWith">Step with for bundle numbers</param>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The System::Int32ernal System::Int32erface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.ShowFillingDegree(System.Boolean)">
            <summary>
Show or hide filling degree.
</summary>
            <param name="bShow">Show filling degree, if bShow==true, otherwise hide filling degree.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The System::Int32ernal System::Int32erface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.CreateRoutingSegments(Eplan.EplApi.DataModel.E3D.InstallationSpace)">
            <summary>
Creates routing segments for installation space.
</summary>
            <param name="pInstallationSpace">Installation space no which routing segments will be created.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The System::Int32ernal System::Int32erface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.RouteConnections(System.Collections.Generic.List{Eplan.EplApi.DataModel.StorableObject})">
            <summary>
Routing of connections.
</summary>
            <param name="listOfObjects">Object, that will be considered for routing.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The System::Int32ernal System::Int32erface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService3D.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService3D">
            <summary> 
Class providing functionality to work with 3d connections.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.Merge(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Int32[])">
            <summary>
Unite project revisions
</summary>
            <param name="oProj">Project to unite revisions</param>
            <param name="strRevisionName">Name of the new united project revision</param>
            <param name="strComment">Comment of the new united project revision (optional)</param>
            <param name="nProjectRevisionIndices">Project revision index to unite.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a revision for a project section is active, only the revisions of the project section is united. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.Merge(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Int32,System.Int32)">
            <summary>
Unite project revisions
</summary>
            <param name="oProj">Project to unite revisions</param>
            <param name="strRevisionName">Name of the new united project revision</param>
            <param name="strComment">Comment of the new united project revision (optional)</param>
            <param name="nProjectRevisionIndexFrom">Project revision index to start with unification. Corresponds to index of project property PROJ_REVISION_LOG_NAME which holds revision names.</param>
            <param name="nProjectRevisionIndexTo">Project revision index to end with unification. Corresponds to index of project property PROJ_REVISION_LOG_NAME which holds revision names.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a revision for a project section is active, only the revisions of the project section is united. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.RemoveRevisionMarkers(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.Placement})">
            <summary>
Removes revision marker.
</summary>
            <param name="colPlacements">Placements for which revision markers will be removed.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a revision for a project section is active, only the markers of the pages and installationspaces 
are included. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.RemoveRevisionData(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.Placement})">
            <summary>
Removes revision data from placements.
</summary>
            <param name="colPlacements">Placements.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.RemoveRevisionData(Eplan.EplApi.DataModel.Project)">
            <summary>
Removes revision data.
</summary>
            <param name="oProject">A project to take the action on. Project cannot be readonly.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.RemoveRevision(Eplan.EplApi.DataModel.Project)">
            <summary>
Deletes last revision.
</summary>
            <param name="oProject">A project to take the action on. Project cannot be readonly. There must be at least 2 revisions in the project.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.RemoveWriteProtection(Eplan.EplApi.DataModel.Project)">
            <summary>
Removes write protection on a project (i.e. opens the current revision for changes).
</summary>
            <param name="oProject">A project to take the action on.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a revision for a project section is active, only the pages and installationspaces of this project section
are included. This pages and installationspaces are writable afterwards.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.GetUncompletedInstallationSpaces(Eplan.EplApi.DataModel.Project)">
            <summary>
Returns an array of modified and not completed installation spaces
in the current revision of a project.
</summary>
            <param name="oProject">A project to get the installation spaces from.</param>
            <remarks>
In case of a project on which  no 'Complete project' operation was called (from API or GUI), an empty array will be returned.
When a revision for a project section is active, only the installationspaces of this project section
are returned.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.GetUncompletedPages(Eplan.EplApi.DataModel.Project)">
            <summary>
Returns an array of modified and not completed pages
in the current revision of a project.
</summary>
            <param name="oProject">A project to get the pages from.</param>
            <remarks>
In case of a project on which  no 'Complete project' operation was called (from API or GUI), an empty array will be returned.
Pages in the mode "Complete always" are always included here.
When a revision for a project section is active, only the pages of this project section
are returned.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompleteProject(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean)">
            <summary>
Completes current revision of a project and can evaluate the project.
</summary>
            <param name="oProjectToComplete">A project to complete.</param>
            <param name="strIndex">New revision's name.</param>
            <param name="strRevDescription">New revision's description.</param>
            <param name="strReasonOfChange">Additional revision's description.</param>
            <param name="bEvaluate">do the evaluation before completing</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
All pages not completed so far are completed now.
When a revision for a project section is active, only the pages and installationspaces of this project section
are protected. The project itself stays writable.
Otherwise the project is converted to a readonly revision project.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompleteProject(Eplan.EplApi.DataModel.Project)">
            <summary>
Completes current revision of a project.
</summary>
            <param name="oProjectToComplete">A project to complete.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a revision for a projectsection is active, only the pages and installationspaces of this project section
are protected. The project itself stays writable.
Otherwise the project is converted to a readonly revision project.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompleteInstallationSpaces(Eplan.EplApi.DataModel.E3D.InstallationSpace[],System.String,System.String,System.String)">
            <summary>
Completes modification of installationspaces in the current revision of a project
</summary>
            <param name="spacesToComplete">An array of installation spaces to complete.</param>
            <param name="strIndex">New revision's name.</param>
            <param name="strRevDescription">New revision's description.</param>
            <param name="strReasonOfChange">Additional revision's description.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a logging revision starts, every changed installation space gets the marker "Draft" on it. With this function
an installation space is completed, a revision is created (visible in the revision properties) and the draft is removed.
When the revision belongs to an active project section, only the installationspaces of this section are completed.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompletePages(Eplan.EplApi.DataModel.Page[],System.String,System.String,System.String,System.Boolean)">
            <summary>
Completes modification of selected pages in the current revision of a project and can
update the evaluations in the selection.
</summary>
            <param name="pagesToComplete">An array of pages to complete.</param>
            <param name="strIndex">New revision's name.</param>
            <param name="strRevDescription">New revision's description.</param>
            <param name="strReasonOfChange">Additional revision's description.</param>
            <param name="bEvaluate">do the evaluation before completing</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a logging revision starts, every changed page gets the marker "Draft" on it. With this function
a page is completed, a page revision is created (visible in the page revision properties) and the draft is removed.
When the revision belongs to an active project section, only the pages of this section are completed.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompletePages(Eplan.EplApi.DataModel.Page[],System.String,System.String,System.String)">
            <summary>
Completes modification of selected pages in the current revision of a project.
</summary>
            <param name="pagesToComplete">An array of pages to complete.</param>
            <param name="strIndex">New revision's name.</param>
            <param name="strRevDescription">New revision's description.</param>
            <param name="strReasonOfChange">Additional revision's description.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                during the action.</exception>
            <remarks>
When a logging revision starts, every changed page gets the marker "Draft" on it. With this function
a page is completed, a page revision is created (visible in the page revision properties) and the draft is removed.
When the revision belongs to an active project section, only the pages of this section are completed.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CreateRevision(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String@)">
            <summary>
Creates a new logging revision of the source project. If the source project
is a completed revision already, it is copied and the path to the revision project
is returned (through pPathOfCopiedRevision parameter).
</summary>
            <param name="sourceProject">Project to create a revision from.</param>
            <param name="strRevisionName">New revision's name.</param>
            <param name="strRevisionComment">New revision's description.</param>
            <param name="pPathOfCopiedRevision">Pointer to a string in which the path to the 
									revision project is returned as long as the source project
									was a completed revision and a new revision has been created.
									Otherwise the string is set to an empty value.
									The pointer itself may be NULL.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                when creating a revision.</exception>
            <remarks>
This creates a new logging revision. At this point of time all changes of this document are logged
and all objects changed are marked with a marker. In GED this is a border around the object.
When an project section is active, only the pages/installationspaces of this section are logged.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.RemoveRevisionMarkers(Eplan.EplApi.DataModel.Project)">
            <summary>
Removes revision markers from a project
</summary>
            <param name="oProject">The project in which the markers will
                       be removed.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                when removing
                                revision markers.</exception>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.AddRevisionMarkersForDeletedInRevisionProject(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Adds the revision markers of all deleted objects in the Comparison project. Note: The Comparison project has to be writable.
</summary>
            <param name="oComparisonProject">The Comparison project to which
                       the markers for deleted objects will be
                       added.</param>
            <param name="oProject">The project containing the comparison results.</param>
            <param name="strRevisionMarker">Text for the marker.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                when adding revision
                                markers.</exception>
            <example>
                <code lang="c#">
Revision revisionObj = new Revision();
revisionObj.CompareProjects(oProject, oComparisonProject, "Revision1.mdb", true, "Test");

//now the Revision1.mdb contains all changes. The added and changed objects are marked in oProject.

revisionObj.AddRevisionMarkersForDeletedInRevisionProject(oComparisonProject, "Test", "Revision1.mdb");

// now all deleted objects are marked in the oComparisonProject with "Test"
</code>
            </example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.AddRevisionMarkers(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Adds revision markers to the changed project.
</summary>
            <param name="oProject">The Project to which
                       the markers will be
                       added.</param>
            <param name="strRevisionMarker">Text for the marker.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                when adding revision
                                markers.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompareProjects(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Project,System.Boolean,System.String,System.Boolean)">
            <summary>
Compares all possible properties of a project to a comparison
project.
</summary>
            <param name="oProject">Project to compare.</param>
            <param name="oRevision">Comparison project
                        which to compare to.</param>
            <param name="bRemoveOldMarkers">If set to true, old
                                revision markers
                                will be deleted
                                before comparing.</param>
            <param name="strRevisionMarker">Text for the
                                revision markers.</param>
            <param name="bAppendResult">if true, already existing comparison results in project are not deleted.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                when comparing
                                projects.</exception>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompareProjects(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Project,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
Compares a project to a comparison project.
</summary>
            <param name="oProject">Project to compare.</param>
            <param name="oRevision">Comparison project
                        which to compare to.</param>
            <param name="strSchemaName">Name of the scheme
                            for the comparison
                            settings.</param>
            <param name="bRemoveOldMarkers">If set to true, old
                                revision markers
                                will be deleted
                                before comparing.</param>
            <param name="strRevisionMarker">Text for the
                                revision markers.</param>
            <param name="bAppendResult">if true, already existing comparison results in project are not deleted.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                when comparing
                                projects.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
            <remarks>


If an empty string is passed for the scheme name, everything
is compared (i.e. devices, connections,...). 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CompareProjects(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Project,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Compares a project to a comparison project.
</summary>
            <param name="oProject">Project to compare.</param>
            <param name="oRevision">Comparison project
                        which to compare to.</param>
            <param name="strSchemaName">Name of the scheme
                            for the comparison
                            settings.</param>
            <param name="bRemoveOldMarkers">If set to true, old
                                revision markers
                                will be deleted
                                before comparing.</param>
            <param name="strRevisionMarker">Text for the
                                revision markers.</param>
            <param name="bUseAlternateIdentification">When true an alternative identification for objects is used.
P.e. two functions with the same full BMK are compared with each other.</param>
            <param name="bCreateDeletedObjectInfo">Create a deleted object symbol for all deleted instances.</param>
            <param name="bAppendResult">if true, already existing comparison results in project are not deleted.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                when comparing
                                projects.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
            <remarks>


If an empty string is passed for the scheme name, everything
is compared (i.e. devices, connections,...). 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.CreateComparisonProject(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Boolean)">
            <summary>
Creates a comparison project for the specified project.
</summary>
            <param name="oProject">The project which will be
                       copied as comparison project.</param>
            <param name="strRevisionName">Revision name. Full link file
                              name of the copied project.</param>
            <param name="strComment">Comment on the created
                         comparison project.</param>
            <param name="bTemporary">If set to true, the comparison
                         project is marked as temporary
                         (not read\-only).</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       revision management
                                       could not be created
                                       or an error occurred
                                       when creating the
                                       comparison project.</exception>
            <exception cref="!:BaseException">An error occurred
                                when creating the
                                comparison project.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Revision.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Revision">
            <summary>
Class providing functionality of the revision control. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.CorrectProjectItems(Eplan.EplApi.DataModel.Function[],System.String)">
            <summary>
Corrects project items.
</summary>
            <remarks>
Connections in project will be also corrected if such option is selected in schema.
</remarks>
            <param name="arrFunctions">Array of functions which will be corrected.</param>
            <param name="strScheme">Scheme name.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. array do not contain any valid objects.
</exception>
            <exception cref="!:ApplicationException">Thrown, if the \internal action
                                       could no be found.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.CorrectProjectItems(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Corrects project items.
</summary>
            <param name="oProject">Project which items will be corrected.</param>
            <param name="strScheme">Scheme name.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Thrown, if the \internal action
                                       could no be found.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.Reorganize(Eplan.EplApi.DataModel.Project,System.Boolean)">
            <summary>
Reorganizes a project
</summary>
            <param name="oProject">Project which will be reorganized.</param>
            <param name="bExtendedReoganize">Extended reoganize option</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Thrown, if the \internal action
                                       could no be found.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.ImportPropertyPlacementsSchemas(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Imports property placements schemas. 
</summary>
            <param name="oProject">Project to which property placements schemes will be imported.</param>
            <param name="strFileName">Full name of input file.</param>
            <param name="bOverwrite">If the imported property placement schema already exists, this
parameter specifies whether it should be overwritten.</param>
            <returns>
Returns array of Tuples where first item is a name of imported property placement schema 
and second item is a symbol name to which this imported schema is assigned.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Thrown, if the \internal action
                                       could no be found.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.ExportPropertyPlacementsSchemas(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Exports property placements schemas. 
</summary>
            <param name="oProject">Project from which property placements schemes will be exported.</param>
            <param name="strFileName">Full name of output file.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Thrown, if the \internal action
                                       could no be found.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.LoadDirectory(System.String,System.Boolean)">
            <summary>
Scans directory for projects to add them into the project management.
</summary>
            <remarks>
To access existing projects from the project management, they must be loaded into the project management. 
This method allows user to search for projects in directories under given path. If no path is passed then method uses default value which is stored
in setting 'USER.TrDMProject.Masterdata.Pathnames.Projects'.
</remarks>
            <param name="strProjectsDirectory">Path to directory which will be scanned. If <c>null</c> or <c>empty</c> then default path is used.</param>
            <param name="bWithSubDirs">Determines whether sub directories are also scanned for projects.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if directory is not <c>null</c> or <c>empty</c> and does not exists.</exception>
            <exception cref="T:System.ApplicationException">Thrown if the functionality is not available.</exception>
            <exception cref="!:BaseException">Thrown if an error occurs while executing the method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.PublishProject(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.ProjectManagement.Medium,System.String,System.String,System.String)">
            <summary>
Publishes a project
</summary>
            <param name="oProject">Project which will be published.</param>
            <param name="eMedium">Medium (File/Email)</param>
            <param name="strFileName">Filename with extension</param>
            <param name="strFolderPath">Folder path</param>
            <param name="strScheme">Name of the export scheme</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Thrown, if the \internal action
                                       could no be found.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ProjectManagement.Medium.Email">
            <summary>Email</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ProjectManagement.Medium.File">
            <summary>File</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ProjectManagement.Medium">
            <summary>
Medium for publishing the project
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.UpdateProjectStructureFromSettings(Eplan.EplApi.DataModel.Project)">
            <summary>
Updates project structure for navigator(GUI) like the project settings.
</summary>
            <remarks> This function accommodate project structure at the database depends on the current project settings.
For this process the giving project will be opened with the exclusive locking mode, temporally.</remarks>
            <param name="oProject">Project which will be updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if oProject is null value.</exception>
            <exception cref="T:System.ApplicationException">Thrown if oProject is invalid project.</exception>
            <exception cref="T:System.ApplicationException">Thrown if oProject structure could not be updated like the project settings</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown if an error occurs while executing the method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.SortPagesManually(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.Page})">
            <summary>
Changes page position in list view of page navigator(GUI).
</summary>
            <remarks>
                <para>
Result of this method can be invisible in list view of page navigator. This can happen if value of setting 'PageBrowserGui.UseManualSortID'
has been <c>false</c> while the used project were being opened. In this case to see the custom sort order the project needs to be 
restarted.
</para>
                <para>
Method sets value of used project setting 'PageBrowserGui.UseManualSortID' to <c>true</c>.
</para>
            </remarks>
            <param name="colPages">Collection of pages defining new order of pages in list view of page navigator. Can't null or empty.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>colPages</c> is null or empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown if an error occurs while executing the method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.SortPagesManually(Eplan.EplApi.DataModel.Page,System.Int32)">
            <summary>
Changes page position in list view of page navigator(GUI).
</summary>
            <remarks> Page numeration starts from 1. 
If new position is greater then number of pages then no action is being done.</remarks>
            <param name="oPage">Page which will be moved.</param>
            <param name="iNewPosition">New position of page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if oPage or iNewPosition is null value.</exception>
            <exception cref="T:System.ApplicationException">Thrown if oPage is invalid page.</exception>
            <exception cref="T:System.ApplicationException">Thrown if oPage is invalid page.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown if an error occurs while executing the method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.DoProjectInspection(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Project,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Compares two projects and writes the results as project messages into the message management.
This method corresponds to the following functionality of EPLAN Electric P8: Project / Management, Extras / Verify Project
</summary>
            <param name="oProject">First project to be compared.</param>
            <param name="oRefProject">Second project to be compared.</param>
            <param name="bCompareSettings">If true, comparison of project settings is done.</param>
            <param name="sSettingsScheme">Name of settings comparison scheme. 
If <c>null</c> or <c>empty</c> string is passed then last used scheme will be used.
This parameter is used only if <c>bCompareSettings</c> is <c>true</c>.
If the scheme is not supported, information is passed as a system message.
</param>
            <param name="bCompareProperties">If true, comparison of project properties is done.</param>
            <param name="sPropertiesScheme">Name of properties comparison scheme.
If <c>null</c> or <c>empty</c> string is passed then last used scheme will be used.
This parameter is used only if <c>bCompareProperties</c> is <c>true</c>.
If the scheme is not supported, information is passed as a system message.
</param>
            <param name="bDoVerification">If true, projects verification is also done.</param>
            <param name="sVerificationScheme">Name of verification scheme.
If <c>null</c> or <c>empty</c> string is passed then last used scheme will be used.
This parameter is used only if <c>bDoVerification</c> is <c>true</c>.
If the scheme is not supported, information is passed as a system message.
</param>
            <param name="bComparePrjStructure">If true, comparison of project structure is done.</param>
            <param name="bCompareLayers">If true, comparison of layersSecond is done.</param>
            <param name="bReportNewLayers">If true, new layers are reported.
Used only if parameter <c>bCompareLayers</c> is <c>true</c>.
</param>
            <param name="bStopOnFirstDifference">If true, the comparisons/verifications will stop on first difference/error.</param>
            <returns>true if the inspection was succesful</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if oProject or oRefProject is null value.</exception>
            <remarks>
Messages created by old project verifications are deleted.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.DoProjectInspection(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Project,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Compares two projects and writes the results as project
messages into the message management. This method corresponds
to the following functionality of EPLAN Electric P8: Project
/ Management, Extras / Verify Project
</summary>
            <param name="oProject">First project to be
                       compared.</param>
            <param name="oRefProject">Second project to be
                          compared.</param>
            <param name="bCompareSettings">If true, comparison of
                               project settings is
                               done. Last used
                               settings comparison
                               scheme will be used. </param>
            <param name="bCompareProperties">If true, comparison of
                                 project properties is
                                 done. Last used
                                 properties comparison
                                 scheme will be used. </param>
            <param name="bDoVerification">If true, projects
                              verification is also
                              done. Last used
                              verification scheme
                              will be used. </param>
            <param name="bComparePrjStructure">If true, comparison of
                                   project structure is
                                   done.</param>
            <param name="bCompareLayers">If true, comparison of
                             layersSecond is done.</param>
            <param name="bReportNewLayers">If true, new layers are
                               reported. Used only if
                               parameter <c>bCompareLayers</c>
                               is <c>true</c>. </param>
            <param name="bStopOnFirstDifference">If true, the
                                     comparisons/verifications
                                     will stop on first
                                     difference/error.</param>
            <returns>
true if the inspection was succesful
</returns>
            <exception cref="!:System\:\:ArgumentNullException">Thrown if
                                                  oProject
                                                  or
                                                  oRefProject
                                                  is null
                                                  value.</exception>
            <remarks>
In case <c>bDoVerification</c> is true, the project will be
checked. Messages created by old project verifications are 
deleted.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.ReadProjectInfo(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Loads the ProjectInfo.xml file. and sets project properties
accordingly.
</summary>
            <param name="oProject">Project for which the file will
                       be loaded.</param>
            <param name="strPrjInfoXml">Full file name of the
                            ProjectInfo.xml file to be
                            loaded.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Thrown, if the
                                       \internal interface
                                       of the project
                                       management module
                                       could no be created.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.ReadProjectInfo(System.String,System.String)">
            <summary>
Loads the ProjectInfo.xml file. and sets project properties
accordingly.
</summary>
            <remarks>
The specified project may be open or not. If the project was
not open, it will be opened for loadig the XML file and will
be closed subsequently.
</remarks>
            <param name="strFullLinkFileName">Full link file name of the
                             project for which the file will
                             be loaded.</param>
            <param name="strPrjInfoXml">Full file name of the
                            ProjectInfo.xml file to be
                            loaded.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Thrown, if the
                                       \internal interface
                                       of the project
                                       management module
                                       could no be created.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the
                                method.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.CompressProject(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Compresses a project.
</summary>
            <param name="oProject">Project to be compressed.</param>
            <param name="strConfigScheme">Configuration scheme. If an
                              empty string is passed to the
                              parameter, the last\-used
                              scheme will be reused
							  which is currently set in GUI.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for compressing
                                       could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                when compressing the
                                project.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.CompressProject(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Compresses a project.
</summary>
            <param name="oProject">Project to be compressed.</param>
            <param name="strConfigScheme">Configuration scheme. If an
                              empty string is passed to the
                              parameter, the last\-used
                              scheme will be re\-used
							  which is currently set in GUI.</param>
            <param name="strFilterScheme">Filter scheme. If an empty
                              string is passed to the
                              parameter, the last\-used
                              scheme will be re\-used
							  which is currently set in GUI.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for compressing
                                       could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                when compressing the
                                project.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.CompressProject(System.String,System.String)">
            <summary>
Compresses a project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project to be compressed.</param>
            <param name="strConfigScheme">Configuration scheme. If an
                              empty string is passed to the
                              parameter, the last\-used
                              scheme will be reused
							  which is currently set in GUI.</param>
            <remarks>
The specified project may be open or not. If the project was
not open already, it will be opened for compressing and will
be closed subsequently.


</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for compressing
                                       could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                when compressing the
                                project.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.CompressProject(System.String,System.String,System.String)">
            <summary>
Compresses a project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project to be compressed.</param>
            <param name="strConfigScheme">Configuration scheme. If an
                              empty string is passed to the
                              parameter, the last\-used
                              scheme will be reused
							  which is currently set in GUI.</param>
            <param name="strFilterScheme">Filter scheme. If an empty
                              string is passed to the
                              parameter, the last\-used
                              scheme will be re\-used
							  which is currently set in GUI.</param>
            <remarks>
The specified project may be open or not. If the project was
not open, it will be opened for compressing and will be
closed subsequently.


</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for compressing
                                       could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                when compressing the
                                project.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.GetProjectByGUID(System.String,System.String@,System.String@)">
            <summary>
Method for searching a project by a given project ID from the
project management database.
</summary>
            <param name="strProjectGUID">Unique project ID of the wanted
                             project.</param>
            <param name="strProjectPath">[out] Full link file name of
                             the found project.</param>
            <param name="strWorkStation">[out] Name of the workstation
                             on which the project is
                             located. The parameter returns
                             an empty string, if the project
                             is not found or it is located
                             on the local workstation.</param>
            <returns>
return = true: project was found.

return = false: project was not found.


</returns>
            <remarks>
It may happen, that a project appears more than once in the
database. This may for example happen, if the project was
registered as well by a local path as by a UNC path . In this
case, the path, which is found first will be written to <c>strProjectPath</c>.
Opening a project via API does not registers it in the ProjectManagement database. 
Please use action XPrjActionProjectUpdate in order to add it.

</remarks>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while
                                executing the method.</exception>
            <exception cref="!:ApplicationException">Thrown, if the
                                       \internal interface
                                       of the project
                                       management module
                                       could no be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ProjectManagement.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ProjectManagement">
            <summary>
This class contains methods for some project related tasks,
like finding a project by its ID, compressing a project, or
importing a ProjectInfo.xml file. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.PDFComments(System.String,System.String)">
            <summary>
Imports comments from PDF file.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project.  Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of the PDF file to be imported. Can't be <c>null</c>.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">API can't get access to this functionality of P8. A reason
                                       for this could be the
                                       lack of necessary
                                       rights or licenses.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please read the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.PDFComments(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Imports comments from PDF file.
</summary>
            <param name="oProject">Project to which comments from pdf will be imported. Can't be <c>null</c>.</param>
            <param name="strFileName">Full file name of the PDF file to be imported. Can't be <c>null</c>.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">API can't get access to this functionality of P8. A reason
                                       for this could be the
                                       lack of necessary
                                       rights or licenses.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please read the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.DesignSpace(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Imports a Step file as a design space
</summary>
            <param name="oProject">Project to which the Step file will be imported</param>
            <param name="strFileName">Full file name of the Step file
                             to be imported.</param>
            <returns> The installation space to which the step file was imported</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">An action or internal
                                       interface for the
                                       import could not be
                                       created. A reason
                                       for this could be the
                                       lack of necessary
                                       rights or licenses.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please read the
                                exception message. </exception>
            <remarks>
This method requires a license for the pro panel 3D desgin space addon
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Graphics3D(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Imports a Step file
</summary>
            <param name="oProject">Project to which the Step file will be imported</param>
            <param name="strFileName">Full file name of the Step file
                             to be imported.</param>
            <returns> The installation space to which the step file was imported</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">An action or internal
                                       interface for the
                                       import could not be
                                       created. A reason
                                       for this could be the
                                       lack of necessary
                                       rights or licenses.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please read the
                                exception message. </exception>
            <remarks>
This method requires a license for the pro panel 3D addon
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.DXFDWGFiles(System.String,System.String,System.String,System.String)">
            <summary>
Creates an EPLAN macro from a DXF / DWG file.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project for which the macros
                             will be created. The macros
                             will use the layer
                             information from this
                             project.</param>
            <param name="strDXFMacroDir">Directory from which the DXF
                             / DWG files are imported.</param>
            <param name="strDestinationDir">Directory, to which the
                                created macro files will be
                                written.</param>
            <param name="strScheme">Scheme used for importing
                        DXF / DWG files.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:SecurityException">Access rights to the
                                    \file system are
                                    missing.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:NotSupportedException">An argument
                                        contained invalid
                                        characters, e.g. a
                                        path contained a
                                        '\:'. </exception>
            <exception cref="!:PathTooLongException">Invalid path.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please read the
                                exception message. </exception>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "strScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, an
exception will be thrown.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.DXFDWGFiles(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String)">
            <summary>
Creates an EPLAN macro from a DXF / DWG file.
</summary>
            <param name="oProject">Project for which the macros
                       will be created. The macros
                       will use the layer
                       information from this
                       project.</param>
            <param name="strDXFMacroDir">Directory from which the DXF
                             / DWG files are imported.</param>
            <param name="strDestinationDir">Directory, to which the
                                created macro files will be
                                written.</param>
            <param name="strScheme">Scheme used for importing
                        DXF / DWG files.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:SecurityException">Access rights to the
                                    \file system are
                                    missing.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:NotSupportedException">An argument
                                        contained invalid
                                        characters, e.g. a
                                        path contained a
                                        '\:'. </exception>
            <exception cref="!:PathTooLongException">Invalid path.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please read the
                                exception message. </exception>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "strScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, an
exception will be thrown. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Eplan5Macro(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
This method either converts an EPLAN 5-macro to an EPLAN
Macro or converts all EPLAN 5 macros from the macro folder to
the destination folder.
</summary>
            <param name="strEplan5projectPath">Complete path of an
                                   EPLAN 5 project. This
                                   project is needed for
                                   the master data. </param>
            <param name="strMacroProjectPath">Full file name of the
                                  EPLAN macro project to
                                  be created.</param>
            <param name="bOnlyMacroProject">If set to true, only
                                the macro project is
                                being created. If set
                                to false, also all
                                macros will be written
                                to the destination
                                directory.</param>
            <param name="strCodePage">Code Page.</param>
            <param name="strMasterDataDrive">EPLAN 5 master data
                                 drive (e.g. C\:).</param>
            <param name="strSourceMacroPath">Full file name of an
                                 EPLAN 5 macro to be
                                 imported or complete
                                 path of an EPLAN 5
                                 macro directory, from
                                 which all macros will
                                 be imported.
								 Source folder should be &lt;drive&gt;\Eplan4.
								 When using folders other that &lt;drive&gt;\Eplan4,
								 additional folders will be created.</param>
            <param name="strDestinationMacroPath">Destination directory
                                      for the imported
                                      macros.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. an invalid path.</exception>
            <exception cref="!:ApplicationException">An action or internal
                                       interface for the
                                       import could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please refer to the
                                system messages for
                                further information.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Eplan21SetSymbolFileMapping(System.String,System.String,System.String)">
            <summary>
This method either sets an EPLAN 21 symbolfile mapping from the EASY
format (*.sym) to an EPLAN symbollibrary (*.slk) symbollibrary.
</summary>
            <param name="strSourceFile">Full file name of 
                            EPLAN 21 Symbolfile 
                            (*.sym).</param>
            <param name="strDestinationFile">Full file name of the symbollibrary 
                                 to be used.</param>
            <param name="strSymbolMappingTable">Name of an existing symbol mapping table.</param>
            <example>
The following examples shows a method to set the mapping for a EPLAN21 symbol file.

<code lang="C#">
private static void Eplan21SymbolFile()
{
	Import oImport = new Import();
	string strE21SymbolFile = @"C:\Programme\EPLAN\EPLAN 21\Symbols\EPLAN\DIC_ESS_xxx.sym";
	string strDestinationFile = PathMap.SubstitutePath("$(MD_SYMBOLS)") + "\\DIC_ESS_xxx.slk";
	oImport.Eplan21SetSymbolFileMapping(strE21SymbolFile, strDestinationFile, "DIC_ESS");
}
</code></example>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       import cannot be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during macro import.
                                Please refer to the
                                exception message. </exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Eplan21SymbolFile(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
This method either converts an EPLAN 21 symbolfile from the EASY
format (*.sym) to an EPLAN symbollibrary (*.slk) or exports a mounting panal macro file 
for each symbol variant into the destination path, depends on the symbol import type.
</summary>
            <param name="strSourceFile">Full file name of 
                            EPLAN 21 Symbolfile 
                            (*.sym).</param>
            <param name="strDestinationFile">Full file name of the symbollibrary to be created,
                                 or the path to the exported .</param>
            <param name="nSymbolImportType">Symbol import type: 
                                 0 create a symbollibrary 
                                 1 export mounting panal macros</param>
            <param name="strSymbolMappingTable">Name of an existing symbol mapping table
                                 (only use for symbol import type 0).</param>
            <param name="bIgnoreSymbolMapping">Flag to ignore the symbol mapping of the symbol mapping table. 
                                 In this case only the given function definition of the  
                                 symbol mapping table will be used at the import.</param>
            <example>
The following examples shows a method to import a EPLAN21 symbol file.

<code lang="C#">
private static void Eplan21SymbolFile()
{
	Import oImport = new Import();
	string strE21SymbolFile = @"C:\Programme\EPLAN\EPLAN 21\Symbols\EPLAN\DIC_ESS_xxx.sym";
	string strDestinationFile = PathMap.SubstitutePath("$(MD_SYMBOLS)") + "\\DIC_ESS_xxx.slk";
	oImport.Eplan21SymbolFile(strE21SymbolFile, strDestinationFile, 0, "DIC_ESS", false);
}
</code></example>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       import cannot be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during macro import.
                                Please refer to the
                                exception message. </exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Eplan21Macro(System.String,System.String)">
            <summary>
This method either converts an EPLAN 21 macro from the EASY
format (*.mac) to an EPLAN macro project (*.elk) or it
converts all EPLAN 21 macros in an EPLAN 21 archive (*.ez) to
an EPLAN macro project (*.elk) in the destination path.
</summary>
            <param name="strSourceFile">Full file name of either an
                            EPLAN 21 macro (*.mac),
                            oder an EPLAN 21 archive
                            (*.ez).</param>
            <param name="strDestinationPath">Full file name of the macro
                                 project to be created.</param>
            <example>
The following examples shows a method to import a EPLAN21 macro file.

<code lang="C#">
private static void Eplan21Macro()
{
	Import oImport = new Import();
	string strE21MacroFile = @"C:\Programme\EPLAN\EPLAN 21\Macros\EPLAN\ESS_Sample_Project.ez";
	string strDestinationFile = PathMap.SubstitutePath("$(MD_MACROS)") + "\\ESS_Sample_Project.elk;
	oImport.Eplan21Macro(strE21MacroFile, strDestinationFile);
}
</code></example>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       import cannot be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during macro import.
                                Please refer to the
                                exception message. </exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.PXFProject(System.String,System.String)">
            <summary>
Creates a project from an imported PXF file.
</summary>
            <param name="strPXFFilePath">Full file name of the PXF
                             \file to import.</param>
            <param name="strDestinationPath">Destination directory. If
                                 an empty string is set to
                                 this parameter, the
                                 standard project directory
                                 will be used.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the PXF file or
                                    the destination path
                                    does not exist.</exception>
            <exception cref="!:SecurityException">Missing rights for
                                    the file system.</exception>
            <exception cref="!:ArgumentNullException">A null reference was
                                        set to a parameter.</exception>
            <exception cref="!:ApplicationException">An internal
                                       interface necessary
                                       for the import could
                                       not be created.</exception>
            <exception cref="!:NotSupportedException">A path contains
                                        invalid characters. </exception>
            <exception cref="!:PathTooLongException">Invalid path.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please refer to the
                                system messages for
                                further information.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Eplan21Project(System.String,System.String,System.Boolean)">
            <summary>
This method either converts an EPLAN 21 project from EASY
format (*.prj) to an EPLAN project (*.elk) or it converts all
projects in an EPLAN 21 archive (*.ez) into EPLAN projects in
the destination path.
</summary>
            <param name="strSourceFile">Full file name of the EPLAN
                              21 project or archive file.</param>
            <param name="strDestinationPath">Target directory and name
                                 of the new project without
                                 extension(This project can not be opened).
								Example\: If a
                                 project with name
                                 ImportedE21Project should
                                 be saved under
                                 "D\:\\Eplan\\Projects", you
                                 have to set strDestination
                                 to @"D\:\\Eplan\\Projects\\ImportedE21Project"
                                 The directory must already
                                 exist.</param>
            <param name="bVerify">Check run. If set to true,
                      after import a check run
                      will be started for the
                      imported projects. The last
                      used scheme will be used 
					  which is currently set in GUI.
                      </param>
            <example>
The following examples shows a method to import a EPLAN21 project file.

<code lang="C#">
private static void Eplan21Project()
{
	Import oImport = new Import();
	string strE21ProjectFile = @"C:\Programme\EPLAN\EPLAN 21\Projects\EPLAN\ESS_Sample_Project.ez";
	string strDestinationPath = PathMap.SubstitutePath("$(MD_PROJECTS)");
	oImport.Eplan21Project(strE21ProjectFile, strDestinationPath, false);
}
</code></example>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the EPLAN 21
                                    project or the
                                    destination path does
                                    not exist.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       or action necessary
                                       for the import cannot
                                       be created. A reason
                                       for this could be the
                                       lack of necessary
                                       rights or licenses.</exception>
            <exception cref="!:BaseException">An error occurred
                                during project
                                import. Refer to the
                                system messages for
                                further information</exception>
            <exception cref="!:InvalidOperationException">Throw in case of destination project is already opened</exception>
            <remarks>
There are some settings that need to be set before doing import. 
For more informations please see EPLAN Electric P8 Help, chapter: 
EPLAN P8-&gt;Data Transfer from EPLAN 21-&gt;Data Transfer from EPLAN 21-&gt;
Data Transfer from EPLAN 21:Proceed as Follows-&gt;Transferring Projects from EPLAN 21
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Eplan5Project(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Imports a native EPLAN 5 project and creates a new EPLAN
project.
</summary>
            <param name="strEplan5ProjectPath">EPLAN 5 project
                                   (directory) to import.</param>
            <param name="strDestinationPath">If strEplan5ProjectPath parameter contains "EPLAN4\\P" (e.q. "C:\\EPLAN4\\P\\SOMEPROJECT") then such a directory (strDestinationPath) will be created and project will be imported there. Project name will be the same as EPLAN 5 project name.
If strEplan5ProjectPath parameter doesn't contain "EPLAN4\\P", then project will be imported and strDestinationPath will be treated as full project path.
                                 </param>
            <param name="strCodePage">Code page.</param>
            <param name="strMasterDataDrive">EPLAN 5 master data
                                 drive (e.g. C\:).</param>
            <param name="bBalanceArticles">If set to true,
                               imported parts data
                               will be synchronized
                               with the parts
                               management.</param>
            <param name="bGenerateAutomaticCable">If set to true,
                                      automatic cable
                                      generation will be
                                      started after import.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    like if the EPLAN 5
                                    project or the
                                    destination path does
                                    not exist.</exception>
            <exception cref="!:ApplicationException">An action or internal
                                       interface for the
                                       import could not be
                                       created. A reason for
                                       this could be the
                                       lack of necessary
                                       rights or licenses.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please refer to the
                                system messages for
                                further information.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.DXFPage(System.String,System.String,System.String,Eplan.EplApi.HEServices.Transformation,System.String,System.Collections.ArrayList)">
            <summary>
Imports a DXF or DWG file into an existing page. You have the
possibility to move and scale the drawings.
</summary>
            <param name="strDXFFileName">Full file name of the CAD
                             drawing to be imported.</param>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strPageName">Name of the page into which the CAD
                    drawing will be placed.</param>
            <param name="oTransformation">Information about the scaling
                              and the insertion point on the
                              page.</param>
            <param name="strScheme">Name of the scheme used for
                        the import.</param>
            <param name="importedPlacements">An ArrayList that is filled with
                        imported Placement objects.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:SecurityException">Access rights to the
                                    \file system are
                                    missing.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       import cannot be
                                       created.</exception>
            <exception cref="!:NotSupportedException">An argument
                                        contained invalid
                                        characters, e.g. a
                                        path contained a
                                        '\:'. </exception>
            <exception cref="!:PathTooLongException">Invalid path.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please refer to the
                                exception message. </exception>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings for DXF import are set in this scheme. If you pass an
empty string to "strScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, an
exception will be thrown.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.DXFPage(System.String,System.String,System.String,Eplan.EplApi.HEServices.Transformation,System.String)">
            <summary>
Imports a DXF or DWG file into an existing page. You have the
possibility to move and scale the drawings.
</summary>
            <param name="strDXFFileName">Full file name of the CAD
                             drawing to be imported.</param>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strPageName">Name of the page into which the CAD
                    drawing will be placed.</param>
            <param name="oTransformation">Information about the scaling
                              and the insertion point on the
                              page.</param>
            <param name="strScheme">Name of the scheme used for
                        the import.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:SecurityException">Access rights to the
                                    \file system are
                                    missing.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       import cannot be
                                       created.</exception>
            <exception cref="!:NotSupportedException">An argument
                                        contained invalid
                                        characters, e.g. a
                                        path contained a
                                        '\:'. </exception>
            <exception cref="!:PathTooLongException">Invalid path.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please refer to the
                                exception message. </exception>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings for DXF import are set in this scheme. If you pass an
empty string to "strScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, an
exception will be thrown.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.DXFPage(System.String,Eplan.EplApi.DataModel.Page,Eplan.EplApi.HEServices.Transformation,System.String,System.Collections.ArrayList)">
            <summary>
Imports a DXF or DWG file into an existing page. You have the
possibility to move and scale the drawings.
</summary>
            <param name="strDXFFileName">Full file name of the CAD
                             drawing to be imported.</param>
            <param name="oPage">Page into which the CAD
                    drawing will be placed.</param>
            <param name="oTransformation">Information about the scaling
                              and the insertion point on the
                              page.</param>
            <param name="strScheme">Name of the scheme used for
                        the import.</param>
            <param name="importedPlacements">An ArrayList that is filled with
                        imported Placement objects.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:SecurityException">Access rights to the
                                    \file system are
                                    missing.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       import cannot be
                                       created.</exception>
            <exception cref="!:NotSupportedException">An argument
                                        contained invalid
                                        characters, e.g. a
                                        path contained a
                                        '\:'. </exception>
            <exception cref="!:PathTooLongException">Invalid path.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please refer to the
                                exception message. </exception>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings for DXF import are set in this scheme. If you pass an
empty string to "strScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, an
exception will be thrown.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.DXFPage(System.String,Eplan.EplApi.DataModel.Page,Eplan.EplApi.HEServices.Transformation,System.String)">
            <summary>
Imports a DXF or DWG file into an existing page. You have the
possibility to move and scale the drawings.
</summary>
            <param name="strDXFFileName">Full file name of the CAD
                             drawing to be imported.</param>
            <param name="oPage">Page into which the CAD
                    drawing will be placed.</param>
            <param name="oTransformation">Information about the scaling
                              and the insertion point on the
                              page.</param>
            <param name="strScheme">Name of the scheme used for
                        the import.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:SecurityException">Access rights to the
                                    \file system are
                                    missing.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a
                                        parameter.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for the
                                       import cannot be
                                       created.</exception>
            <exception cref="!:NotSupportedException">An argument
                                        contained invalid
                                        characters, e.g. a
                                        path contained a
                                        '\:'. </exception>
            <exception cref="!:PathTooLongException">Invalid path.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.
                                Please refer to the
                                exception message. </exception>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings for DXF import are set in this scheme. If you pass an
empty string to "strScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, an
exception will be thrown.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Import.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Import">
            <summary>
Class for importing different sorts of external data. The
EPLAN P8 API provides means to import PXF, DXF, and DWG
files. Additionally EPLAN 5 can be imported. 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Transformation.m_dOffsetY">
            <summary>
Verschiebung Y
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Transformation.m_dOffsetX">
            <summary>
Verschiebung X
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Transformation.m_dScaleY">
            <summary>
Skalierung y
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Transformation.m_dScaleX">
            <summary>
Skalierung X
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Transformation.YOffset">
            <summary>
Set offset in y-direction
</summary>
            <param name="dYOffset">Offset in y-direction</param>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Transformation.XOffset">
            <summary>
Set offset in x-direction
</summary>
            <param name="dXOffset">Offset in x-direction</param>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Transformation.YScale">
            <summary>
Set scaling in y-direction
</summary>
            <param name="dScaleY">Scaling in y-direction</param>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Transformation.XScale">
            <summary>
Set scaling in x-direction
</summary>
            <param name="dScaleX">Scaling in x-direction</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Transformation.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Transformation">
            <summary>
Class to determine displacement and scaling of objects (used
for methods of the Import class). 
<example>The following example shows how to use class Import.
<code lang="cs" source="P8_API_Example_HEServices_Import_Example1.cs.txt" /></example></summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.InterpretAutomatically(Eplan.EplApi.DataModel.E3D.Placement3D,System.String[],System.Boolean)">
            <summary>
Starts automatic interpretation.
</summary>
            <param name="oTarget">3D placement for which automatic interpretation willl be started. Cannot be <c>null</c>.</param>
            <param name="arrMacrosToSearchForBestMach">Array of paths to macros from which the best mathing one will be searched for.</param>
            <param name="bShowBestMachDlg">Show best match dialog if true. In other case method selects best match automatically.</param>
            <example>Following example shows how to use the method: 
<code lang="cs" source="P8_API_Example_HEServices_Placement3DService_Example2.cs.txt" /></example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.InterpretAutomatically(Eplan.EplApi.DataModel.E3D.Placement3D,Eplan.EplApi.DataModel.E3D.Placement3D[],System.Boolean)">
            <summary>
Starts automatic interpretation.
</summary>
            <param name="oTarget">3D placement for which automatic interpretation willl be started. Cannot be <c>null</c>.</param>
            <param name="arrSourcesToSearchForBestMach">Array of Placement3D objects from which the best mathing one will be searched for.</param>
            <param name="bShowBestMachDlg">Show best match dialog if true. In other case method selects best match automatically.</param>
            <example>Following example shows how to use the method: 
<code lang="cs" source="P8_API_Example_HEServices_Placement3DService_Example1.cs.txt" /></example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.CreateMountingSurface(Eplan.EplApi.DataModel.E3D.Function3D,Eplan.EplApi.Base.PointD3D[],System.Windows.Media.Media3D.Vector3D,System.Boolean)">
            <summary>
Creates mounting surface for the face identified by points and normal vector.
</summary>
            <example>Example shows how to create new mounting surface based on position of given mates.
<code lang="cs" source="P8_API_Example_HEService_Placement3DService_CreateMountingSurface.cs.txt" /></example>
            <param name="pFunction3D">3D function for which mounting surface will be created. Cannot be <c>null</c>.</param>
            <param name="oFacePoints">Points of face of Function3D mesh.</param>
            <param name="oDirection">Normal vector for face of Function3D mesh.</param>
            <param name="bCombineSurfaces">Combines coplanar surfaces when true.</param>
            <returns>Mounting surface.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.GetDrillingsFromDrillingPattern(Eplan.EplApi.DataModel.E3D.Placement3D)">
            <summary>
Returns drilling objects which are generated based on drilling pattern assigned to 3d placement part.
</summary>
            <remarks>
Method generates transient drilling objects. Number, type and location of drillings depends on two things.
First is the drilling pattern assigned to part of 3D placement. Other are location on parent. In places where placement doesn't
have contact with parent drills are not created.
</remarks>
            <example>Example below prints out to consol basic information about drillings from drilling pattern:
<code lang="cs" source="P8_API_Example_HEService_Placement3DService_GetDrillingsFromDrillingPattern.cs.txt" /></example>
            <param name="pPlacement">3D placement for which drilling objects will be generated. Can't be <c>null</c>.</param>
            <returns>Array of generated drilling objects or empty array.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameter is <c>invalid</c>.</exception>
            <exception cref="T:System.ApplicationException">The functionality is not available.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.CheckIfPlacementsCollide(Eplan.EplApi.DataModel.E3D.Placement3D,Eplan.EplApi.DataModel.E3D.Placement3D,System.Boolean,System.Boolean)">
            <summary>
Checks whether two 3d objects collides each other.
</summary>
            <param name="pPlacementA">First of 3d placements used to check collision. Can't be <c>null</c>.</param>
            <param name="pPlacementB">Second of 3d placements used to check collision. Can't be <c>null</c>.</param>
            <param name="bConsiderMountingClearance">Use mounting clearances for checking collisions.</param>
            <param name="bExcludeAllowedCollisions">If true, collisions which are allowed are not reported.</param>
            <returns>
Returns <c>true</c> if a collision between two objects is found.
</returns>
            <remarks>
                <para>
Method checks whether two objects collides each other. This is done by checking if bounding boxes of these objects don't share common space and if they do then the check is done using their meshes.
</para>
                <para>
In some cases collisions between two objects are allowed. This happens due to inaccuracy of some meshes and is acceptable for example in case of a terminal on a rail.
Parameter <c>bExcludeAllowedCollisions</c> helps to control whether such collisions should be reported or not.
</para>
                <para>
Many objects in layout space represents only logical instances without meshes. For example Cabinet or Plane are one of such objects.
In this case, collision with these objects will not be reported.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when necessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The functionality is not available.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.CreatePlacementArea(Eplan.EplApi.DataModel.E3D.Placement3D,System.Windows.Media.Media3D.Vector3D,Eplan.EplApi.Base.PointD3D)">
            <summary>
Creates or redefines the placement area of Placement3D.
</summary>
            <param name="pPlacement3D">Placement of which placement area will be changed. Can't be <c>null</c>.</param>
            <param name="vDirection">Vector normal to placement area plane which will be created.</param>
            <param name="oPoint">The point that the plane will intersect.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when necessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The functionality is not available.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.RotatePlacementArea(Eplan.EplApi.DataModel.E3D.Placement3D,System.Double)">
            <summary>
Rotates placement area about normal vector.
</summary>
            <param name="pPlacement3D">Placement of which placement area will be changed. Can't be <c>null</c>.</param>
            <param name="dAngle">Angle in radians by which placement area will be rotated.</param>
            <remarks>
Axis of rotation passes through location of first source mate of given Placement3D.
</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when necessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The functionality is not available.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.TurnAroundPlacementArea(Eplan.EplApi.DataModel.E3D.Placement3D)">
            <summary>
Redefines placement area in the same place but with normal vector in opposite direction.
</summary>
            <param name="pPlacement3D">Placement of which placement area will be changed. Can't be <c>null</c>.</param>
            <returns>
Returns <c>true</c> if operation was successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when necessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The functionality is not available.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.MovePlacementArea(Eplan.EplApi.DataModel.E3D.Placement3D,System.Double)">
            <summary>
Moves placement area toward the axis of the normal vector of placement area.
</summary>
            <param name="pPlacement3D">Placement of which placement area will be changed. Can't be <c>null</c>.</param>
            <param name="dOffset">The distance the object is moved. If negative the shift will be done in opposite direction.</param>
            <returns>
Returns <c>true</c> if operation was successful.
</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when necessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The functionality is not available.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Placement3DService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Placement3DService">
            <summary> 
Class for editing Placement3D objects.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.CreateFunctions(Eplan.EplApi.DataModel.Project)">
            <summary>
Creates topology functions that are connected to structure routing fulcrums.
</summary>
            <param name="pProject">
                <see text="Project" cref="T:Eplan.EplApi.DataModel.Project" /> for which functions will be created.
</param>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.UpdateSegmentsFilling(System.String)">
            <summary>
Calculates and sets value of property CABLINGSEGMENT_FILLING for all segments in project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project, which contains
the page to export.</param>
            <returns>
                <c>True</c> if no propblem was found during calculation.
</returns>
            <exception cref="T:System.ArgumentNullException">If parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If project not exists.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.UpdateSegmentsFilling(Eplan.EplApi.DataModel.Project)">
            <summary>
Calculates and sets value of property CABLINGSEGMENT_FILLING for all segments in project.
</summary>
            <param name="pProject">
                <see text="Project" cref="T:Eplan.EplApi.DataModel.Project" /> for which calculation will be done.
</param>
            <returns>
                <c>True</c> if no propblem was found during calculation.
</returns>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.CollectConnections(Eplan.EplApi.DataModel.Project,System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.StorableObject})">
            <summary>
Finds or creates topology connections for given elements.
</summary>
            <param name="colObjects">
Collection of regular connections and functions for which topology connections will be found. Can't be <c>null</c>.
</param>
            <param name="pProject">
                <see text="Project" cref="T:Eplan.EplApi.DataModel.Project" /> for which connections will be found and create.
</param>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to find connections. Please refer to the error message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An internal error occurred
                                during finding or creating the connections.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.GetConnecions(Eplan.EplApi.DataModel.Project,System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.StorableObject})">
            <summary>
Finds or creates topology connections for given elements.
</summary>
            <param name="colObjects">
Collection of regular connections and functions for which topology connections will be found. Can't be <c>null</c>.
</param>
            <param name="pProject">
                <see text="Project" cref="T:Eplan.EplApi.DataModel.Project" /> for which connections will be found and create.
</param>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to find connections. Please refer to the error message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An internal error occurred
                                during finding or creating the connections.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.RouteConnections(System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.Topology.RoutedConnection},Eplan.EplApi.DataModel.Topology.Segment,System.Boolean)">
            <summary>
Routes given topology connections using pointed segment.
</summary>
            <param name="colConnections">
Collection of topology connections which will be routed. Can't be <c>null</c>. Input parameter.
</param>
            <param name="pSegment">
segment through which all connection from <c>colConnections</c> routed.
</param>
            <param name="bShowRoutedConnections">
If <c>true</c> routed connection are shown in the GED.
</param>
            <remarks>
                <para>If topology connection has a starting and ending symbol references on a one page, but one or both those <see text="SymbolReferences" cref="T:Eplan.EplApi.DataModel.SymbolReference" />
are not connected by segment to existing topology and this connection can be routed over this topology, then a new segments are created to complete the path. 
New segment is connected to the nearest routing point.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to route connections. Please refer to the error message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An internal error occurred
                                during routing.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.RouteConnections(System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.Topology.RoutedConnection},System.Boolean)">
            <summary>
Routes given topology connections.
</summary>
            <param name="colConnections">
Collection of topology connections which will be routed. Can't be <c>null</c>. Input parameter.
</param>
            <param name="bShowRoutedConnections">
If <c>true</c> routed connection are shown in the GED.
</param>
            <remarks>
                <para>If topology connection has a starting and ending symbol references on a one page, but one or both those <see text="SymbolReferences" cref="T:Eplan.EplApi.DataModel.SymbolReference" />
are not connected by segment to existing topology and this connection can be routed over this topology, then a new segments are created to complete the path. 
New segment is connected to the nearest routing point.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to route connections. Please refer to the error message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An internal error occurred
                                during routing.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.RouteConnections(Eplan.EplApi.DataModel.Project,System.Boolean)">
            <summary>
Routes topology connections between all function with representation type <see text="Topology" cref="F:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType.Topology" />
by existing segments in given project.
</summary>
            <param name="pProject">
                <see text="Project" cref="T:Eplan.EplApi.DataModel.Project" /> which connections will be routed.
</param>
            <param name="bShowRoutedConnections">
If <c>true</c> routed connection are shown in the GED.
</param>
            <remarks>
                <para>If topology connection has a starting and ending symbol references on a one page, but one or both those <see text="SymbolReferences" cref="T:Eplan.EplApi.DataModel.SymbolReference" />
are not connected by segment to existing topology and this connection can be routed over this topology, then a new segments are created to complete the path. 
New segment is connected to the nearest routing point.</para>
                <para>If on one page lie two elements which have a regular connection a topology connection will be created for them.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to route connections. Please refer to the error message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An internal error occurred
                                during routing.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.UpdateTopologySegment(Eplan.EplApi.DataModel.Topology.Segment)">
            <summary>
Updates start and end position of a segment.
</summary>
            <param name="pSegment">
                <see text="Segment" cref="T:Eplan.EplApi.DataModel.Topology.Segment" /> which will be updated.
</param>
            <remarks>Method sets correct start and end positions for a <see text="Segment" cref="T:Eplan.EplApi.DataModel.Topology.Segment" />.
A position on one site of segment is updated only if a <see text="SymbolReference" cref="T:Eplan.EplApi.DataModel.SymbolReference" /> is assigned to this side.
</remarks>
            <exception cref="T:System.ArgumentNullException">Parameter <c>pSegment</c> was set to <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to update the segment. Please refer to the error message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An internal error occurred
                                during update.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.UpdatePage(Eplan.EplApi.DataModel.Page)">
            <summary>
Updates start and end position of all segment elements found on a page.
</summary>
            <param name="pPage">
                <see text="Page" cref="T:Eplan.EplApi.DataModel.Page" /> on which segments will be updated.
</param>
            <remarks>
                <para>Method sets correct start and end positions for each found <see text="Segment" cref="T:Eplan.EplApi.DataModel.Topology.Segment" />.
A position on one site of segment is updated only if a <see text="SymbolReference" cref="T:Eplan.EplApi.DataModel.SymbolReference" /> is assigned to this side.
</para>
                <para>
If this method will find more then just one segment which connect same two devices, it will remove duplicated segments and leave only one.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Parameter <c>pPage</c> was set to <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Failed to update the page. Please refer to the error message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An internal error occurred
                                during update.
                                Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TopologyService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.TopologyService">
            <summary> 
Class providing functionality for working with topology.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Restore.MasterData(System.String,System.String)">
            <summary>
Restore master data from archive files.
</summary>
            <param name="strArchivename">Name of the archive to be
                             restored.</param>
            <param name="strRestorePath">Path into which the projects
                             will be restored.</param>
            <remarks>
If the master data to restore already exist, they will not be
overwritten.
</remarks>
            <exception cref="!:BaseException">An error occurred,
                                when restoring master
                                data.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for restore could not
                                       be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Restore.Project(System.Collections.Specialized.StringCollection,System.String,System.String,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
Restore projects from archive files.
</summary>
            <param name="strColArchivenames">Collection of archive file
                                 names (.zw1 files) to be
                                 restored.</param>
            <param name="strRestorePath">Path into which the
                             projects will be restored.</param>
            <param name="strProjectName">If only ONE project should
                             be restored, the name of
                             the target project must be
                             set in this parameter. (If
                             more than one project is
                             restored, i.e. the file
                             specified in
                             strColArchivenames contains
                             more than one entry,the
                             names of the target
                             projects will be created
                             from the names in the
                             archive file).</param>
            <param name="bUnpackProjects">Set this flag to false
                              normally. Only set the
                              attribute to true, if you
                              want to unpack a packed
                              project. This is a special
                              case for the project
                              management\: If true, in
                              strCollArchivenames not
                              archive names, but project
                              link file names were
                              passed; the restore method
                              in this case creates the
                              archive names from the
                              project names.</param>
            <param name="bQuietMode">If set to true, no summary
                         dialog will be shown at the
                         end of the backup process.
                         (Else a message box
                         (decider) with the restore
                         results for all projects
                         will be shown).</param>
            <param name="nMode">If set to 1, project information file (ProjectInfo.xml)
                         will be also restored.</param>
            <remarks>
If the project to restore already exists, it will be
overwritten.


</remarks>
            <exception cref="!:BaseException">An error occurred
                                while restoring the
                                project.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for restore could not
                                       be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Restore.Project(System.Collections.Specialized.StringCollection,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Restore projects from archive files.
</summary>
            <param name="strColArchivenames">Collection of archive file
                                 names (.zw1 files) to be
                                 restored.</param>
            <param name="strRestorePath">Path into which the
                             projects will be restored.</param>
            <param name="strProjectName">If only ONE project should
                             be restored, the name of
                             the target project must be
                             set in this parameter. (If
                             more than one project is
                             restored, i.e. the file
                             specified in
                             strColArchivenames contains
                             more than one entry,the
                             names of the target
                             projects will be created
                             from the names in the
                             archive file).</param>
            <param name="bUnpackProjects">Set this flag to false
                              normally. Only set the
                              attribute to true, if you
                              want to unpack a packed
                              project. This is a special
                              case for the project
                              management\: If true, in
                              strCollArchivenames not
                              archive names, but project
                              link file names were
                              passed; the restore method
                              in this case creates the
                              archive names from the
                              project names.</param>
            <param name="bQuietMode">If set to true, no summary
                         dialog will be shown at the
                         end of the backup process.
                         (Else a message box
                         (decider) with the restore
                         results for all projects
                         will be shown).</param>
            <remarks>
If the project to restore already exists, it will be
overwritten.

ProjectInfo.xml will be restored always.


</remarks>
            <exception cref="!:BaseException">An error occurred
                                while restoring the
                                project.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for restore could not
                                       be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Restore.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Restore.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Restore.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Restore">
            <summary>
Class providing functionality to restore backups of projects
or master data.
</summary>
            <remarks>
Restored project is automatically upgraded to the currently used EPLAN version.
</remarks>
            <example>
Following example shows how to use Restore class. <code lang="cs" source="P8_API_Example_HEServices_Restore_Example1.cs.txt" /></example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.GenerateCustomDrillingPatternsRittalAutomation(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection,System.String,System.Int32@)">
            <summary>
Generating Drilling Patterns from NC files.
</summary>
            <remarks>
                <para>
The import of drilling information from Rittal Automation NC files encompasses the files with file extensions: <c>*.PBT</c>, <c>*.PVB</c> and <c>*.PKU</c>.
</para>
                <para>
With this method only drilling patterns for individual items can be generated, not however complete mounting panels from RittalAutomation item files (*.PBT or *.PVB).
</para>
                <para>
A user-defined outline is created from a Rittal Automation outline file (*.PKU). A "NC Rittal Automation" record is already assigned to this outline. After the import you create a drilling pattern with drill type "User-defined outline" that uses the outline created by the import of the PKU file in the parts management.
</para>
                <para>
This method uses a scheme called <c>Standard</c> when exporting the Rittal Automation NC data.
</para>
            </remarks>
            <param name="oProject">Project from which data to macro will be taken. Can't be <c>null</c>.</param>
            <param name="oFileNames">List of full paths to Rittal Automation NC files used to import data. Only files with extensions: <c>*.PBT</c>, <c>*.PVB</c> and <c>*.PKU</c> are used. Can't be <c>null</c>.</param>
            <param name="strOutputDirectory">Output directory for user defined contours. If <c>null</c> or <c>empty</c> by default <c>$MD_MACROS</c> is used. If directory is passed then it must exists.</param>
            <param name="nCountoursImported">(Ref) Number of generated user defined contours files.</param>
            <returns>
Number of drilling patters added to system database.
</returns>
            <exception cref="T:System.ArgumentNullException">If any needed parameter is <c>null</c> or <c>empty</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Internal interface for master data could not be created. Please check if ProPanel addon is installed and current license gives rights to use it.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.GenerateCustomDrillingPatternsKiesling(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection,System.String,System.Int32@)">
            <summary>
Generating Drilling Patterns from NC files.
</summary>
            <remarks>
                <para>
The import of drilling information from Kiesling NC files encompasses the files with file extensions: <c>*.PBT</c>, <c>*.PVB</c> and <c>*.PKU</c>.
</para>
                <para>
With this method only drilling patterns for individual items can be generated, not however complete mounting panels from Kiesling item files (*.PBT or *.PVB).
</para>
                <para>
A user-defined outline is created from a Kiesling outline file (*.PKU). A "NC Kiesling" record is already assigned to this outline. After the import you create a drilling pattern with drill type "User-defined outline" that uses the outline created by the import of the PKU file in the parts management.
</para>
                <para>
This method uses a scheme for the Kiesling NC machinethe called <c>Standard</c> when exporting the Kiesling NC data.
</para>
            </remarks>
            <param name="oProject">Project from which data to macro will be taken. Can't be <c>null</c>.</param>
            <param name="oFileNames">List of full paths to Kiesling NC files used to import data. Only files with extensions: <c>*.PBT</c>, <c>*.PVB</c> and <c>*.PKU</c> are used. Can't be <c>null</c>.</param>
            <param name="strOutputDirectory">Output directory for user defined contours. If <c>null</c> or <c>empty</c> by default <c>$MD_MACROS</c> is used. If directory is passed then it must exists.</param>
            <param name="nCountoursImported">(Ref) Number of generated user defined contours files.</param>
            <returns>
Number of drilling patters added to system database.
</returns>
            <exception cref="T:System.ArgumentNullException">If any needed parameter is <c>null</c> or <c>empty</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Internal interface for master data could not be created. Please check if ProPanel addon is installed and current license gives rights to use it.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.GenerateMacrosFrom3DData(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection)">
            <summary>
Generates 3d macros from step files.
</summary>
            <param name="oProject">Project from which data to macro will be taken.</param>
            <param name="oFileNames">List of full paths to step files from which macros will be created.</param>
            <remarks>
                <para>This functionality is available only when ProPanel addon is installed and current license gives rights to use this addon.</para>
                <para>Macros are generated to <c>$(MD_MACROS)</c> directory. Every created file has the same name as step file with exension <c>.ema</c>.
If in output directory exists file with the same name as generated file then the old file is overwritten.</para>
            </remarks>
            <returns>
                <c>True</c> if generation of all macros is successful, or <c>false</c> if something went wrong.</returns>
            <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If any parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Internal interface for master data could not be created. Please check if ProPanel addon is installed and current license gives rights to use it.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.GenerateMacrosFromMacroProject(System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.StorableObject},System.String,System.String,System.Boolean)">
            <summary>
Generate macros from collection of objects with macro definition.
</summary>
            <param name="colObjects">Collection of objects with macro definition.</param>
            <param name="strWindowMacroDirectory">Specifies output directory for window macros. If empty or null default macro directory is used.</param>
            <param name="strPageMacroDirectory">Specifies output directory for window macros. If empty or null default macro directory is used.</param>
            <param name="bOverwriteExistingMacros">If the output file already exists specifies wheather it should be overwritten.</param>
            <example>The following examples shows how to use method GenerateMacrosFromMacroProject.
	<code lang="cs" source="P8_API_Example_HEServices_MasterData_GenerateMacros_Example4.cs.txt" /></example>
            <exception cref="T:System.ArgumentNullException">A parameter was set to a null reference.</exception>
            <exception cref="T:System.ArgumentException">Parameters are invalid, e.g. collection of objects is empty.</exception>
            <exception cref="T:System.ApplicationException">Internal interface for master data could not be created.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Macros cannot be exported.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.GenerateMacrosFromMacroProject(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean)">
            <summary>
    Generate macros from project. Project must have property "Type of project" set to "Macro project".
</summary>
            <param name="oProject">Project from which the macros will be generated.</param>
            <param name="strWindowMacroDirectory">Specifies output directory for window macros. If empty or null default macro directory is used.</param>
            <param name="strPageMacroDirectory">Specifies output directory for window macros. If empty or null default macro directory is used.</param>
            <param name="strFilterScheme">Speficies filter scheme. If empty or null no filter is used.</param>
            <param name="bOverwriteExistingMacros">If the output file already exists specifies wheather it should be overwritten.</param>
            <example>The following examples shows how to use method GenerateMacrosFromMacroProject.
	<code lang="cs" source="P8_API_Example_HEServices_MasterData_GenerateMacros_Example1.cs.txt" /></example>
            <example>
                <code lang="cs" source="P8_API_Example_HEServices_MasterData_GenerateMacros_Example2.cs.txt" />
            </example>
            <example>
                <code lang="cs" source="P8_API_Example_HEServices_MasterData_GenerateMacros_Example3.cs.txt" />
            </example>
            <exception cref="T:System.ArgumentNullException">A parameter was set to a null reference.</exception>
            <exception cref="T:System.ArgumentException">Parameters are invalid, e.g. given project name doesn't exist.</exception>
            <exception cref="T:System.ApplicationException">Internal interface for master data could not be created.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Macros cannot be exported.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Used filter scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.GenerateMacrosFromMacroProject(Eplan.EplApi.DataModel.Project)">
            <summary>
    Generate macros from project. Project must have property "Type of project" set to "Macro project".
</summary>
            <param name="oProject">Project from which the macros
                       will be generated.</param>
            <exception cref="!:ArgumentNullException">
	A parameter was set to a null reference.
</exception>
            <exception cref="!:ArgumentException">
	Parameters are invalid, e.g. given project name doesn't exist.
</exception>
            <exception cref="!:ApplicationException">
	Internal interface for master data could not be created.
</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
    Macros cannot be exported.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.GenerateMacrosFromMacroProject(System.String)">
            <summary>
    Generate macros from project. Project must have property "Type of project" set to "Macro project".
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project from which the macros
                             will be generated.
</param>
            <exception cref="!:ArgumentNullException">
	A parameter was set to a null reference.
</exception>
            <exception cref="!:ArgumentException">
	Parameters are invalid, e.g. given project name doesn't exist.
</exception>
            <exception cref="!:ApplicationException">
	Internal interface for master data could not be created.
</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
    Macros cannot be exported.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.AddToSystemEx(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection)">
            <summary>
Extendent function for coping stored project master data into the system master data
pool.
</summary>
            <param name="oProject">Project from which the data
                       will be copied.</param>
            <param name="masterDataFiles">List of project master data
                              files names to be copied.
Files to add must exist in project library.
</param>
            <returns>
 Hashtable object with collection of errors. Key is a filename (as String) which was passed to <c>masterDataFiles</c>
  and value is a exception object (based on System::Exception).
  If all elements was processed correctly returned hastable is empty.
</returns>
            <exception cref="!:ArgumentNullException">
	A parameter was set to a null reference.
</exception>
            <exception cref="!:ArgumentException">
	Parameters are invalid, e.g. one (or more) of given file name(s) doesn't exist in project library.
</exception>
            <exception cref="!:ApplicationException">
	Internal interface for master data could not be created.
</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
	Master data could not be copied to the system master data pool.
</exception>
            <exception cref="!:Eplan::EplApi::DataModel::InvalidOperationException">
	This exception might be returned for same item(s) when this item is correct
     but it cannot be processed because of other conditions.
     For example it is returned when masterdata database is locked for some items.
</exception>
            <exception cref="T:Eplan.EplApi.DataModel.OperationCanceledException">
    This exception might be returned for some item(s) when user cancel operation.
    In this version canceling operation by API is not available.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.AddToSystemEx(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
Copies stored project master data into the system master data pool.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project from which the data
                             will be copied.</param>
            <param name="masterDataFiles">List of project master data
                              files names to be copied.
	Files to add must exist in project library. 
</param>
            <returns>
 Hashtable object with collection of errors. Key is a filename (as String) which was passed to <c>masterDataFiles</c>
  and value is a exception object (based on System::Exception).
  If all elements was processed correctly returned hastable is empty.
</returns>
            <remarks>
	Given link to project is used by <see text="ProjectManager::OpenProject(System::String^)" cref="!:ProjectManager::OpenProject(System::String^strLinkFileName)" /> function.
	Exception provided by OpenProject() function may be also thrown.
</remarks>
            <exception cref="!:ArgumentNullException">
	A parameter was set to a null reference.
</exception>
            <exception cref="!:ArgumentException">
	Parameters are invalid, e.g. one (or more) of given file name(s) doesn't exist in project library.
</exception>
            <exception cref="!:ApplicationException">
	Internal interface for master data could not be created.
</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
	Master data could not be copied to the system master data pool.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.AddToProjectEx(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection)">
            <summary>
Method for storing system master data in the project.
</summary>
            <param name="oProject">Project into which the master
                       data will be copied.</param>
            <param name="masterDataFiles">List of master data files
                              names to be added to the
                              project. Files have to be
                              placed in special paths of
                              EPLAN P8 and no paths can be
                              used, only file names. These
                              paths are depended on files
                              types which are recognized
                              only by file name extension.
                              For example forms files, with
                              \file name extention '.f25',
                              have to be placed in directory
                              pointed by <see text="PathInfo::Forms" cref="P:Eplan.EplApi.DataModel.PathInfo.Forms" />
                              (also <see text="path substitution" cref="T:Eplan.EplApi.Base.PathMap" />
                              can be used with <c>$(MD_FORMS)</c>.</param>
TODO
What is a list of all file types which can be used here ?
<returns>
Hashtable object with collection of errors. Key is a filename
(as String) which was passed to <c>masterDataFiles</c> and
value is a exception object (based on System::Exception). If
all elements was processed correctly returned hastable is
empty.
</returns><exception cref="!:ArgumentNullException">A parameter was set
                                        to a null reference.</exception><exception cref="!:ArgumentException">\Parameters are
                                    invalid, e.g. the
                                    set project does not
                                    exist or is invalid.</exception><exception cref="!:ApplicationException">\Internal interface
                                       for master data
                                       could not be
                                       created. </exception><exception cref="T:Eplan.EplApi.Base.BaseException">Master data could
                                not be stored in the
                                project.</exception></member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.AddToProjectEx(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
Extented method for storing system master data in the project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             Project into which the master
                             data will be copied.</param>
            <param name="masterDataFiles">
List of master data files names to be added to the project.
Files have to be placed in special paths of EPLAN P8 and no paths can be used, only file names.
These paths are depended on files types which are recognized only by file name extension.
For example forms files, with file name extension '.f25', have to be placed
in directory pointed by <see text="PathInfo::Forms" cref="P:Eplan.EplApi.DataModel.PathInfo.Forms" />
(also <see text="path substitution" cref="T:Eplan.EplApi.Base.PathMap" /> can be used with <c>$(MD_FORMS)</c>.
TODO : What is a list of all file types which can be used here ?
</param>
            <returns>
 Hashtable object with collection of errors. Key is a filename (as String) which was passed to <c>masterDataFiles</c>
  and value is a exception object (based on System::Exception).
  If all elements was processed correctly returned hastable is empty.
</returns>
            <exception cref="!:ArgumentNullException">A parameter was set
                                        to a null reference.</exception>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid, e.g. the
                                    set project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for master data
                                       could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Master data could
                                not be stored in the
                                project.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Masterdata.SystemEntries">
            <summary>
Returns the file names of all master data in the system
master data pool.
</summary>
            <exception cref="!:ApplicationException">Internal interface
                                       for master data
                                       could not be created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">System master data
                                files could not be
                                returned correctly.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Masterdata.ProjectEntries(Eplan.EplApi.DataModel.Project)">
            <summary>
Returns the file names of all master data stored in the
project.
</summary>
            <param name="oProject">Project.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown, if the
                                    project is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for master data
                                       could not be created.
                                       </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Project master data
                                files could not be
                                returned correctly.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Masterdata.ProjectEntries(System.String)">
            <summary>
Returns the file names of all master data stored in the
project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project, of which the information will be read.</param>
            <remarks>
                <para>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
</para>
            </remarks>
            <exception cref="!:ArgumentNullException">A parameter was set
                                        to a null reference.</exception>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid, e.g. the
                                    project does not
                                    exist.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for master data
                                       could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Project master data could not be correctly determined..</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.CompleteProject(Eplan.EplApi.DataModel.Project)">
            <summary>
Method for completing project master data.
</summary>
            <param name="oProject">Project to be completed.</param>
            <exception cref="!:ArgumentNullException">A parameter was set
                                        to a null reference.</exception>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid, e.g. the
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for master data
                                       could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Project could not be completed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.UpdateProject(Eplan.EplApi.DataModel.Project)">
            <summary>
Method for updating project master data.
</summary>
            <param name="oProject">Project to be updated.</param>
            <exception cref="!:ArgumentNullException">A parameter was set
                                        to a null reference.</exception>
            <exception cref="!:ArgumentException">\Parameters are
                                    invalid, e.g. the
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for master data
                                       could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Project could not be updated.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Masterdata.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Masterdata">
            <summary>
Class providing master data functionalities such as updating
the master data in a project.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.MoveArticleReferenceProperties(Eplan.EplApi.DataModel.IArticleUser,System.Int32,Eplan.EplApi.DataModel.IArticleUser,System.Int32)">
            <summary>
Moves article reference properties to another index or to another object or both.
</summary>
            <remarks>
If the user still holds article reference objects which are affected by the change, or their internal object identifiers, they will get invalid after calling the method.
</remarks>
            <param name="oSource">
Source object
</param>
            <param name="nSourceIndex">
Source index
</param>
            <param name="oTarget">
Target object where article reference properties will be moved to.
</param>
            <param name="nTargetIndex">
Target index where article reference properties will be moved to.
</param>
            <seealso text="Eplan.EplApi.DataModel.FunctionPropertyList" cref="T:Eplan.EplApi.DataModel.FunctionPropertyList" />
            <seealso text="Eplan.EplApi.DataModel.ProjectPropertyList" cref="T:Eplan.EplApi.DataModel.ProjectPropertyList" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.DeleteStoredProperties(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Deletes stored properties from a project.
</summary>
            <param name="oProject">Project from which stored properties will be deleted.</param>
            <param name="strConfigScheme">Configuration scheme. If an
                              empty string is passed to the
                              parameter method will use scheme 
							  which is currently set in GUI.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for deleting stored properties
                                       could not be created. </exception>
            <exception cref="!:BaseException">An error occurred during deleting stored properties.
                                </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.DeleteStoredProperties(System.String,System.String)">
            <summary>
Deletes stored properties from a project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project from which properties should be deleted.</param>
            <param name="strConfigScheme">Configuration scheme. If an
                              empty string is passed to the
                              parameter method will use scheme 
							  which is currently set in GUI.</param>
            <remarks>
The specified project may be open or not. If the project was
not open, it will be opened for deleting stored properties and 
will be closed subsequently.
</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case if
                                    invalid arguments,
                                    e.g. an invalid
                                    project is set.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for deleting stored properties
                                       could not be created. </exception>
            <exception cref="!:BaseException">An error occurred during deleting stored properties.
								</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.MoveArticleReference(Eplan.EplApi.DataModel.ArticleReference,Eplan.EplApi.DataModel.IArticleUser,System.Int32)">
            <summary>
Moves ArticleReference to another index or to another object or both.
</summary>
            <remarks>
If the user still holds ArticleReference objects which are affected by the change, or their internal object identifiers, they will get invalid after calling the method.
</remarks>
            <param name="oSourceAR">
Article reference which defines source object and index
</param>
            <param name="oTarget">
Target object where ArticleReference will be moved to.
</param>
            <param name="nTargetIndex">
Target index where ArticleReference will be moved to.
</param>
            <returns>
Newly created ArticleReference.
</returns>
            <seealso text="Eplan.EplApi.DataModel.ArticleReference" cref="T:Eplan.EplApi.DataModel.ArticleReference" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.SumUpFunctionTemplates">
            <summary>
Performs summing up of function templates in the currently configured parts database.
</summary>
            <remarks>
* Summing up of function templates is entering function templates to an assembly
from the articles that the assembly consists of.
* This method is an equivalent of selecting the 'Extras / Sum up function templates' menu item
in the Parts Management dialog.
</remarks>
            <exception cref="!:ApplicationException">Internal interface
                                       for summing up function templates
                                       could not be created. </exception>
            <exception cref="!:BaseException">An error occurred during summing up function templates.
                                </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.IsPartsSelectionOnPartsDatabase(Eplan.EplApi.DataModel.Project,System.String@)">
            <summary>
Check if the user parts selection is set to parts database. 
</summary>
            <remarks>
This is configured in Settings: Project + Part selection dialog. Either the parts selection
is set to Project or user defined.
The additional setting is configured in User + Part selection dialog. 
</remarks>
            <returns>
true is the project's parts selection is set to user defined and the user parts selection is set to parts database. 
</returns>
            <param name="oProject">The project to check</param>
            <param name="strInfoForUser">[out] The info for a user where to change this setting</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.IsPartsSelectionOnProject(Eplan.EplApi.DataModel.Project,System.String@)">
            <summary>
Check if the project's parts selection is set to project.
</summary>
            <remarks>
This is configured in Settings: Part selection dialog. Either the parts selection
is set to Project or user defined.
</remarks>
            <returns>
true is the parts selection is set to project and not to user defined. 
</returns>
            <param name="oProject">The project to check</param>
            <param name="strInfoForUser">[out] The info for a user where to change this setting</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.UpgradePartsDb(System.String)">
            <summary>
Upgrades the part database to the latest format. 
</summary>
            <remarks>
The complete filename can contain pathmap variables.
The database upgrade needs exclusive access to the database. When its already opened,
the upgrade will fail.
Be careful, the upgrade cannot undone. When the database is a file, a backup is made, 
otherwise take care of your parts database and make a backup before.
</remarks>
            <param name="strPartsDatabase">Full file name to the database</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments
                                    (strPartsDatabase is
                                    not valid or file does not exist).</exception>
            <exception cref="!:BaseException">An error occurred
                                while upgrading parts database. P.E. when the
                                database is already open.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.SetSQLServerConnectionParameters(System.String,System.String,Eplan.EplApi.HEServices.PartsService.AuthenticationType,System.String,System.String,System.Boolean)">
            <summary>
Sets SQL connection parameters.
</summary>
            <remarks>
Changes will be done if current database type is set to SQL. 
Please take into account that calling the method changes PartsService.PartsDatabase property also.
</remarks>
            <param name="strServer">Server path</param>
            <param name="strDatabase">Database name</param>
            <param name="eAuthType">Authentication type: Windows authentication or SQL server</param>
            <param name="strUser">Database user name - used only when authentication type is SQL server.</param>
            <param name="strPassword">Database user's password - used only when authentication type is SQL server.</param>
            <param name="bRememberPass">Password remember.</param>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PartsService.PartsDatabase">
            <summary>
Returns or sets the complete filename of the current parts
database or connection string if SQL connection is selected.
</summary>
            <remarks>
The complete filename can contain pathmap variables. Note that password value in 
connection string is encrypted so You can use it when you don't have clear password (not encrypted). 
If You want to set parts database for SQL connection and you have clear password use 
<see text="SetSQLServerConnectionParameters" cref="M:Eplan.EplApi.HEServices.PartsService.SetSQLServerConnectionParameters(System.String,System.String,Eplan.EplApi.HEServices.PartsService.AuthenticationType,System.String,System.String,System.Boolean)" /></remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments
                                    (strPartsDatabase is
                                    not valid or file does not exist).</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PartsService.ActivePartsDatabase">
            <summary>
Returns or sets the type of current parts database. Possible values are PartsDatabaseType.SQL and PartsDatabaseType.Access
</summary>
            <remarks>
                <see text="SetSQLServerConnectionParameters" cref="M:Eplan.EplApi.HEServices.PartsService.SetSQLServerConnectionParameters(System.String,System.String,Eplan.EplApi.HEServices.PartsService.AuthenticationType,System.String,System.String,System.Boolean)" />
            </remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsListToSystem(System.String,System.String,System.String,Eplan.EplApi.HEServices.PartsService.ImportMode,System.Boolean,Eplan.EplApi.HEServices.PartsService.ImportIdentifier,System.String,System.Boolean)">
            <summary>
Imports part list to the system database.
</summary>
            <param name="strFilePath">Full file name</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.</param>
            <param name="mode">Import mode. The enumeration
                         <see text="ImportMode" cref="T:Eplan.EplApi.HEServices.PartsService.ImportMode" />
                         defines the supported
                         values. If an invalid value
                         is set, the value AppendNewRecords = 0 will be used.</param>
            <param name="bAdditionalLanguage">Specifies if multilanguage properties of records 
                         should be updated with another language rather then be replaced.</param>
            <param name="importIdentifier">Import Identifier. The enumeration
                         <see text="ImportIdentifier" cref="T:Eplan.EplApi.HEServices.PartsService.ImportIdentifier" />
                         defines the supported
                         values. </param>
            <param name="strFieldMappingScheme">Specifies a field mapping scheme. This parameter may be an empty string
						 in which case the scheme last used in GUI will be taken.</param>
            <param name="bCompactDatabase">When true the database is compacted after import. This requires exclusive access to the database.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while importing parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsListToSystem(System.String,System.String,System.String,Eplan.EplApi.HEServices.PartsService.ImportMode,System.Boolean,Eplan.EplApi.HEServices.PartsService.ImportIdentifier,System.String)">
            <summary>
Imports part list to the system database.
</summary>
            <param name="strFilePath">Full file name</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.</param>
            <param name="mode">Import mode. The enumeration
                         <see text="ImportMode" cref="T:Eplan.EplApi.HEServices.PartsService.ImportMode" />
                         defines the supported
                         values. If an invalid value
                         is set, the value AppendNewRecords = 0 will be used.</param>
            <param name="bAdditionalLanguage">Specifies if multilanguage properties of records 
                         should be updated with another language rather then be replaced.</param>
            <param name="importIdentifier">Import Identifier. The enumeration
                         <see text="ImportIdentifier" cref="T:Eplan.EplApi.HEServices.PartsService.ImportIdentifier" />
                         defines the supported
                         values. </param>
            <param name="strFieldMappingScheme">Specifies a field mapping scheme. This parameter may be an empty string
						 in which case the scheme last used in GUI will be taken.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while importing parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsListToSystem(System.String,System.String,System.String,Eplan.EplApi.HEServices.PartsService.ImportMode,System.Boolean,Eplan.EplApi.HEServices.PartsService.ImportIdentifier)">
            <summary>
Imports part list to the system database.
</summary>
            <param name="strFilePath">Full file name</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.</param>
            <param name="mode">Import mode. The enumeration
                         <see text="ImportMode" cref="T:Eplan.EplApi.HEServices.PartsService.ImportMode" />
                         defines the supported
                         values. If an invalid value
                         is set, the value AppendNewRecords = 0 will be used.</param>
            <param name="bAdditionalLanguage">Specifies if multilanguage properties of records 
                         should be updated with another language rather then be replaced.</param>
            <param name="importIdentifier">Import Identifier. The enumeration
                         <see text="ImportIdentifier" cref="T:Eplan.EplApi.HEServices.PartsService.ImportIdentifier" />
                         defines the supported
                         values. </param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while importing parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsListToSystem(System.String,System.String,System.String,Eplan.EplApi.HEServices.PartsService.ImportMode,System.Boolean)">
            <summary>
Imports part list to the system database.
</summary>
            <param name="strFilePath">Full file name</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.</param>
            <param name="mode">Import mode. The enumeration
                         <see text="ImportMode" cref="T:Eplan.EplApi.HEServices.PartsService.ImportMode" />
                         defines the supported
                         values. If an invalid value
                         is set, the value AppendNewRecords = 0 will be used.</param>
            <param name="bAdditionalLanguage">Specifies if multilanguage properties of records 
                         should be updated with another language rather then be replaced.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while importing parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsListToSystem(System.String,System.String,System.String,Eplan.EplApi.HEServices.PartsService.ImportMode)">
            <summary>
Imports part list to the system database.
</summary>
            <param name="strFilePath">Full file name</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.</param>
            <param name="mode">Import mode. The enumeration
                         <see text="ImportMode" cref="T:Eplan.EplApi.HEServices.PartsService.ImportMode" />
                         defines the supported
                         values. If an invalid value
                         is set, the value AppendNewRecords = 0 will be used.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while importing parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsListToSystem(System.String,System.String,System.String)">
            <summary>
Imports part list to the system database.
</summary>
            <param name="strFilePath">Full file name</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while importing parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsListToSystem(System.String,System.String)">
            <summary>
Imports part list to the system database.
</summary>
            <param name="strFilePath">Full file name</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while importing parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsListFromSystem(System.String,System.String,System.String,System.String)">
            <summary>
Exports parts data from the system's parts database.
</summary>
            <param name="strFilePath">Full output file name.</param>
            <param name="strConverter">
Converter long name, e.g: 'XPamExportXml'.
See <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.
</param>
            <param name="strSqlFilterPart">Sql filter for advanced
                               users. With this filter the
                               exported parts can be reduced
                               with a SQL statement. In
                               order to export complete
                               list, use filter equal to
                               "1=1" or call overloaded
                               method without this
                               parameter. To export one part
                               with a specified part number,
                               e.g. A001, set the
                               strSqlFilterPart to
                               "partnr='A001'"</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described 
in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred while
                                exporting parts data.</exception>
            <remarks>
In order to filter the output data you can provide
an SQL filter through the 'strSqlFilterPart' parameter.
The syntax is the same as the WHERE statement in regular SQL queries.

For parts, you can use any column name from the 'tblPart' table existing in your currently used parts
database (e.g.: 'manufacturer', 'productgroup' or 'typenr').
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsListFromSystem(System.String,System.String,System.String)">
            <summary>
Exports parts data from the system's parts database.
</summary>
            <param name="strFilePath">Full output file name.</param>
            <param name="strConverter">
Converter long name, e.g: 'XPamExportXml'.
See <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.
</param>
            <param name="strSqlFilterPart">Sql filter for advanced
                               users. With this filter the
                               exported parts can be reduced
                               with a SQL statement. In
                               order to export complete
                               list, use filter equal to
                               "1=1" or call overloaded
                               method without this
                               parameter. To export one part
                               with a specified part number,
                               e.g. A001, set the
                               strSqlFilterPart to
                               "partnr='A001'"</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred while
                                exporting parts data.</exception>
            <remarks>
In order to filter the output data you can provide
an SQL filter through the 'strSqlFilterPart' parameter.
The syntax is the same as the WHERE statement in regular SQL queries.

For parts, you can use any column name from the 'tblPart' table existing in your currently used parts
database (e.g.: 'manufacturer', 'productgroup' or 'typenr').
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsListFromSystem(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
Exports parts and other parts management items like addresses,
constructions, terminals, accessory lists and accessory placements from the system's parts database.
</summary>
            <param name="strFilePath">Full output file name.</param>
            <param name="strConverter">
Converter long name, e.g: 'XPamExportXml'.
See <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.
</param>
            <param name="strSqlFilterPart">Sql filter for advanced
                               users. With this filter the
                               exported parts can be reduced
                               with an SQL statement. In
                               order to export complete
                               list, use string "1=1"
                               To export one part
                               with a specified part number,
                               e.g. "A001", use string
                               "partnr='A001'"
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strSqlFilterAddress">Sql filter for addresses.
							   With this filter the
                               exported data can be reduced
                               by providing an SQL statement. In
                               order to export complete
                               data, use string "1=1" 
							   or call overloaded
                               method without this
                               parameter.
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strSqlFilterConstruction">Sql filter for constructions.
							   With this filter the
                               exported data can be reduced
                               by providing an SQL statement. In
                               order to export complete
                               data, use string "1=1".
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strSqlFilterTerminal">Sql filter for terminals.
							   With this filter the
                               exported data can be reduced
                               by providing an SQL statement. In
                               order to export complete
                               data, use string "1=1". 
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strSqlFilterAccessoryList">Sql filter for accessory lists.
							   With this filter the
                               exported data can be reduced
                               by providing an SQL statement. In
                               order to export complete
                               data, use string "1=1".
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strSqlFilterAccessoryPlacement">Sql filter for accessory placements.
							   With this filter the
                               exported data can be reduced
                               by providing an SQL statement. In
                               order to export complete
                               data, use string "1=1".
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
							 Details about configuration file structure 
							 are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.
</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred while
                                exporting parts data.</exception>
            <remarks>
In order to filter the output data you can provide
an SQL filter through the 'strSqlFilterPart', 'strSqlFilterAddress', 'strSqlFilterConstruction', 
'strSqlFilterTerminal', 'strSqlFilterAccessoryList' and 'strSqlFilterAccessoryPlacement' parameters.
The syntax is the same as the WHERE statement in regular SQL queries.

For parts, you can use any column name from the 'tblPart' table existing in your currently used parts
database (e.g.: 'manufacturer', 'productgroup' or 'typenr').
For other parts management items (addresses, constructions, etc.) check 
column names in the respective tables in the current parts database.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsListFromSystem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
Exports parts and addresses from the system's parts database.
</summary>
            <param name="strFilePath">Full output file name.</param>
            <param name="strConverter">
Converter long name, e.g: 'XPamExportXml'.
See <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.
</param>
            <param name="strSqlFilterPart">Sql filter for advanced
                               users. With this filter the
                               exported parts can be reduced
                               with a SQL statement. In
                               order to export complete
                               list, use filter equal to
                               "1=1" or call overloaded
                               method without this
                               parameter. To export one part
                               with a specified part number,
                               e.g. A001, set the
                               strSqlFilterPart to
                               "partnr='A001'"
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strSqlFilterAddress">Sql filter for advanced
                               users. With this filter the
                               exported data can be reduced
                               by providing an SQL statement. In
                               order to export complete
                               data, use filter equal to
                               "1=1" or call overloaded
                               method without this
                               parameter.
							   In order to skip this data in the output,
							   use "1=0" string.
</param>
            <param name="strCfgFilePath">Full file name of the configuration file.
Details about configuration file structure are described in "Parts Management: Configuration Files for the Import and Export of Data" chapter of P8 Help.
</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred while
                                exporting parts data.</exception>
            <remarks>
In order to filter the output data you can provide
an SQL filter through the 'strSqlFilterPart' and 'strSqlFilterAddress' parameters.
The syntax is the same as the WHERE statement in regular SQL queries.

For parts, you can use any column name from the 'tblPart' table existing in your currently used parts
database (e.g.: 'manufacturer', 'productgroup' or 'typenr').
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsListFromSystem(System.String,System.String)">
            <summary>
Exports parts data from the system's parts database.
</summary>
            <param name="strFilePath">Full output file name.</param>
            <param name="strConverter">
Converter long name, e.g: 'XPamExportXml'.
See <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.
</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while exporting parts
                                data.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.AddPartsToProject(Eplan.EplApi.DataModel.Project,System.Collections.ArrayList)">
            <summary>
Store parts in the project, and adds project part references.
</summary>
            <param name="oProject">Project. </param>
            <param name="lPartsInfo">List of parts data. The members of
                         this list have the type 'PartInfo'. </param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:BaseException">An error occurred
                                while storing parts
                                data.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for storing
                                       parts data in the
                                       project could not be
                                       created .</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsListWithFilterScheme(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String)">
            <summary>
Method to export the parts list of a project to an XML/CSV
\file or as a custom format, defined by an existing
XMLConverter.
</summary>
            <param name="oProject">Project of which the parts
                       list will be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                export file. The extension
                                is added automatically.</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strFilterScheme">Scheme-name of filter in bill of materials-navigator. If parameter is empty, the standard-filter-scheme will be used.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">Thrown if
                                an error
                                occurred
                                during
                                export.</exception>
            <exception cref="!:ApplicationException">\Internal
                                       action for
                                       exporting
                                       the parts
                                       list was
                                       not found.
                                       (Missing
                                       rights?).</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  strConverter
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsList(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Method to export the parts list of a project to an XML/CSV
\file or as a custom format, defined by an existing
XMLConverter.
</summary>
            <param name="oProject">Project of which the parts
                       list will be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                export file. The extension
                                is added automatically.</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">Thrown if
                                an error
                                occurred
                                during
                                export.</exception>
            <exception cref="!:ApplicationException">\Internal
                                       action for
                                       exporting
                                       the parts
                                       list was
                                       not found.
                                       (Missing
                                       rights?).</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  strConverter
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsList(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.PartsService.Format)">
            <summary>
Method to export the parts list of a project to an XML/CSV
\file.
</summary>
            <param name="oProject">Project of which the parts
                       list will be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                export file. The extension
                                is added automatically.</param>
            <param name="fileFormat">Parameter for setting the
                         predefined export formats
                         XML and CSV. The enumeration
                         <see text="Format" cref="T:Eplan.EplApi.HEServices.PartsService.Format" />
                         defines the necessary
                         values. If an invalid value
                         is set, the file will be
                         exported as XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">Thrown if
                                an error
                                occurred
                                during
                                export.</exception>
            <exception cref="!:ApplicationException">\Internal
                                       action for
                                       exporting
                                       the parts
                                       list was
                                       not found.
                                       (Missing
                                       rights?).</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  fileFormat
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsList(System.String,System.String,System.String)">
            <summary>
Method to export the parts list of a project to an XML/CSV
\file or as a custom format, defined by an existing
XMLConverter.
</summary>
            <param name="strFullLinkFileName"> Full link file name of the project of which the parts
                       list will be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                export file. The extension
                                is added automatically.</param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">Thrown if
                                an error
                                occurred
                                during
                                export.</exception>
            <exception cref="!:ApplicationException">\Internal
                                       action for
                                       exporting
                                       the parts
                                       list was
                                       not found.
                                       (Missing
                                       rights?).</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  strConverter
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ExportPartsList(System.String,System.String,Eplan.EplApi.HEServices.PartsService.Format)">
            <summary>
Method to export the parts list of a project to an XML/CSV
\file.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project of which the parts
                             list will be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                export file. The extension
                                is added automatically.</param>
            <param name="fileFormat">Parameter for setting the
                         predefined export formats
                         XML and CSV. The enumeration
                         <see text="Format" cref="T:Eplan.EplApi.HEServices.PartsService.Format" />
                         defines the necessary
                         values. If an invalid value
                         is set, the file will be
                         exported as XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">Thrown if
                                an error
                                occurred
                                during
                                export.</exception>
            <exception cref="!:ApplicationException">\Internal
                                       action for
                                       exporting
                                       the parts
                                       list was
                                       not found.
                                       (Missing
                                       rights?).</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  fileFormat
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsList(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Method to import a parts list file into the project. The
import file may be an XML/CSV file or may have a custom
format, defined by an existing XML import converter.
</summary>
            <param name="oProject">Project, into which the
                       parts (Articles) will be
                       imported.</param>
            <param name="strImportFilePath">Full file name of the parts
                                list file to import. </param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">An error
                                occurred
                                during
                                import.</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  strConverter
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsList(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.PartsService.Format)">
            <summary>
Method to import a parts list file into the project.
</summary>
            <param name="oProject">Project, into which the
                       parts (Articles) will be
                       imported.</param>
            <param name="strImportFilePath">Full file name of the parts
                                list file to import. </param>
            <param name="fileformat">Parameter for setting the
                         predefined file formats XML
                         and CSV. The enumeration <see text="Format" cref="T:Eplan.EplApi.HEServices.PartsService.Format" />
                         defines the necessary
                         values. If an invalid value
                         is set, the file is expected
                         to be XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">An error
                                occurred
                                during
                                import.</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  fileformat
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsList(System.String,System.String,System.String)">
            <summary>
Method to import a parts list file into the project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project, into which the
                             parts (Articles) will be
                             imported.</param>
            <param name="strImportFilePath">Full file name of the parts
                                list file to import. </param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">An error
                                occurred
                                during
                                import.</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  strConverter
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.ImportPartsList(System.String,System.String,Eplan.EplApi.HEServices.PartsService.Format)">
            <summary>
Method to import a parts list file into the project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project, into which the
                       parts (Articles) will be
                       imported.</param>
            <param name="strImportFilePath">Full file name of the parts
                                list file to import. </param>
            <param name="fileformat">Parameter for setting the
                         predefined file formats XML
                         and CSV. The enumeration <see text="Format" cref="T:Eplan.EplApi.HEServices.PartsService.Format" />
                         defines the necessary
                         values. If an invalid value
                         is set, the file is expected
                         to be XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in
                                    case of
                                    invalid
                                    \arguments.</exception>
            <exception cref="!:BaseException">An error
                                occurred
                                during
                                import.</exception>
            <exception cref="!:\Exceptions\:\:InvalidConverter">Thrown
                                                  when given
                                                  parameter <c>
                                                  fileformat
                                                  </c> isn't
                                                  valid
                                                  converter
                                                  or such
                                                  conversion
                                                  doesn't
                                                  exist at
                                                  all. </exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.ImportIdentifier.UniqueIdOptPartNumber">
            <summary>Find the same parts with the unique id and the partnumber, if unique id is missing.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.ImportIdentifier.UniqueId">
            <summary>Find the same parts with the unique id</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.ImportIdentifier.PartNumber">
            <summary>Find the same parts with the partnumber</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PartsService.ImportIdentifier">
            <summary>
Import Indentifier
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.ImportMode.UpdateAndAppend">
            <summary>update existing records and append new ones</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.ImportMode.UpdateExistingRecords">
            <summary>update existing records only</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.ImportMode.AppendNewRecords">
            <summary>append new records only</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PartsService.ImportMode">
            <summary>
Import mode
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.AuthenticationType.SQLServer">
            <summary>SQL server authentication</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.AuthenticationType.WindowsAuthentication">
            <summary>Windows authentication</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PartsService.AuthenticationType">
            <summary>
Logon type
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.PartsDatabaseType.SQL">
            <summary>SQL Database</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.PartsDatabaseType.Access">
            <summary>Access database</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PartsService.PartsDatabaseType">
            <summary>
Database type
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.Format.CSV">
            <summary>CSV file format</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PartsService.Format.XML">
            <summary>XML file format</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PartsService.Format">
            <summary>
Export formats
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PartsService.PartInfo.nCount">
            <summary>
Sets the count of the Articles.
</summary>
            <param name="nCount">Valid part variant</param>
            <seealso cref="T:Eplan.EplApi.DataModel.Article" />
        </member>
        <member name="P:Eplan.EplApi.HEServices.PartsService.PartInfo.partVariant">
            <summary>
Gets/Sets the part variant of the Article;
</summary>
            <param name="variantNr">Valid part variant</param>
            <seealso cref="T:Eplan.EplApi.DataModel.Article" />
        </member>
        <member name="P:Eplan.EplApi.HEServices.PartsService.PartInfo.partNumber">
            <summary>
Gets/Sets the part number of the Article;
</summary>
            <param name="partNr">Valid part number</param>
            <seealso cref="T:Eplan.EplApi.DataModel.Article" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.PartInfo.#ctor(System.String,System.String,System.UInt32)">
            <summary>
Default constructor 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PartsService.PartInfo">
            <summary>
Struct that holds basic part description. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PartsService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PartsService">
            <summary>
Class providing parts list and parts management
functionality. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.RestoreOperationMode(Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper)">
            <summary>
Restore previous operation mode.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.SetChangeAndCreateInfoUpdateForPage(System.Boolean,Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper)">
            <summary>
Activate or deactivate automatic change/create information update for a page.
Helper will switch mode automatically back due to destruction.
</summary>
            <param name="bChandeAndCreateInfoUpdate">If true, automatic change/create information update for a page is activated.</param>
            <param name="pHelper">Object which will switch mode back due to destruction. Can be null value.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.SetAutoPageChangedFlag(System.Boolean,Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper)">
            <summary>
Activate or deactivate AUTOPAGECHANGED change info handling.
Helper will switch mode automatically back due to destruction.
</summary>
            <param name="bAutoPageChangedFlag">If true, AUTOPAGECHANGED change info handling is activated.</param>
            <param name="pHelper">Object which will switch mode back due to destruction. Can be null value.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.SetConnectionDirtyActive(System.Boolean,Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper)">
            <summary>
Activate or deactivate connection dirty bit handling.
Helper will switch mode automatically back due to destruction.
</summary>
            <param name="bActive">If true, connection dirty bit handling is activated.</param>
            <param name="pHelper">Object which will switch mode back due to destruction. Can be null value.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.SetObj2PageActive(System.Boolean,Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper)">
            <summary>
Activate or deactivate change info handling if object belongs to page.
Helper will switch mode automatically back due to destruction.
</summary>
            <param name="bActive">If true, change info handling is activated.</param>
            <param name="pHelper">Object which will switch mode back due to destruction. Can be null value.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.SetActive(System.Boolean,Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper)">
            <summary>
Activate or deactivate change info handling.
Helper will switch mode automatically back due to destruction.
</summary>
            <param name="bActive">If true, change info handling is activated.</param>
            <param name="pHelper">Object which will switch mode back due to destruction. Can be null value.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ChangeInfoService.ChangeInfoServiceHelper">
            <summary>
This class is used to switch back mode.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ChangeInfoService">
            <summary>
This class contains methods for activating and deactivating
change info handling.
</summary>
            <example>The following example shows how to use the class.
<code lang="C#"><code lang="cs" source="P8_API_Example_HEServices_ChangeInfoService_SetChangeAndCreateInfoUpdateForPage_Example1.cs.txt" /></code></example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.NumberLegendItems(Eplan.EplApi.DataModel.E3D.InstallationSpace,System.Int64,System.Int64,Eplan.EplApi.HEServices.Renumber.Enums.NumberingDirection3D,System.Boolean)">
            <summary>
Number legend Ids of a pro panel objects.
</summary>
            <param name="oInstallationSpace">installation space whose
                             legend numbers will be
                             numbered.</param>
            <param name="nStartValue">Start value for the
                          numbering.</param>
            <param name="nStepValue">Step value for the
                         numbering.</param>
            <param name="nNumberingDirection">Numbering direction.
                                  Allowed values are defined
                                  in the enum
                                  NumberingDirection3D.</param>
            <param name="fSameNumbers">If true then set same numbers for identical devices. 
                           Identical devices have the same partnumber.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown when required
                                        parameter is null. </exception>
            <exception cref="!:ArgumentException">Invalid parameter.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:BaseException">Error occurred while
                                numbering legend
                                ids.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PagesSupplementaryField(Eplan.EplApi.DataModel.Page[],System.Int32,System.Int16,System.UInt32,System.UInt32)">
            <summary>
Method for renumbering one of supplementary properties of pages.
</summary>
            <param name="arrPages">Array of pages whose property is to be renumbered.</param>
            <param name="propID">Id of the property to renumber.</param>
            <param name="propIndex">Index of the property to renumber.</param>
            <param name="nStartValue">An integer start value.</param>
            <param name="nNumberOfDigits">Minimal number of digits in the value.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ApplicationException">An error occurred
                                during numbering.</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PagesSupplementaryField(Eplan.EplApi.DataModel.Page[],System.Int32,System.UInt32,System.UInt32)">
            <summary>
Method for renumbering one of supplementary properties of pages.
</summary>
            <param name="arrPages">Array of pages whose property is to be renumbered.</param>
            <param name="propID">Id of the property to renumber.</param>
            <param name="nStartValue">An integer start value.</param>
            <param name="nNumberOfDigits">Minimal number of digits in the value.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ApplicationException">An error occurred
                                during numbering.</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Pages(Eplan.EplApi.DataModel.Page[],System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,Eplan.EplApi.HEServices.Renumber.Enums.SubPages)">
            <summary>
Method for renumbering pages specified by the collection pages;
</summary>
            <param name="pages">Pages to be renumbered.</param>
            <param name="bStructureOriented">Set this parameter to true to provide numbering per structure 
								 identifier. If false, then pages are continuously number without 
</param>
            <param name="nStartvalue">Here you enter the page number from which the numbering is to begin.</param>
            <param name="nIncrement">Here you enter the increment value for the separation between the page numbers.</param>
            <param name="bKeepInterval">In combination with the definition of the start page, 
							this parameter retains the increments between the selected 
							pages for the target pages. In this way you can move any desired number of selected 
							pages by a specified increment. Entering the increment size is not possible in this case.
</param>
            <param name="bKeepText">Set this to true, if the alphabetic part of the page name should 
						not be overwritten.</param>
            <param name="eSubPages">Values are: <para />
		- Retain: Existing subpages are adopted unchanged into the target page.<para />
		- ConsecutiveNumbering:Existing subpages are renumbered using the starting value "1" and an increment of "1". At every change of the main page, the subpage numbering begins again from "1". The subpage numbering follows the project settings defined in the project setting "Characters for subpages".<para />
		- ConvertIntoMainPages: Subpages are converted to main pages and renumbered.
</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ApplicationException">An error occurred
                                during numbering.</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Plugs(Eplan.EplApi.DataModel.Function[],Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
Method for renumbering plugs specified by the collection
pFunctions.
</summary>
            <param name="pFunctions">Plugs to be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        PlugSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="bKeepAlphanumeric">not used anymore</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <param name="bPermitSortChange">Permit sort change.</param>
            <param name="bFillGaps">Fill gaps.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Plugs(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
Method for renumbering plugs of a project.
</summary>
            <param name="pProject">Project in which all plugs
                       will be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        PlugSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="bKeepAlphanumeric">Not used anymore.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <param name="bPermitSortChange">Permit sort change.</param>
            <param name="bFillGaps">Fill gaps.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Plugs(Eplan.EplApi.DataModel.Function[],Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
Method for renumbering plugs specified by the collection
pFunctions.
</summary>
            <param name="pFunctions">Plugs to be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        PlugSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="bKeepAlphanumeric">Keep alphabetic components
                                of the device number.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Plugs(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
Method for renumbering plugs of a project.
</summary>
            <param name="pProject">Project in which all plugs
                       will be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        PlugSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         plugs will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="bKeepAlphanumeric">Keep alphabetic components
                                of the device number.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Terminals(Eplan.EplApi.DataModel.Function[],Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence,Eplan.EplApi.HEServices.Renumber.Enums.Extent,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Method for renumbering terminals specified by the collection
pFunctions.
</summary>
            <param name="terminals">Terminals to be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        TerminalsSequence.</param>
            <param name="ext">Parameter enum to define the scope of numbering.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="eMultipleTerminals">Parameter enum for numbering terminals with "Allow same designations" property .</param>
            <param name="eTerminalsWithAlphabeticalCharacters">Parameter enum how terminals or pins with alphabetical elements in the designation should be numbered.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <param name="strPrefix">The prefix value that comes before the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="strSufix">The suffix value that comes after the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="bPermitSortChange">Permit sort change.</param>
            <param name="bFillGaps">Fill gaps.</param>
            <param name="bOnlyNumberMarkedOnes">I true - Terminals / pins whose designations contain a "?" will be numbered .</param>
            <param name="bAlsoNumberedByPLC">If true - terminals / pins controlled by PLCs will also be numbered.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    functions do not
                                    exist or are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Terminals(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Method for renumbering terminals specified by the collection
pFunctions.
</summary>
            <param name="pProject">Project in which all terminals
                       will be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        TerminalsSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="eMultipleTerminals">Parameter enum for numbering terminals with "Allow same designations" property .</param>
            <param name="eTerminalsWithAlphabeticalCharacters">Parameter enum how terminals or pins with alphabetical elements in the designation should be numbered.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <param name="strPrefix">The prefix value that comes before the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="strSufix">The suffix value that comes after the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="bPermitSortChange">Permit sort change.</param>
            <param name="bFillGaps">Fill gaps.</param>
            <param name="bOnlyNumberMarkedOnes">I true - Terminals / pins whose designations contain a "?" will be numbered .</param>
            <param name="bAlsoNumberedByPLC">If true - terminals / pins controlled by PLCs will also be numbered.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    functions do not
                                    exist or are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Terminals(Eplan.EplApi.DataModel.Function[],Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence,Eplan.EplApi.HEServices.Renumber.Enums.Extent,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Method for renumbering terminals specified by the collection
pFunctions.
</summary>
            <param name="terminals">Terminals to be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        TerminalsSequence.</param>
            <param name="ext">Parameter enum to define the scope of numbering.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="eMultipleTerminals">Parameter enum for numbering terminals with "Allow same designations" property .</param>
            <param name="eTerminalsWithAlphabeticalCharacters">Parameter enum how terminals or pins with alphabetical elements in the designation should be numbered.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <param name="strPrefix">The prefix value that comes before the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="strSufix">The suffix value that comes after the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="bOnlyNumberMarkedOnes">I true - Terminals / pins whose designations contain a "?" will be numbered .</param>
            <param name="bAlsoNumberedByPLC">If true - terminals / pins controlled by PLCs will also be numbered.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    functions do not
                                    exist or are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Terminals(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Method for renumbering terminals specified by the collection
pFunctions.
</summary>
            <param name="pProject">Project in which all terminals
                       will be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        TerminalsSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="eMultipleTerminals">Parameter enum for numbering terminals with "Allow same designations" property .</param>
            <param name="eTerminalsWithAlphabeticalCharacters">Parameter enum how terminals or pins with alphabetical elements in the designation should be numbered.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <param name="strPrefix">The prefix value that comes before the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="strSufix">The suffix value that comes after the numbering value. Is only used if schema has set "According to online numbering format".</param>
            <param name="bOnlyNumberMarkedOnes">I true - Terminals / pins whose designations contain a "?" will be numbered .</param>
            <param name="bAlsoNumberedByPLC">If true - terminals / pins controlled by PLCs will also be numbered.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    functions do not
                                    exist or are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Terminals(Eplan.EplApi.DataModel.Function[],Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
Method for renumbering terminals specified by the collection
pFunctions.
</summary>
            <param name="pFunctions">Terminals to be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        TerminalsSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="eTerminalsKind">Not used anymore.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    functions do not
                                    exist or are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Terminals(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
Method for renumbering all terminals in a project.
</summary>
            <param name="pProject">Project in which all terminals
                       will be renumbered.</param>
            <param name="eSequence">Mode to use for numbering,
                        given by a member of enum
                        TerminalsSequence.</param>
            <param name="ePotential_N">Parameter to determine, 
						 N terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_PE">Parameter to determine, how PE
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="ePotential_SH">Parameter to determine, how SH
                         terminals will be treated
                         during numbering. Use value
                         from enum <see text="TerminalsPotential" cref="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential" />.</param>
            <param name="eTerminalsKind">Not used anymore.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value.</param>
            <param name="nIncrement">Step width.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.DeviceTagsWithPlcData(Eplan.EplApi.DataModel.Function[],System.String,System.Boolean,Eplan.EplApi.HEServices.Renumber.Enums.DeviceTagsWithPLCOverwrition)">
            <summary>
Method for numbering device tags of a collection of functions
with PLC data.
</summary>
            <param name="pFunctions">Functions, for which the
                         device tags will be
                         numbered.</param>
            <param name="strScheme">Scheme used for
                        numbering.</param>
            <param name="bMarkAsNumeratedByPLC">Mark as 'numbered with
                                    PLC data'.</param>
            <param name="eOverwriteMode">Overwrite mode. Use
                             value from enum
                             DeviceTagsWithPLCOverwrition.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    functions do not
                                    exist or are
                                    invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.DeviceTagsWithPlcData(Eplan.EplApi.DataModel.Project,System.String,System.Boolean,Eplan.EplApi.HEServices.Renumber.Enums.DeviceTagsWithPLCOverwrition)">
            <summary>
Method for numbering device tags of a project with PLC data.
</summary>
            <param name="pProject">Project in which the
                       device tags will be
                       numbered.</param>
            <param name="strScheme">Scheme used for
                        numbering.</param>
            <param name="bMarkAsNumeratedByPLC">Mark as 'numbered with
                                    PLC data'.</param>
            <param name="eOverwriteMode">Overwrite mode. Use
                             value from enum
                             DeviceTagsWithPLCOverwrition.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.DeviceTags(Eplan.EplApi.DataModel.IFunctionBase[],System.String,Eplan.EplApi.HEServices.Renumber.Enums.DeviceTags,System.String,System.Int32,System.Int32)">
            <summary>
Method for numbering device tags in a project.
</summary>
            <param name="pFunctions">IFunctionBase objects of which
                         the device tags will
                         be numbered.</param>
            <param name="strFilterScheme">Filter scheme. If an
                              empty string is set
                              in this parameter,
                              the last\-used filter
                              scheme will be used
							  which is currently set in GUI.</param>
            <param name="eDeviceTagKind">Determines, which
                             devices will be
                             numbered. </param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValue">Start value of the
                                       numbering.</param>
            <param name="nIncrement">Step width of the
                                      numbering.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:ApplicationException">Thrown when renumber couldn't find any functions to renumber .</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.DeviceTags(Eplan.EplApi.DataModel.Function[],System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
Method for numbering device tags in a project.
</summary>
            <param name="pFunctions">Functions of which
                         the device tags will
                         be numbered.</param>
            <param name="eDeviceTagKind">Determines, which
                             devices will be
                             numbered. Use value
                             from enum DeviceTags.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="nStartValuePerIdentifier">Start value of the
                                       numbering per
                                       identifier.</param>
            <param name="nIncrementPerIdentifier">Step width of the
                                      numbering per
                                      identifier.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:ApplicationException">Thrown when renumber couldn't find any functions to renumber .</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.DeviceTags(Eplan.EplApi.DataModel.Function[],System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
Method for numbering device tags in a project.
</summary>
            <param name="pFunctions">Functions of which
                         the device tags will
                         be numbered.</param>
            <param name="eDeviceTagKind">Determines, which
                             devices will be
                             numbered. Use value
                             from enum DeviceTags.</param>
            <param name="strScheme">Numbering scheme.</param>
            <param name="strFilterScheme">Filter scheme. If an
                              empty string is set
                              in this parameter,
                              the last\-used filter
                              scheme will be used
							  which is currently set in GUI.</param>
            <param name="nStartValuePerIdentifier">Start value of the
                                       numbering per
                                       identifier.</param>
            <param name="nIncrementPerIdentifier">Step width of the
                                      numbering per
                                      identifier.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:ApplicationException">Thrown when renumber couldn't find any functions to renumber .</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.DeviceTags(Eplan.EplApi.DataModel.Project,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
Method for numbering device tags in a project.
</summary>
            <param name="pProject">Project in which the
                       device tags will be
                       numbered.</param>
            <param name="eDeviceTagKind">Determines, which
                             devices will be
                             numbered. Use value
                             from enum DeviceTags.</param>
            <param name="strSchemePerIdentifier">Numbering scheme.</param>
            <param name="nStartValuePerIdentifier">Start value of the
                                       numbering per
                                       identifier.</param>
            <param name="nIncrementPerIdentifier">Step width of the
                                      numbering per
                                      identifier.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:ApplicationException">Thrown when renumber couldn't find any functions to renumber .</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.DeviceTags(Eplan.EplApi.DataModel.Project,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
Method for numbering device tags in a project.
</summary>
            <param name="pProject">Project in which the
                       device tags will be
                       numbered.</param>
            <param name="eDeviceTagKind">Determines, which
                             devices will be
                             numbered. Use value
                             from enum DeviceTags.</param>
            <param name="strSchemePerIdentifier">Numbering scheme.</param>
            <param name="strFilterScheme">Filter scheme. If an
                              empty string is set
                              in this parameter,
                              the last\-used filter
                              scheme will be used
							  which is currently set in GUI.</param>
            <param name="nStartValuePerIdentifier">Start value of the
                                       numbering per
                                       identifier.</param>
            <param name="nIncrementPerIdentifier">Step width of the
                                      numbering per
                                      identifier.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for numbering could
                                       not be created .</exception>
            <exception cref="!:ApplicationException">Thrown when renumber couldn't find any functions to renumber .</exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(Eplan.EplApi.DataModel.Project,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <param name="pProject">Project in which the Bill Of
                       Materials positions will be
                       renumbered.</param>
            <param name="ePartsKind">Specifies which positions will be
                         renumbered. Allowed values are
                         \members from enumeration Parts,
                         e.g. CableParts | ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a position.</param>
            <param name="strSortingSchema">Name of the schema used to sort parts.</param>
            <param name="bSameNumbers">Use same numbers for identical parts.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(Eplan.EplApi.DataModel.Project,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <param name="pProject">Project in which the Bill Of
                       Materials positions will be
                       renumbered.</param>
            <param name="ePartsKind">Specifies which positions will be
                         renumbered. Allowed values are
                         \members from enumeration Parts,
                         e.g. CableParts | ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a position.</param>
            <param name="strSortingSchema">Name of the schema used to sort parts.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(Eplan.EplApi.DataModel.Project,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <param name="pProject">Project in which the Bill Of
                       Materials positions will be
                       renumbered.</param>
            <param name="ePartsKind">Specifies which positions will be
                         renumbered. Allowed values are
                         \members from enumeration Parts,
                         e.g. CableParts | ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a position.</param>
            <param name="bSameNumbers">Use same numbers for identical parts.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(Eplan.EplApi.DataModel.Project,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <param name="pProject">Project in which the Bill Of
                       Materials positions will be
                       renumbered.</param>
            <param name="ePartsKind">Specifies which positions will be
                         renumbered. Allowed values are
                         \members from enumeration Parts,
                         e.g. CableParts | ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a position.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the numbering process and will be closed subsequently.
</remarks>
            <param name="strFullLinkFileName">Full link file name of the
                                  project in which the Bill
                                  Of Materials positions
                                  will be renumbered.</param>
            <param name="ePartsKind">Specifies which positions
                         will be renumbered.
                         Allowed values are members
                         from enumeration Parts,
                         e.g. CableParts |
                         ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a
                          position.</param>
            <param name="strSortingSchema">Name of the schema used to sort parts.</param>
            <param name="bSameNumbers">Use same numbers for identical parts.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the numbering process and will be closed subsequently.
</remarks>
            <param name="strFullLinkFileName">Full link file name of the
                                  project in which the Bill
                                  Of Materials positions
                                  will be renumbered.</param>
            <param name="ePartsKind">Specifies which positions
                         will be renumbered.
                         Allowed values are members
                         from enumeration Parts,
                         e.g. CableParts |
                         ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a
                          position.</param>
            <param name="strSortingSchema">Name of the schema used to sort parts.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the numbering process and will be closed subsequently.
</remarks>
            <param name="strFullLinkFileName">Full link file name of the
                                  project in which the Bill
                                  Of Materials positions
                                  will be renumbered.</param>
            <param name="ePartsKind">Specifies which positions
                         will be renumbered.
                         Allowed values are members
                         from enumeration Parts,
                         e.g. CableParts |
                         ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a
                          position.</param>
            <param name="bSameNumbers">Use same numbers for identical parts.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.PartsListPositions(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Method for renumbering Bill Of Materials positions.
</summary>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the numbering process and will be closed subsequently.
</remarks>
            <param name="strFullLinkFileName">Full link file name of the
                                  project in which the Bill
                                  Of Materials positions
                                  will be renumbered.</param>
            <param name="ePartsKind">Specifies which positions
                         will be renumbered.
                         Allowed values are members
                         from enumeration Parts,
                         e.g. CableParts |
                         ClampParts</param>
            <param name="nStartValue">Start value</param>
            <param name="nIncrement">Step width</param>
            <param name="nFieldWidth">Number of digits for a
                          position.</param>
            <exception cref="!:ArgumentNullException">Thrown, if an
                                        argument is set to
                                        null.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters,
                                    e.g. the specified
                                    project does not
                                    exist or is invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for numbering could
                                       not be created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during numbering.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.NumberingDirection3D.Succession">
            <summary>succession numbering</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.NumberingDirection3D.Automatic">
            <summary>automatic numbering</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.NumberingDirection3D">
            <summary>
Numbering direction of 3d objects
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Extent.AllSelectedTerminalStrips">
            <summary>All terminals of the same strip as selected terminal will be numbered.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Extent.Selected">
            <summary>Only the selected terminals or pins will be numbered.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.Extent">
            <summary>
Parameter enum to define the scope of numbering: 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters.Number">
            <summary>All terminals / pins are renumbered. In doing so, the old designation is overwritten</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters.KeepAlphabeticalElements">
            <summary>The alphabetical elements of the terminal or pin designation are retained. The first numeric elements are renumbered. If the designation only has alphabetical elements, the old designation is attached to the new numbering. Sequential terminals with different counters but the same numerical component receive the same numerical component in the counter even after the numbering.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters.DontModify">
            <summary>Terminals or pins with alphabetical elements in the designation are ignored during numbering.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsWithAlphabeticalCharacters">
            <summary>
Parameter enum how terminals or pins with alphabetical elements in the designation should be numbered: . 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals.NumberIndividually">
            <summary>Terminals with the "Allow same designations" property are each given their own number. Therefore, multiple terminals which had the same number before numbering will have different numbers after numbering.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals.NumberSame">
            <summary>Terminals with the same designation with the "Allow same designations" property are given the same number.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals.DontModify">
            <summary>Terminals with the property "Allow same designations" are ignored during numbering.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.MultipleTerminals">
            <summary>
Parameter enum for numbering terminals with "Allow same designations" property . 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.SubPages.ConvertIntoMainPages">
            <summary>Subpages are converted to main pages and renumbered.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.SubPages.ConsecutiveNumbering">
            <summary>Existing subpages are renumbered using the starting value "1" and an increment of "1". At every change of the main page, the subpage numbering begins again from "1". The subpage numbering follows the project settings defined in the project setting "Characters for subpages".</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.SubPages.Retain">
            <summary>Existing subpages are adopted unchanged into the target page.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.SubPages">
            <summary>
Parameter enum for pages numbering. 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence.Cable">
            <summary>Cable oriented.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence.Page">
            <summary>Page oriented.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence.Collector">
            <summary>Use the given sequence.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.PlugsSequence">
            <summary>
Parameter enum for plug numbering. 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Terminals.KeepAlphaNumericParts">
            <summary>Keep alphabetical elements of the terminal number.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Terminals.NumerateMultipleTerminals">
            <summary>Also renumber multi path terminals.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Terminals.NumerateBySPS">
            <summary>Also renumber terminals influenced by PLC numbering.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Terminals.PostNumerate">
            <summary>Post-numerate</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.Terminals">
            <summary>
Parameter enum for terminal numbering. The values of this
enum can be combined by | , e.g.: NumerateBySPS |
NumerateMultipleTerminals 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential.Numbering">
            <summary>Renumber</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential.PositionKeep">
            <summary>Item numbering</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential.IgnoreNumbering">
            <summary>Ignore.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsPotential">
            <summary>
Parameter enum for PE and N terminals during terminal
numbering.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence.Level">
            <summary>Level oriented.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence.Cable">
            <summary>Cable oriented</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence.Page">
            <summary>Page oriented.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence.Collector">
            <summary>Use the given sequence.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.TerminalsSequence">
            <summary>
Parameter enum for the terminal sequence during terminal
numbering.. 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTagsWithPLCOverwrition.PostNumeration">
            <summary>Post numerate</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTagsWithPLCOverwrition.MarkedAsNumeratedByPLC">
            <summary>Except devices tags marked as numbered by PLC numbering.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTagsWithPLCOverwrition.All">
            <summary>Renumber all device tags.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTagsWithPLCOverwrition">
            <summary>
Parameter enum for device tag numbering with PLC data. 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTags.NumerateCables">
            <summary>Also renumber cables, if their device tags contain source and 
target information.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTags.OmitNumeratedBySPS">
            <summary>Don't change device tags, which are influenced by PLC
numbering.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTags.PostNumerate">
            <summary>If this flag is set, only invalid device tags
(i.e. those containing '?' character) will be renumbered
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.DeviceTags">
            <summary>
Parameter enum for device tag numbering. The enum members can
be combined by a logical or (|), e.g. OmitNumeratedBySPS |
NumerateCables.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Parts.BusBarConnectorParts">
            <summary>Include busbar connector parts.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Parts.PinAndJackParts">
            <summary>Include pin and jack parts.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Parts.CableProjectParts">
            <summary>Include cable project parts.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Parts.ConnectionParts">
            <summary>Include wire parts.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Parts.CableParts">
            <summary>Include cable parts.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Parts.ClampParts">
            <summary>Include terminal parts.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Renumber.Enums.Parts.DeviceTagsWithoutPartNumber">
            <summary>Consider also devices without parts.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber.Enums.Parts">
            <summary>
Parameter enum for parts list position numbering. The enum
determines, which kinds of parts will be numbered. The enum
\members may be combined by a logical or (|), e.g.:
DeviceTagsWithoutPartNumber | ClampParts 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Renumber.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Renumber">
            <summary>
Class providing functionality for numbering various types of
data, like device tags. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Cables(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
Creates cables in the given project. The functionality
includes three steps: creating cables, cable numbering, cable
selection.
</summary>
            <param name="strFullLinkFileName">Full link file name of
                             the project in which
                             cables will be
                             generated.</param>
            <param name="strCreateSchemaName">Name of the scheme for
                                  generating cables.</param>
            <param name="strNumberingSchemaName">Name of the scheme for
                                     cable numbering.</param>
            <param name="strAutoSelSchemaName">Name of the scheme for
                                   automatic cable
                                   selection.</param>
            <param name="bRegenrateConnections">If set to true,
                                    connections are updated
                                    in advance to cable
                                    generation.</param>
            <param name="bKeepOldNames">If set to true,
                            existing cable names
                            are not changed.</param>
            <param name="nStartValue">Start value of the
                          device tag counter.</param>
            <param name="nStepValue">Step width, by which
                         the DT counter is
                         increased.</param>
            <param name="bOnlyAutomaticCables">If set to true, the
                                   cable selection will
                                   only be done for
                                   automatically created
                                   cables.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    for example a wrong
                                    scheme.</exception>
            <exception cref="!:ApplicationException">An internal interface
                                       necessary for
                                       generating cables
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during cable
                                generation. Please
                                refer to the
                                exception message.</exception>
            <remarks>
If you pass an empty string to a scheme parameter, the last
used scheme will be used which is currently set in GUI.
If no scheme does exist under the
given scheme name, an exception will be thrown.

If no connections were generated, no cables will be
generated. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Cables(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
Creates cables in the given project. The functionality
includes three steps: creating cables, cable numbering, cable
selection.
</summary>
            <param name="oProject">Project in which cables
                       will be generated.</param>
            <param name="strCreateSchemaName">Name of the scheme for
                                  generating cables.</param>
            <param name="strNumberingSchemaName">Name of the scheme for
                                     cable numbering.</param>
            <param name="strAutoSelSchemaName">Name of the scheme for
                                   automatic cable
                                   selection.</param>
            <param name="bRegenrateConnections">If set to true,
                                    connections are updated
                                    in advance to cable
                                    generation.</param>
            <param name="bKeepOldNames">If set to true,
                            existing cable names
                            are not changed.</param>
            <param name="nStartValue">Start value of the
                          device tag counter.</param>
            <param name="nStepValue">Step width, by which
                         the DT counter is
                         increased.</param>
            <param name="bOnlyAutomaticCables">If set to true, the
                                   cable selection will
                                   only be done for
                                   automatically created
                                   cables.</param>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    for example a wrong
                                    scheme.</exception>
            <exception cref="!:ApplicationException">An internal interface
                                       necessary for
                                       generating cables
                                       could not be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during cable
                                generation. Please
                                refer to the
                                exception message.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
            <remarks>
If you pass an empty string to a scheme parameter, the last
used scheme will be used which is currently set in GUI.
If no scheme does exist under the
given scheme name, an exception will be thrown.

If no connections were generated, no cables will be
generated. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Connections(Eplan.EplApi.DataModel.Page[],System.Boolean)">
            <summary>
Updates connections on given pages from one project. Project is taken from first page.
</summary>
            <param name="arrayPages">Pages with connections to update.</param>
            <param name="bRebuildAllConnections">If true rebuilds all connections else updates only.</param>
            <exception cref="!:ArgumentException">Invalid project.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       generating
                                       connections could not
                                       be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during connection
                                generation. Please
                                refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Connections(System.String,System.Boolean)">
            <summary>
Updates connections in the given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project in which to update all
                       connections.</param>
            <param name="bUpdateConnections">If false rebuilds all connections otherwise generates only connections on dirty pages.</param>
            <exception cref="!:ArgumentException">Invalid project.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       generating
                                       connections could not
                                       be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during connection
                                generation. Please
                                refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Connections(System.String)">
            <summary>
Updates connections in the given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project in which to update all
                       connections.</param>
            <exception cref="!:ArgumentException">Invalid project.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       generating
                                       connections could not
                                       be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during connection
                                generation. Please
                                refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Connections(Eplan.EplApi.DataModel.Project,System.Boolean)">
            <summary>
Updates connections in the given project.
</summary>
            <param name="oProject">Project in which to update all
                       connections.</param>
            <param name="bUpdateConnections">If false rebuilds all connections otherwise generates only connections on dirty pages.</param>
            <exception cref="!:ArgumentException">Invalid project.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       generating
                                       connections could not
                                       be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during connection
                                generation. Please
                                refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Connections(Eplan.EplApi.DataModel.Project)">
            <summary>
Updates connections in the given project.
</summary>
            <param name="oProject">Project in which to update all
                       connections.</param>
            <exception cref="!:ArgumentException">Invalid project.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       generating
                                       connections could not
                                       be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during connection
                                generation. Please
                                refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Generate.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Generate">
            <summary>
Class for updating connections and cables 
</summary>
        </member>
        <member name="M:IXCabAdditionalPartsManager.insertManualAdditionalParts(ArticleHandle,DMCabBaseHandle,System.Boolean,System.Boolean,std.vector&lt;DMCabBaseHandle,std.allocator&lt;DMCabBaseHandle&gt;&gt;*)">
            <summary />
            <returns>
true if no error occurred.
</returns>
        </member>
        <member name="M:IXCabAdditionalPartsManager.insertAutomaticAdditionalParts(ArticleHandle,DMCabBaseHandle,System.Boolean,EVector3D,System.Double,System.Boolean,System.Int32,std.vector&lt;DMCabBaseHandle,std.allocator&lt;DMCabBaseHandle&gt;&gt;*)">
            <summary>
Creates component which can placed be automatically with additionally elements and place them on parent.
</summary>
            <returns>
Number of errors logged into system messages.
</returns>
        </member>
        <member name="M:IXCabAdditionalPartsManager.getAdditionalPartInfo(ArticleHandle,DMArticleAccessoryPlacementHandle,EString,System.Boolean*,EVector3D*,System.Double*,System.Boolean*,System.Int32!System.Runtime.CompilerServices.IsIm">
            <summary>
sets the information taken from accessory placement
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.AssignMainFunction(Eplan.EplApi.DataModel.Function,System.Boolean,System.Boolean)">
            <summary>
Converts auxiliary function into main function.
</summary>
            <param name="pFunction">Function will be assigned the "Main function" property. Can't be <c>null</c> or transient.</param>
            <param name="bOverwriteFilledPropsWithEmptyProps">If <c>true</c> then properties of old main function that contain no value removes existing properties on new main function.</param>
            <param name="bOverwriteEmptyPropsWithFilledProps">If <c>true</c> then properties of old main function that contain value are transfered to properties on new main function that contain no value. </param>
            <remarks>
                <para>
Changes an auxiliary function into a main function by assigning the "Main function" property to the auxiliary function. 
The auxiliary function is changed into a main function. The original main function is then converted to an auxiliary function.
Converting function to main function adopts properties from old to new main function based on parameters passed to method.
</para>
                <para>
This method makes no changes to functions which are transient or their category is <c>Terminal</c> or <c>ArticlePlacement</c>. For such functions
it returns <c>false</c>.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>pFunction</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>pFunction</c> is <c>invalid</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.InsertAccessory3D(Eplan.EplApi.DataModel.E3D.Placement3D,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.ICollection{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Creates and inserts accessories of a placement.
</summary>
            <param name="pMainPlacement">Placement which will be the parent of the new object. Can't be <c>null</c>.</param>
            <param name="strPartNumber">Accessory part number. Can't be <c>null</c>.</param>
            <param name="strPartVariant">Accessory part variant. Can't be <c>null</c>.</param>
            <param name="strAccessoryPlacement">Accessory placement name. First one found will be used. Can't be <c>null</c>.</param>
            <param name="strInstallationVariant">Accessory installation name which will used for placing. Can't be <c>null</c>.</param>
            <param name="bTransient">Determins if created object will be transient.</param>
            <param name="colCreatePlacements">Collection which will be filled with created objects. Can be <c>null</c>.</param>
            <returns>
                <c>True</c> if accessory has been placed automatically.
</returns>
            <remarks>
Accessories are placed automatically, which means that their transformation have been calculated and set, only if it results from the information contained in the accessory placement.
In other case accessories transformation must be calculated and set manually.
</remarks>
            <example>
The following examples shows how to insert a 3d accessory.
<code lang="cs" source="P8_API_Example_HEServices_DeviceService_InsertAccessory3D.cs.txt" /></example>
            <exception cref="T:System.ArgumentNullException">NULL was passed as a needed parameter.</exception>
            <exception cref="T:System.ArgumentException">Invalid or empty parameter passed.</exception>
            <exception cref="T:System.ApplicationException">The internal interface could not be created.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.HEServicesBase">Creation of accessory failed. Please check if accessory placement is assigned to the article or the installation variant is valid.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred while performing the action. Please refer to the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.SortTerminalStrips(Eplan.EplApi.DataModel.EObjects.TerminalStrip[],Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods)">
            <summary>
Sorts terminal strips with one of the following sort methods specified by sortKind parameter:
	- Default,
	- Numeric,
	- AlphaNumeric,
	- Position,
	- ExtCable,
	- Bridges,
	- WriteSortIdToAll
</summary>
            <param name="arrTerminalStrips">Array of terminal strips to sort.</param>
            <param name="sortKind">Specifies sort method.</param>
            <exception cref="!:ArgumentNullException">NULL was passed as a parameter.</exception>
            <exception cref="!:ArgumentException">Invalid parameter passed.</exception>
            <exception cref="!:ApplicationException">The internal interface could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing the action. Please refer to the exception message.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods.WriteSortIdToAll">
            <summary>Given sequence</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods.Bridges">
            <summary>By jumpers</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods.ExtCable">
            <summary>By external cables</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods.Position">
            <summary>Page-based</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods.AlphaNumeric">
            <summary>Alphanumeric</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods.Numeric">
            <summary>Numeric</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods.Default">
            <summary>Delete sorting</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.DeviceService.TerminalStripSortMethods">
            <summary>
Terminal strips sort methods
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.UpdateDevice(Eplan.EplApi.DataModel.StorableObject)">
            <summary>
Updates a given device or a connection with data from the referenced article(s).
</summary>
            <returns>
FALSE, if the object given as parameter doesn't have any article references.
</returns>
            <remarks>
Component-specific data will be transfered from article to main-function,
function template-data from article will be transfered to all functions of device,
modules will be transfered to functions of device, when article is a module and main-function is a blackbox or plcbox,
the referenced articles will be stored to project (if they were not before).
</remarks>
            <param name="oObject">Main function of the device or a connection.</param>
            <example>
                <code lang="cs" source="P8_API_Example_HEServices_DeviceService_UpdateDevice.cs.txt" />
            </example>
            <exception cref="!:ArgumentNullException">NULL was passed as a parameter.</exception>
            <exception cref="!:ArgumentException">Invalid object passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing the action. Please refer to the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectPlugStrips(Eplan.EplApi.DataModel.EObjects.Plug[],System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of plug strips
that the passed plugs belong to.
</summary>
            <param name="arrPlugs">Array of plugs to perform the correction on.</param>
            <param name="bAddMissingStripDefs">If true, unplaced plug strip definitions are generated
			for any non-default plug strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective plugs
			(see P8 help).</param>
            <exception cref="!:ArgumentNullException">NULL or empty array was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectPlugStrips(Eplan.EplApi.DataModel.EObjects.Plug[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of plug strips
that the passed plugs belong to.
</summary>
            <param name="arrPlugs">Array of plugs to perform the correction on.</param>
            <param name="bAllowMultiDesignations">If true, identical plug designations
			occurring multiple times within a plug strip are not reported 
			as errors.</param>
            <param name="bAddMissingStripDefs">If true, unplaced plug strip definitions are generated
			for any non-default plug strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective plugs
			(see P8 help).</param>
            <exception cref="!:ArgumentNullException">NULL or empty array was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectPlugStrips(Eplan.EplApi.DataModel.Project,System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of all plug strips
in the project.
</summary>
            <param name="bAddMissingStripDefs">If true, unplaced plug strip definitions are generated
			for any non-default plug strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective plugs
			(see P8 help).</param>
            <exception cref="!:ArgumentNullException">NULL was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectPlugStrips(Eplan.EplApi.DataModel.Project,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of all plug strips
in the project.
</summary>
            <param name="bAllowMultiDesignations">If true, identical plug designations
			occurring multiple times within a plug strip are not reported 
			as errors.</param>
            <param name="bAddMissingStripDefs">If true, unplaced plug strip definitions are generated
			for any non-default plug strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective plugs
			(see P8 help).</param>
            <exception cref="!:ArgumentNullException">NULL was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectTerminalStrips(Eplan.EplApi.DataModel.EObjects.Terminal[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of terminal strips
that the passed terminals belong to.
</summary>
            <param name="arrTerminals">Array of terminals to perform the correction on.</param>
            <param name="bAllowMultiDesignations">If true, identical terminal designations
			occurring multiple times within a terminal strip are not reported 
			as errors.</param>
            <param name="bAddMissingStripDefs">If true, unplaced term. strip definitions are generated
			for any non-default terminal strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective terminals
			(see P8 help).</param>
            <param name="bManualSaddleJumpers">If true, obsolete manual saddle jumpers of terminals
			are corrected.</param>
            <exception cref="!:ArgumentNullException">NULL or empty array was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectTerminalStrips(Eplan.EplApi.DataModel.EObjects.Terminal[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of terminal strips
that the passed terminals belong to.
</summary>
            <param name="arrTerminals">Array of terminals to perform the correction on.</param>
            <param name="bAllowMultiDesignations">If true, identical terminal designations
			occurring multiple times within a terminal strip are not reported 
			as errors.</param>
            <param name="bAddMissingStripDefs">If true, unplaced term. strip definitions are generated
			for any non-default terminal strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective terminals
			(see P8 help).</param>
            <exception cref="!:ArgumentNullException">NULL or empty array was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectTerminalStrips(Eplan.EplApi.DataModel.Project,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of all terminal strips
in the project.
</summary>
            <param name="oProject">Project which the action will be performed on.</param>
            <param name="bAllowMultiDesignations">If true, identical terminal designations
			occurring multiple times within a terminal strip are not reported 
			as errors.</param>
            <param name="bAddMissingStripDefs">If true, unplaced term. strip definitions are generated
			for any non-default terminal strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective terminals
			(see P8 help).</param>
            <param name="bManualSaddleJumpers">If true, obsolete manual saddle jumpers of terminals
			are corrected.</param>
            <exception cref="!:ArgumentNullException">NULL was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CorrectTerminalStrips(Eplan.EplApi.DataModel.Project,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
This method starts automatic correction of all terminal strips
in the project.
</summary>
            <param name="oProject">Project which the action will be performed on.</param>
            <param name="bAllowMultiDesignations">If true, identical terminal designations
			occurring multiple times within a terminal strip are not reported 
			as errors.</param>
            <param name="bAddMissingStripDefs">If true, unplaced term. strip definitions are generated
			for any non-default terminal strips.</param>
            <param name="bSwapNumberOftargets">If true, swaps number of targets at defective terminals
			(see P8 help).</param>
            <exception cref="!:ArgumentNullException">NULL was passed as a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for automatic correction
									   could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while performing
                                the action. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.GetTemplatesFromDeviceList(Eplan.EplApi.DataModel.Project)">
            <summary>
This method returns an array of DeviceService::TemplatesInfo 
containing information about function templates associated
with specific part numbers existing in the device list
of the given project.
</summary>
            <param name="oProject">Project from which the device list will be
                       searched.</param>
            <returns>An array of DeviceService::TemplatesInfo objects
containing information about function templates associated
with specific part numbers.</returns>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.DeleteDeviceList(Eplan.EplApi.DataModel.Project)">
            <summary>
This function deletes the device list in the given project.
</summary>
            <param name="oProject">Project in which the device list will be
                       deleted.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for deleting
                                       device lists could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while deleting the
                                device list. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.DeleteDeviceList(System.String)">
            <summary>
This function deletes the device list in the given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project in which
                             the device list will be deleted.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for deleting
                                       device lists could not be created.</exception>
            <exception cref="!:BaseException">An error occurred while deleting the
                                device list. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ImportDevicesText(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Int32,System.Int32,Eplan.EplApi.DataModel.FunctionDefinition,Eplan.EplApi.DataModel.FunctionDefinition,Eplan.EplApi.HEServices.DeviceService.ImportMode)">
            <summary>
This function imports devices from an text file into a given project.
</summary>
            <param name="oProject">Project into which the devices will be imported.</param>
            <param name="strImportFilePath">Full file name of the devices file to import. </param>
            <param name="strSchemeName">Name of the import scheme. If the scheme name is empty the last used scheme of the project will be used.</param>
            <param name="strSeparator">Char to separate column values of the text.</param>
            <param name="nHeadLinePos">The position of the head line that will be used to asssign the column values at the import.</param>
            <param name="nHeadLineCount">The count of head lines that will be skipped at the import.</param>
            <param name="oFuncDef">Default Function Definition</param>
            <param name="oTermFuncDef">Default Terminal Function Definition</param>
            <param name="eMode">The import mode can be a combination of the XPProcImportMode enum and controls the import action (in)(optional)
eCreateMode = 1: The import create only missing device tags
eChangeMode = 2: The import change only existing device tags
eDeleteMode = 4: The import delete only unnecessary existing device tags</param>
            <remarks> If new schema is not present old import method is used</remarks>
            <returns>
Result is returned as array of StorableObjects. 
</returns>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing
                                       devices could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import of
                                devices. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ImportDevicesExcel(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Int32,System.Int32,Eplan.EplApi.DataModel.FunctionDefinition,Eplan.EplApi.DataModel.FunctionDefinition,Eplan.EplApi.HEServices.DeviceService.ImportMode)">
            <summary>
This function imports devices from an Excel file into a given project.
</summary>
            <param name="oProject">Project into which the devices will be imported.</param>
            <param name="strImportFilePath">Full file name of the devices file to import. </param>
            <param name="strSchemeName">Name of the import scheme. If the scheme name is empty the last used scheme of the project will be used.</param>
            <param name="strTableName">Excel sheet name.</param>
            <param name="nHeadLinePos">The position of the head line that will be used to asssign the column values at the import.</param>
            <param name="nHeadLineCount">The count of head lines that will be skipped at the import.</param>
            <param name="oFuncDef">Default Function Definition</param>
            <param name="oTermFuncDef">Default Terminal Function Definition</param>
            <param name="eMode">The import mode can be a combination of the XPProcImportMode enum and controls the import action (in)(optional)
eCreateMode = 1: The import create only missing device tags
eChangeMode = 2: The import change only existing device tags
eDeleteMode = 4: The import delete only unnecessary existing device tags</param>
            <remarks> If new schema is not present old import method is used</remarks>
            <returns>
Result is returned as array of StorableObjects. 
</returns>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing
                                       devices could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import of
                                devices. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ImportDevices(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
This function imports devices into a given project.
</summary>
            <param name="oProject">Project into which the devices will be imported.</param>
            <param name="strImportFilePath">Full file name of the devices file to import. </param>
            <param name="strSchemeName">Name of the import scheme. If the scheme name is empty the last used scheme of the project will be used.</param>
            <remarks />
            <returns>
Result is returned as array of StorableObjects.
</returns>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing
                                       devices could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import of
                                devices. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ExportDeviceList(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
This function exports the device list of a given project.
It is used for exporting devices from the planning list (but neither all devices from the project nor all from the bill of materials).
</summary>
            <param name="oProject">Project from which the device list will be
                       exported.</param>
            <param name="strExportFilePath">Full file name of the device list file to export. </param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the export of
                                a device list. Please refer to the
                                exception message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> strConverter </c> isn't valid converter or such conversion doesn't exist at all.
</exception>
            <seealso text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ExportDeviceList(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.DeviceService.Format)">
            <summary>
This function exports the device list of a given project.
It is used for exporting devices from the planning list (but neither all devices from the project nor all from the bill of materials).
</summary>
            <param name="oProject">Project from which the device list will be
                       exported.</param>
            <param name="strExportFilePath">Full file name of the device list file to export. </param>
            <param name="fileFormat">Format of the export file\: By default the
                         following file formats are available\: XML or
                         CSV. The enum Format defines the available
                         values. If an invalid format is set, the file is
                         exported as XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the export of
                                a device list. Please refer to the
                                exception message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> fileFormat </c> isn't valid converter or such conversion dosesn't exist at all.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ExportDeviceList(System.String,System.String,System.String)">
            <summary>
This function exports the device list of a given project.
It is used for exporting devices from the planning list (but neither all devices from the project nor all from the bill of materials).
</summary>
            <param name="strFullLinkFileName">Full link file name of the project from which the device list will be
                       exported.</param>
            <param name="strExportFilePath">Full file name of the device list file to export. </param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the export of
                                a device list. Please refer to the
                                exception message.</exception>
            <seealso text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> strConverter </c> isn't valid converter or such conversion dosesn't exist at all.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ExportDeviceList(System.String,System.String,Eplan.EplApi.HEServices.DeviceService.Format)">
            <summary>
This function exports the device list of a given project.
It is used for exporting devices from the planning list (but neither all devices from the project nor all from the bill of materials).
</summary>
            <param name="strFullLinkFileName">Full link file name of the project from which the device list will be
                       exported.</param>
            <param name="strExportFilePath">Full file name of the device list file to export. </param>
            <param name="fileFormat">Format of the export file\: By default the
                         following file formats are available\: XML or
                         CSV. The enum Format defines the available
                         values. If an invalid format is set, the file is
                         exported as XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the export of
                                a device list. Please refer to the
                                exception message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> fileFormat </c> isn't valid converter or such conversion dosesn't exist at all.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ImportDeviceList(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
This function imports a device list into a given project.
</summary>
            <param name="oProject">Project into which the device list will be
                       imported.</param>
            <param name="strImportFilePath">Full file name of the device list file to import. </param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import of
                                a device list. Please refer to the
                                exception message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> strConverter </c> isn't valid converter or such conversion dosesn't exist at all.
</exception>
            <seealso text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ImportDeviceList(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.DeviceService.Format)">
            <summary>
This function imports a device list into a given project.
</summary>
            <param name="oProject">Project into which the device list will be
                       imported.</param>
            <param name="strImportFilePath">Full file name of the device list file to import. </param>
            <param name="fileFormat">Format of the import file\: By default the
                         following file formats are available\: XML or
                         CSV. The enum Format defines the available
                         values. If an invalid format is set, the file is
                         expected to be XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import of
                                a device list. Please refer to the
                                exception message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> fileFormat </c> isn't valid converter or such conversion dosesn't exist at all.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ImportDeviceList(System.String,System.String,System.String)">
            <summary>
This function imports a device list into a given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project into which the
                             device list will be imported.</param>
            <param name="strImportFilePath">Full file name of the device list file to import.
                                </param>
            <param name="strConverter">Converter long name, see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import of
                                a device list. Please refer to the
                                exception message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> strConverter </c> isn't valid converter or such conversion dosesn't exist at all.
</exception>
            <seealso text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.ImportDeviceList(System.String,System.String,Eplan.EplApi.HEServices.DeviceService.Format)">
            <summary>
This function imports a device list into a given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project into which the
                             device list will be imported.</param>
            <param name="strImportFilePath">Full file name of the device list file to import.
                                </param>
            <param name="fileFormat">Format of the import file\: By default the
                         following file formats are available\: XML or
                         CSV. The enum FILE_FORMAT defines the available
                         values. If an invalid format is set, the file is
                         expected to be XML.</param>
            <remarks />
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface for importing a
                                       device list could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during the import of
                                a device list. Please refer to the
                                exception message.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
	Thrown when given parameter <c> fileFormat </c> isn't valid converter or such conversion doesn't exist at all.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.GetAllDeviceListItems(Eplan.EplApi.DataModel.Project)">
            <summary>
Returns an array of all device list items in the project.
</summary>
            <param name="oProject">Project to get the items from.</param>
            <exception cref="!:ArgumentException">Is thrown in case of invalid argument.</exception>
            <exception cref="!:ArgumentNullException">Is thrown, if some argument was not passed.</exception>
            <exception cref="!:BaseException">If an error occurred while getting the device list entries.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.DeleteDeviceListItem(Eplan.EplApi.DataModel.DeviceListEntry)">
            <summary>
Removes the entry from the project's device list.
</summary>
            <param name="oEntry">The entry to remove.</param>
            <exception cref="!:ArgumentException">Is thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Is thrown, if some argument was not passed.</exception>
            <exception cref="!:BaseException">If an error occurred while removing a device list entry.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CreateDeviceListItem(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Create a new device list entry.
</summary>
            <param name="oProject">Project in which the new device list entry will be created.</param>
            <param name="strPartNumber">Part number.</param>
            <param name="strPartVariant">Part variant.</param>
            <exception cref="!:ArgumentException">Is thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Is thrown, if some argument was not passed.</exception>
            <exception cref="!:BaseException">If an error occurred while creating a device list entry.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CreateDeviceListItem(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Create a new device list entry.
</summary>
            <param name="oProject">Project in which the new device list entry will be created.</param>
            <param name="strPartNumber">Part number.</param>
            <exception cref="!:ArgumentException">Is thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Is thrown, if some argument was not passed.</exception>
            <exception cref="!:BaseException">If an error occurred while creating a device list entry.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CreateDevice(System.String,System.String,Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD)">
            <summary>
Creates a new device in the project and inserts it on a page.
If the article has a macro specified, the macro is inserted onto the specified page.
</summary>
            <param name="strPartNummer">The article's part number.</param>
            <param name="strPartVariant">The article's variant. If not existing variant is specified, 
							 the first available variant is selected.</param>
            <param name="pPage">A page to insert the article's macro on.</param>
            <param name="ptInsert">Insertion point of the macro.</param>
            <remarks>Method does not return 3D objects even when they are created. Warning: Inserted functions are not numerated by the method.
 </remarks>
            <exception cref="!:ArgumentException">Is thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Is thrown, if some of the arguments are NULL.</exception>
            <exception cref="!:ApplicationException">A necessary internal interface for creating devices could not be created.</exception>
            <exception cref="!:BaseException">If an error occurred while creating a device.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.CreateDevice(Eplan.EplApi.DataModel.Project,System.String,System.String,Eplan.EplApi.DataModel.FunctionPropertyList)">
            <summary>
Create a new device.
</summary>
            <param name="oProject">Project in which the new device
                       will be .</param>
            <param name="strPartNummer">Part number.</param>
            <param name="strPartVariant">Part variant. If not existing variant is specified, 
							 then by default is selected a first available part's variant.</param>
            <param name="pLocationList">property list for the hierarchy
                           properties. This parameter may be NULL.
						   If the parameter is NULL or the list doesn't contain code letter and counter properties,
						   the name of the device will be generated in accordance to the device numeration settings.</param>
            <remarks>Method does not return 3D objects even when they are created.</remarks>
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \arguments.</exception>
            <exception cref="!:ArgumentNullException">Is thrown, if some argument was not
                                        passed.</exception>
            <exception cref="!:ApplicationException">A necessary internal interface for
                                       creating devices could not be created.</exception>
            <exception cref="!:BaseException">If an Error occurred while creating a
                                device.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.Format.CSV_COMMA_SEP">
            <summary>CSV (comma-separated) file format</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.Format.TXT">
            <summary>TXT file format</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.Format.CSV">
            <summary>CSV (semicolon-separated) file format</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.DeviceService.Format.XML">
            <summary>XML file format</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.DeviceService.Format">
            <summary>
Import/Export format
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DeviceService.TemplatesInfo.Templates">
            <summary>
An array of transient objects representing templates
associated with the part number.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DeviceService.TemplatesInfo.PartNumber">
            <summary>
An article's part number contained in the device list.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.DeviceService.TemplatesInfo">
            <summary>
This class provides information about the templates associated
with a specific part number contained in the device list.
Objects of this class are returned by DeviceService::GetTemplatesFromDeviceList method.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DeviceService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.DeviceService">
            <summary>
Class providing functionality for managing devices.
</summary>
        </member>
        <member name="M:IXHImport.importData(std.vector&lt;DbObjectId,std.allocator&lt;DbObjectId&gt;&gt;*,ProjectHandle,EString,EContext*)">
            <summary>
Function actually used for importing the harness related data.
</summary>
            <param name="vecObjectIds">Modified objects (out)(obligatory)</param>
            <param name="hProject">Handle to the project in which we import the content</param>
            <param name="esSource">Source file name for the import</param>
            <param name="pContext">Current context object with following parameter values
	"ShowAdjustmentDlg" = 0: The adjustment dialog will not be shown before import
	"ShowAdjustmentDlg" = 1: The adjustment dialog will be shown before import (default)
	"ImportMode" = 1: The import create only missing objects
	"ImportMode" = 2: The import change only existing objects
	"ImportMode" = 4: The import delete only unnecessary existing objects
</param>
        </member>
        <member name="M:IXHImport.importData(std.vector&lt;DbObjectId,std.allocator&lt;DbObjectId&gt;&gt;*,EString,EString,EContext*)">
            <summary>
Function actually used for importing the harness related data.
</summary>
            <param name="vecObjectIds">Modified objects (out)(obligatory)</param>
            <param name="esProject">The full path of project.</param>
            <param name="esSource">Source file name for the import</param>
            <param name="pContext">Current context object with following parameter values
	"ShowAdjustmentDlg" = 0: The adjustment dialog will not be shown before import
	"ShowAdjustmentDlg" = 1: The adjustment dialog will be shown before import (default)
	"ImportMode" = 1: The import create only missing objects
	"ImportMode" = 2: The import change only existing objects
	"ImportMode" = 4: The import delete only unnecessary existing objects
</param>
        </member>
        <member name="M:IXHImport.importData(ProjectHandle,EString,EContext*)">
            <summary>
Function actually used for importing the harness related data.
</summary>
            <param name="hProject">Handle to the project in which we import the content</param>
            <param name="esSource">Source file name for the import</param>
            <param name="pContext">Current context object with following parameter values
	"ShowAdjustmentDlg" = 0: The adjustment dialog will not be shown before import
	"ShowAdjustmentDlg" = 1: The adjustment dialog will be shown before import (default)
	"ImportMode" = 1: The import create only missing objects
	"ImportMode" = 2: The import change only existing objects
	"ImportMode" = 4: The import delete only unnecessary existing objects
</param>
        </member>
        <member name="M:IXHImport.importData(EString,EString,EContext*)">
            <summary>
Function actually used for importing the harness related data.
</summary>
            <param name="esProject">The full path of project.</param>
            <param name="esSource">Source file name for the import</param>
            <param name="pContext">Current context object with following parameter values
	"ShowAdjustmentDlg" = 0: The adjustment dialog will not be shown before import
	"ShowAdjustmentDlg" = 1: The adjustment dialog will be shown before import (default)
	"ImportMode" = 1: The import create only missing objects
	"ImportMode" = 2: The import change only existing objects
	"ImportMode" = 4: The import delete only unnecessary existing objects
</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.HarnessService.ImportData(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Imports Harness data from a file.
</summary>
            <param name="oProject">Project into which the Harness data
                       will be imported.</param>
            <param name="strFileName">Full file name of the file to
                          import. </param>
            <param name="bShowAdjustmentDlg">Shows adjustment dialog when true.</param>
            <returns>
An array of created or modified StorableObjects.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for importing Harness
                                       data could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during the import.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.HarnessService.ImportData(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.HarnessService.ImportMode)">
            <summary>
Imports Harness data from a file.
</summary>
            <example>Following example shows how to use the method:
<code lang="cs" source="P8_API_Example_HEServices_HarnessService_ImportData_Example1.cs.txt" /></example>
            <param name="oProject">Project into which the Harness data
                       will be imported.</param>
            <param name="strFileName">Full file name of the file to
                          import. </param>
            <param name="nImportMode">Mode for the import.</param>
            <returns>
An array of created or modified StorableObjects.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for importing Harness
                                       data could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during the import.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.HarnessService.ExportData(Eplan.EplApi.DataModel.Project,System.String,System.String,Eplan.EplApi.HEServices.HarnessService.FilterMode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
Exports Harness data.
</summary>
            <example>Following example shows how to use the method:
<code lang="cs" source="P8_API_Example_HEServices_HarnessService_ExportData_Example1.cs.txt" /></example>
            <param name="oProject">Project of which the Harness data
                       will be exported.</param>
            <param name="strFileName">Full name of the output file.</param>
            <param name="strLanguage">Language used during the
                          export operation, e.g.
                          de_DE, en_EN, etc.</param>
            <param name="nFilterMode">Defines the scope of export.</param>
            <param name="colFilterValues">Specifies the filter criteria for given filtering mode. Collection can contain wire harness names.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting
                                       data could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.HarnessService.ExportData(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Exports Harness data from project without any filtering.
</summary>
            <param name="oProject">Project of which the Harness data
                       will be exported.</param>
            <param name="strFileName">Full name of the output file.</param>
            <param name="strLanguage">Language used during the
                          export operation, e.g.
                          de_DE, en_EN, etc.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting
                                       data could not be
                                       created. </exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.HarnessService.ImportMode.Delete">
            <summary>Delete only unnecessary existing objects</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.HarnessService.ImportMode.Change">
            <summary>Change only existing objects</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.HarnessService.ImportMode.Create">
            <summary>Create only missing objects</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.HarnessService.ImportMode">
            <summary>
Mode for the import can be a combination of following values 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.HarnessService.FilterMode.HarnessSelection">
            <summary>If functions or connections assigned to harness in selection, apply mode "HarnessRelated", otherwise "HarnessAll"</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.HarnessService.FilterMode.HarnessAll">
            <summary>Export all functions, connections and harness objects in project without any filtering</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.HarnessService.FilterMode.HarnessRelated">
            <summary>Export all harness objects together with directly assigned and indirectly related objects,</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.HarnessService.FilterMode">
            <summary>
Scope of data export
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.HarnessService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.HarnessService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.HarnessService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.HarnessService">
            <summary>
Class providing harness functionalities such as import or export.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.FindMatchingTemplatePairs(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Connection[],System.Boolean,Eplan.EplApi.DataModel.AnyPropertyId[],Eplan.EplApi.DataModel.Function,System.Boolean)">
            <summary>
Matches templates and wires. No changes on objects are performed.
</summary>
            <remarks>
Function tries to find a template for every wire. 
A matching template will be found for a wire, only if both have the same 
<see cref="P:Eplan.EplApi.DataModel.ConnectionPropertyList.POTENTIAL_TYPE(System.Int32)"> potential type</see>.
</remarks>
            <returns>
Result is return as array of <c>KeyValuePair</c>. <c>Key</c> contain template and <c>Value</c> contain a
Connection (wire). If no match was found for a wire then <c>Key</c> for its pair is NULL.
If no match was found for a template then <c>Value</c> for its pair is NULL.
</returns>
            <param name="oProject">Project on which this operation will be executed.</param>
            <param name="arrTemplatesToWires">Contains pairs wire and template which will be assign to the wire.</param>
            <param name="bChangeExistingProperties">If true matching procedure act as existing properties could be changed.</param>
            <param name="arrListOfExcludedAnyPropertyIds">List of properties ids which wouldn't be changed. Can be NULL.</param>
            <param name="oSortInfoCable">Function that contains information for sorting rules. Can be NULL.</param>
            <param name="bDividePairsBeforeReassign">If true and bChangeExistingProperties is true 
another wire with higher sorting order may be match to the template instead of the old assigned wire.</param>
            <exception cref="!:ArgumentNullException">If necessary parameter is NULL.</exception>
            <exception cref="!:ArgumentException">If parameter is invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred when matching wires. 
Please read the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.DoReassignWires(Eplan.EplApi.DataModel.Function,Eplan.EplApi.DataModel.Connection[],System.Boolean,Eplan.EplApi.DataModel.AnyPropertyId[])">
            <summary>
All wires in cable are assigned to a matching template of the cable or shielding.
User specifies templates to which wires will be assigned. Works only for <see text="Cable" cref="T:Eplan.EplApi.DataModel.EObjects.Cable" /> or
<see text="Function" cref="T:Eplan.EplApi.DataModel.Function" /> with category <see text="Shielding" cref="F:Eplan.EplApi.DataModel.Function.Enums.Category.Shielding" />.
</summary>
            <remarks>
Every template will be used only once.
A wire will be assigned to a template, only if both have the same 
<see cref="P:Eplan.EplApi.DataModel.ConnectionPropertyList.POTENTIAL_TYPE(System.Int32)">potential type</see>.
If a wire is assigned to a template, the identifying wire properties of the template will be copied to the wire.
<p>Only functions with category <see text="Cable" cref="F:Eplan.EplApi.DataModel.Function.Enums.Category.Cable" /> or 
<see text="Shielding" cref="F:Eplan.EplApi.DataModel.Function.Enums.Category.Shielding" /> can be passed as <c>oFunction</c>.</p></remarks>
            <param name="oFunction">Function on which this procedure will be executed.</param>
            <param name="arrWireTemplates">List of templates which will be assign to wires.</param>
            <param name="bChangeExistingProperties">If true existing wire properties can be changed.</param>
            <param name="arrListOfExcludedAnyPropertyIds">List of properties ids. 
Value of those properties will not be changed. Can be NULL.</param>
            <exception cref="!:ArgumentNullException">If parameter is NULL.</exception>
            <exception cref="!:ArgumentException">If parameter is invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred when reassigning wires. 
Please read the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.DoReassignWires(Eplan.EplApi.DataModel.Function,System.Boolean,Eplan.EplApi.DataModel.AnyPropertyId[])">
            <summary>
All wires in cable are assigned to a matching template of the cable. Works only for <see text="Cable" cref="T:Eplan.EplApi.DataModel.EObjects.Cable" /> or
<see text="Function" cref="T:Eplan.EplApi.DataModel.Function" /> with category <see text="Shielding" cref="F:Eplan.EplApi.DataModel.Function.Enums.Category.Shielding" />.
</summary>
            <remarks>
Every template will be used only once.
A wire will be assigned to a template, only if both have the same 
<see cref="P:Eplan.EplApi.DataModel.ConnectionPropertyList.POTENTIAL_TYPE(System.Int32)">potential type</see>.
If a wire is assigned to a template, the identifying wire properties of the template will be copied to the wire.
<p>Only functions with category <see text="Cable" cref="F:Eplan.EplApi.DataModel.Function.Enums.Category.Cable" /> or 
<see text="Shielding" cref="F:Eplan.EplApi.DataModel.Function.Enums.Category.Shielding" /> can be passed as <c>oFunction</c>.</p></remarks>
            <param name="oFunction">Function on which this procedure will be executed.</param>
            <param name="bChangeExistingProperties">If true existing wire properties can be changed.</param>
            <param name="arrListOfExcludedAnyPropertyIds">List of properties ids. 
Value of those properties will not be changed. Can be NULL.</param>
            <exception cref="!:ArgumentNullException">If <c>oCable</c> is NULL.</exception>
            <exception cref="!:ArgumentException">If parameter is invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred when reassigning wires. 
Please read the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.DoReassignWires(Eplan.EplApi.DataModel.Project,System.Boolean,Eplan.EplApi.DataModel.AnyPropertyId[])">
            <summary>
All wires in all cables from the project are assigned to a matching template of a cable.
</summary>
            <remarks>
Every template will be used only once.
A wire will be assigned to a template, only if both have the same 
<see cref="P:Eplan.EplApi.DataModel.ConnectionPropertyList.POTENTIAL_TYPE(System.Int32)">potential type</see>.
If a wire is assigned to a template, the identifying wire properties of the template will be copied to the wire.
</remarks>
            <param name="oProject">Project on which this procedure will be executed.</param>
            <param name="bChangeExistingProperties">If true existing wire properties can be changed.</param>
            <param name="arrListOfExcludedAnyPropertyIds">List of properties ids. 
Value of those properties will not be changed. Can be NULL.</param>
            <exception cref="!:ArgumentNullException">If <c>oProject</c> is NULL.</exception>
            <exception cref="!:ArgumentException">If parameter is invalid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred when reassigning wires. 
Please read the exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.DeleteAutoCable(System.String)">
            <summary>
removes automatically created cables and connection
definition points. Automatically set names also will be
deleted.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                                  project in which the
                                  cables will be removed.</param>
            <exception cref="!:ArgumentException">invalid parameter.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for deleted
                                       cables could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred
                                when deleting cables
                                please read the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.DeleteAutoCable(Eplan.EplApi.DataModel.Project)">
            <summary>
removes automatically created cables and connection
definition points. Automatically set names also will be
deleted.
</summary>
            <param name="oProject">Project in which the cables will be
                       removed.</param>
            <exception cref="!:ArgumentException">invalid parameter.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for deleted
                                       cables could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred
                                when deleting cables
                                please read the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.CreateAutoCable(System.String,System.String,System.Boolean)">
            <summary>
Automatically generate cables in the given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project in which cables will be
                       generated.</param>
            <param name="strCreateSchemeName">Name of the scheme used for generating
                                  cables.</param>
            <param name="bRegenrateConnections">If set to true, connections are
                                    generated prior to cable generation.</param>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for cable
                                       generation could not be created.</exception>
            <exception cref="!:BaseException">Cable generation has reported an error.
                                Please read the exception message.</exception>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <remarks>
If the user scheme given in strCreateSchemeName does not
exist, an ArgumentException will be thrown. If you pass an
empty string to strCreateSchemeName, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.CreateAutoCable(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Automatically generate cables in the given project.
</summary>
            <param name="oProject">Project in which cables will be
                       generated.</param>
            <param name="strCreateSchemeName">Name of the scheme used for generating
                                  cables.</param>
            <param name="bRegenrateConnections">If set to true, connections are
                                    generated prior to cable generation.</param>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for cable
                                       generation could not be created.</exception>
            <exception cref="!:BaseException">Cable generation has reported an error.
                                Please read the exception message.</exception>
            <remarks>
If the user scheme given in strCreateSchemeName does not
exist, an ArgumentException will be thrown. If you pass an
empty string to strCreateSchemeName, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.AutoCableSelection(System.String,System.String,System.Boolean)">
            <summary>
Commits an automatic cable selection in the project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project for which the cable selection is
                       done.</param>
            <param name="strAutoSelSchemeName">scheme name for the automatic cable
                                   selection.</param>
            <param name="bOnlyAutomaticCables">If set to true, the selection is only
                                    done for automatically generated cables.</param>
            <exception cref="!:ArgumentException">invalid parameters found, e.g. the
                                    scheme was invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface for generating
                                       cables could not be created.</exception>
            <exception cref="!:BaseException">Error during cable selection.</exception>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <remarks>
If the given user scheme (strAutoSelSchemeName) does not
exist, an ArgumentException is thrown. If the parameter
strAutoSelSchemeName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.AutoCableSelection(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Commits an automatic cable selection in the project.
</summary>
            <param name="oProject">Project for which the cable selection is
                       done.</param>
            <param name="strAutoSelSchemeName">scheme name for the automatic cable
                                   selection.</param>
            <param name="bOnlyAutomaticCables">If set to true, the selection is only
                                    done for automatically generated cables.</param>
            <exception cref="!:ArgumentException">invalid parameters found, e.g. the
                                    scheme was invalid.</exception>
            <exception cref="!:ApplicationException">\Internal interface for generating
                                       cables could not be created.</exception>
            <exception cref="!:BaseException">Error during cable selection.</exception>
            <remarks>
If the given user scheme (strAutoSelSchemeName) does not
exist, an ArgumentException is thrown. If the parameter
strAutoSelSchemeName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.RenumberCables(Eplan.EplApi.DataModel.Function[],System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
Method for numbering cables in a project.
</summary>
            <param name="oCables">An array of functions (cables, shildings) to number.</param>
            <param name="strNumberingSchemeName">Name of the scheme used for cable
                                     numbering.</param>
            <param name="bKeepOldNames">If set to true, already existing cable
                            names will not be changed.</param>
            <param name="nStartValue">Start value for the device tag counter.</param>
            <param name="nStepValue">The device tag counter will be
                         incremented by this value.</param>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ApplicationException">The internal interface necessary for
                                       numbering could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during numbering.
                                Please read the exception message..</exception>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <remarks>
If the user scheme given in strNumberingSchemeName does not
exist, an ArgumentException will be thrown. If you pass an
empty string to strCreateSchemeName, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.RenumberCables(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
Method for numbering cables in a project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project in which the cables will be
                       numbered.</param>
            <param name="strNumberingSchemeName">Name of the scheme used for cable
                                     numbering.</param>
            <param name="bKeepOldNames">If set to true, already existing cable
                            names will not be changed.</param>
            <param name="nStartValue">Start value for the device tag counter.</param>
            <param name="nStepValue">The device tag counter will be
                         incremented by this value.</param>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ApplicationException">The internal interface necessary for
                                       numbering could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during numbering.
                                Please read the exception message..</exception>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <remarks>
If the user scheme given in strNumberingSchemeName does not
exist, an ArgumentException will be thrown. If you pass an
empty string to strCreateSchemeName, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.RenumberCables(Eplan.EplApi.DataModel.Project,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
Method for numbering cables in a project.
</summary>
            <param name="oProject">Project in which the cables will be
                       numbered.</param>
            <param name="strNumberingSchemeName">Name of the scheme used for cable
                                     numbering.</param>
            <param name="bKeepOldNames">If set to true, already existing cable
                            names will not be changed.</param>
            <param name="nStartValue">Start value for the device tag counter.</param>
            <param name="nStepValue">The device tag counter will be
                         incremented by this value.</param>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ApplicationException">The internal interface necessary for
                                       numbering could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during numbering.
                                Please read the exception message..</exception>
            <remarks>
If the user scheme given in strNumberingSchemeName does not
exist, an ArgumentException will be thrown. If you pass an
empty string to strCreateSchemeName, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CableService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.CableService">
            <summary>
Class providing functionality for cables: numbering,
automatic cable selection, generate cable automatically,
delete automatically generated cables and add up cable
length. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PIDToOtherPlacementTypes(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronization from PID data onto other representations.
Corresponds to the Utilities' -&gt; 'Synchronization' -&gt; 'PI diagram --&gt; all representation types' main menu item.
</summary>
            <param name="oProject">Project that will be synchronized.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with errors. 
								This exception is also thrown when the project
								doesn't contain any functions to update from.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.CablingToAllConnectionTypes(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronization from 'cabling' connection data onto all other 
connection types (multi-line, panellayout 3D, single-line)
</summary>
            <param name="oProject">Project that will be
                       synchronized.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PanelLayout3DToAllConnectionTypes(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronization from 'panellayout 3D' connection data onto all other 
connection types (multi-line, cabling, single-line)
</summary>
            <param name="oProject">Project that will be
                       synchronized.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.MultilineToAllConnectionTypes(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronization from 'multi-line' connection data onto all other 
connection types (panellayout 3D, cabling, single-line)
</summary>
            <param name="oProject">Project that will be
                       synchronized.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.OverviewToMultilineAndSingleline(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronization from 'overview' data onto 'single-line'
and 'multi-line' data.
</summary>
            <param name="oProject">Project that will be
                       synchronized.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.SinglelineToMultilineAndOverview(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronization from 'single-line' data onto 'multi-line'
and 'overview' data.
</summary>
            <param name="oProject">Project that will be
                       synchronized.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.MultilineToSinglelineAndOverview(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronization from 'multi-line' data onto 'single-line'
and 'overview' data.
</summary>
            <param name="oProject">Project that will be
                       synchronized.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartToSystem(Eplan.EplApi.DataModel.Project,System.Collections.ArrayList,Eplan.EplApi.HEServices.Synchronize.StoreMode,System.Boolean)">
            <summary>
Synchronizes the specified parts into the parts master
database. Updates parts database. Parts in the project are
not changed. This method corresponds with the EPLAN
functionality in the menu "Utilities \&gt; Parts \&gt; Current
project --\&gt; parts database" for selected parts.
</summary>
            <param name="oProject">Project for which the parts will be
                       synchronized.</param>
            <param name="lParts">List of parts (objects of type <see text="Article" cref="T:Eplan.EplApi.DataModel.Article" /> or 
<see text="ArticleReference" cref="T:Eplan.EplApi.DataModel.ArticleReference" />) that will be synchronized.</param>
            <param name="storemode">Store mode. The enumeration <see text="StoreMode" cref="T:Eplan.EplApi.HEServices.Synchronize.StoreMode" />
                        defines the supported values. If an
                        invalid value is set, the value
                        AppendNew = 0 will be used. Default value is StoreMode::AppendNew.</param>
            <param name="bUseNotReferencedArticles">Specifies that not referenced articles are synchronized.</param>
            <remarks>


In order to have an article synchronized, it should exist as an entry in the project's parts 
or it should be referenced (i.e. exist as an ArticleReference).
</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
            <exception cref="!:IOException">Thrown in case of
                                database write protection.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartToSystem(Eplan.EplApi.DataModel.Project,System.Collections.ArrayList,Eplan.EplApi.HEServices.Synchronize.StoreMode)">
            <summary>
Synchronizes the specified parts into the parts master
database. Updates parts database. Parts in the project are
not changed. This method corresponds with the EPLAN
functionality in the menu "Utilities \&gt; Parts \&gt; Current
project --\&gt; parts database" for selected parts.
</summary>
            <param name="oProject">Project for which the parts will be
                       synchronized.</param>
            <param name="lParts">List of parts (objects of type <see text="Article" cref="T:Eplan.EplApi.DataModel.Article" /> or 
<see text="ArticleReference" cref="T:Eplan.EplApi.DataModel.ArticleReference" />) that will be synchronized.</param>
            <param name="storemode">Store mode. The enumeration <see text="StoreMode" cref="T:Eplan.EplApi.HEServices.Synchronize.StoreMode" />
                        defines the supported values. If an
                        invalid value is set, the value
                        AppendNew = 0 will be used.</param>
            <remarks>
Method calls PartToSystem(oProject, lParts, storemode, true) internally.



In order to have an article synchronized, it should exist as an entry in the project's parts 
or it should be referenced (i.e. exist as an ArticleReference).
</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
            <exception cref="!:IOException">Thrown in case of
                                database write protection.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartToSystem(Eplan.EplApi.DataModel.Project,System.Collections.ArrayList)">
            <summary>
Synchronizes the specified parts into the parts master
database. Updates parts database. Parts in the project are
not changed. This method corresponds with the EPLAN
functionality in the menu "Utilities \&gt; Parts \&gt; Current
project --\&gt; parts database" for selected parts.
</summary>
            <param name="oProject">Project for which the parts will be
                       synchronized.</param>
            <param name="lParts">List of parts (objects of type <see text="Article" cref="T:Eplan.EplApi.DataModel.Article" /> or 
<see text="ArticleReference" cref="T:Eplan.EplApi.DataModel.ArticleReference" />) that will be synchronized.</param>
            <remarks>
Method calls PartToSystem(oProject, lParts, StoreMode::AppendNew, true) internally.



In order to have an article synchronized, it should exist as an entry in the project's parts 
or it should be referenced (i.e. exist as an ArticleReference).
</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
            <exception cref="!:IOException">Thrown in case of
                                database write protection.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartToProject(Eplan.EplApi.DataModel.Project,System.Collections.ArrayList)">
            <summary>
Synchronizes the specified parts inside the project with the
parts in the parts master database. Updates parts inside
project. Parts in the database are not changed. This method
corresponds with the EPLAN functionality in the menu
"Utilities \&gt; Parts \&gt; Parts database --\&gt; current project"
for selected parts.
</summary>
            <param name="oProject">Project for which the parts will be
                       updated.</param>
            <param name="lParts">List of parts which will be updated.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartsFromSystemToProject(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Synchronize.StoreMode)">
            <summary>
Synchronizes the parts stored in the project with the parts
in the parts master database. Updates parts inside project.
Parts in the database are not changed. This method
corresponds with the EPLAN functionality in the menu
"Utilities \&gt; Parts \&gt; Parts database --\&gt; current project".
</summary>
            <param name="pProject">Project for which the parts will be
                       updated.</param>
            <param name="storeMode">Store mode. The enumeration <see text="StoreMode" cref="T:Eplan.EplApi.HEServices.Synchronize.StoreMode" />
                        defines the supported values.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartsFromSystemToProject(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronizes the parts stored in the project with the parts
in the parts master database. Updates parts inside project.
Parts in the database are not changed. This method
corresponds with the EPLAN functionality in the menu
"Utilities \&gt; Parts \&gt; Parts database --\&gt; current project".
</summary>
            <param name="pProject">Project for which the parts will be
                       updated.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartsFromSystemToProject(System.String,Eplan.EplApi.HEServices.Synchronize.StoreMode)">
            <summary>
Synchronizes the parts stored in the project with the parts
in the parts master database. Updates parts inside project.
Parts in the database are not changed. This method
corresponds with the EPLAN functionality in the menu
"Utilities \&gt; Parts \&gt; Parts database --\&gt; current project".
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                                  project for which the
                                  parts will be updated.</param>
            <param name="storeMode">Store mode. The enumeration <see text="StoreMode" cref="T:Eplan.EplApi.HEServices.Synchronize.StoreMode" />
                        defines the supported values.</param>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the synchronization process and will be closed
subsequently.


</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.PartsFromSystemToProject(System.String)">
            <summary>
Synchronizes the parts stored in the project with the parts
in the parts master database. Updates parts inside project.
Parts in the database are not changed. This method
corresponds with the EPLAN functionality in the menu
"Utilities \&gt; Parts \&gt; Parts database --\&gt; current project".
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                                  project for which the
                                  parts will be updated.</param>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the synchronization process and will be closed
subsequently.


</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.Parts(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Synchronize.StoreMode,System.Boolean)">
            <summary>
Synchronizes the parts in the project to the parts master
database. Updates parts database.
This method corresponds with the EPLAN
functionality in the menu "Utilities \&gt; Parts \&gt; Current
project --\&gt; parts database".



Additionally the user can specify, whether parts, which are
already existing in the parts database, should be modified.
</summary>
            <param name="pProject">Project for which the parts will be
                       synchronized.</param>
            <param name="storemode">Store mode determines, whether
                        parts, which are already existing in
                        the parts database, should be
                        modified. The enumeration <see text="StoreMode" cref="T:Eplan.EplApi.HEServices.Synchronize.StoreMode" />
                        defines the supported values. If an
                        invalid value is set, the value
                        AppendNew = 0 will be used. Default value is StoreMode::AppendNew.</param>
            <param name="bUseNotReferencedArticles">Specifies that not referenced articles are synchronized. Default value is <c>true</c></param>
            <remarks>


In order to have an article synchronized, it should exist as an entry in the project's parts 
or it should be referenced (i.e. exist as an ArticleReference).
</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
            <exception cref="!:IOException">Thrown in case of
                                database write protection.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.Parts(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.Synchronize.StoreMode)">
            <summary>
Synchronizes the parts in the project to the parts master
database. Updates parts database. Parts in the project are not changed.
This method corresponds with the EPLAN
functionality in the menu "Utilities \&gt; Parts \&gt; Current
project --\&gt; parts database".



Additionally the user can specify, whether parts, which are
already existing in the parts database, should be modified.
</summary>
            <param name="pProject">Project for which the parts will be
                       synchronized.</param>
            <param name="storemode">Store mode determines, whether
                        parts, which are already existing in
                        the parts database, should be
                        modified. The enumeration <see text="StoreMode" cref="T:Eplan.EplApi.HEServices.Synchronize.StoreMode" />
                        defines the supported values. If an
                        invalid value is set, the value
                        AppendNew = 0 will be used.</param>
            <remarks>


In order to have an article synchronized, it should exist as an entry in the project's parts 
or it should be referenced (i.e. exist as an ArticleReference).
</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
            <exception cref="!:IOException">Thrown in case of
                                database write protection.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.Parts(Eplan.EplApi.DataModel.Project)">
            <summary>
Synchronizes the parts in the project to the parts master
database. Updates parts database.
When there is a reference to a part in a project, and the part is not in the project,
then after invoking oSynchronize.Parts(oProject), this part becomes
stored in the project (Project.Articles increases by 1),
in other case parts in the project are not changed.
This method corresponds with the EPLAN.
functionality in the menu "Utilities \&gt; Parts \&gt; Current
project --\&gt; parts database".
</summary>
            <param name="pProject">Project for which the parts will be
                       synchronized.</param>
            <remarks>


In order to have an article synchronized, it should exist as an entry in the project's parts 
or it should be referenced (i.e. exist as an ArticleReference).
</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
            <exception cref="!:IOException">Thrown in case of
                                database write protection.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.Parts(System.String)">
            <summary>
Synchronizes the parts in the project to the parts master
database. Updates parts database.
When there is a reference to a part in a project, and the part is not in the project,
then after invoking oSynchronize.Parts(oProject), this part becomes
stored in the project (Project.Articles increases by 1),
in other case parts in the project are not changed.
This method corresponds with the EPLAN
functionality in the menu "Utilities \&gt; Parts \&gt; Current
project --\&gt; parts database".
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                                  project for which the
                                  parts will be
                                  synchronized.</param>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the synchronization process and will be closed
subsequently.



In order to have an article synchronized, it should exist as an entry in the project's parts 
or it should be referenced (i.e. exist as an ArticleReference).
</remarks>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:BaseException">The synchronization
                                finished with
                                errors.</exception>
            <exception cref="!:IOException">Thrown in case of
                                database write protection.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Synchronize.StoreMode.OverwriteExistingAndAppendNew">
            <summary>overwrite existing articles (including variants) and append new ones</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Synchronize.StoreMode.OverwriteExisting">
            <summary>overwrite existing articles (including variants)</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Synchronize.StoreMode.AppendNew">
            <summary>append new articles</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Synchronize.StoreMode">
            <summary>
Store mode determines, whether parts, which are already existing in the parts database, should be modified.
</summary>
            <remarks>
Default value is <c>AppendNew</c>.
When the article is being removed, all its variants are also removed.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Synchronize.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Synchronize">
            <summary>
Class providing functionality for synchronizing project and
system master data and synchronizing properties between
different representation types.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.testDrawingFlags(System.Int32)">
            <summary>
For internal use. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.unsetDrawingFlags(System.Int32)">
            <summary>
For internal use. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.setDrawingFlags(System.Int32)">
            <summary>
For internal use. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.Reset">
            <summary>
Resets all settings of the class to standard values. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.SetDefaultWindow">
            <summary>
Sets resolution of the drawn image to 100x100.
</summary>
            <remarks>
The method is relevant only for 3d objects. Please use it before CreateDisplayList().
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.SetWindow(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Defines resolution of the drawn image.
</summary>
            <remarks>
The method is relevant only for 3d objects. Please use it before CreateDisplayList().
</remarks>
            <param name="dLeft">Left</param>
            <param name="dTop">Top</param>
            <param name="dRight">Right</param>
            <param name="dBottom">Bottom</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.SetWindow(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Defines resolution of the drawn image.
</summary>
            <remarks>
The method is relevant only for 3d objects. Please use it before CreateDisplayList().
</remarks>
            <param name="nLeft">Left</param>
            <param name="nTop">Top</param>
            <param name="nRight">Right</param>
            <param name="nBottom">Bottom</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.SetDefaultViewport">
            <summary>
Adjusts viewport to the bounding box of the objects from drawing list
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.GetViewport">
            <summary>
Gets the coordinates of the viewport region
</summary>
            <remarks>
Viewport is returned in graphical coordinate system. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.SetViewport(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Sets the coordinates of the viewport region
</summary>
            <remarks>
Viewport is returned in graphical coordinate system.
If passed dimensions are not proportional to the drawing area, they are adjusted automatically in a way that aspect ratio is kept.
</remarks>
            <param name="dLeft">Left</param>
            <param name="dTop">Top</param>
            <param name="dRight">Right</param>
            <param name="dBottom">Bottom</param>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.DrawInvisibleObjects">
            <summary>
Determines, that the preview should show invisible objects or not ?
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.UseThumbnail">
            <summary>
Use of the stored thumbnail bitmap for preview macro files or not ? 
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.DrawConnections">
            <summary>
Should the auto-connecting lines be drawn in a macro preview or not?
</summary>
            <remarks>
This value is used only when creating display list for macros (for transient pages).
</remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.MacroPreview">
            <summary>
Determines, that the preview should look similar to the macro preview in the GUI or not
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.Print">
            <summary>
Determines, that the preview should look like the print output or not
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.PrintPreview">
            <summary>
Determines, that the preview should look like the print preview or not
</summary>
            <remarks>
For displaying print preview like in EPLAN dialog, consider setting also DrawCrossReferences, DrawConnections, ConsiderBorder
</remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.DrawBlackAndWhite">
            <summary>
Should the preview be shown in color or black-and-white?
Warning: images are always colored, independently on a value of the property
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.CenterView">
            <summary>
Is the preview centered or not?
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.DrawCrossReferences">
            <summary>
Determines, whether cross references should be displayed or not.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.ConsiderBorder">
            <summary>
Determines, whether the borders should be added or not.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.DrawingService.DrawBackGround">
            <summary>
Gets/Sets whether the preview is created with or without background.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.ZoomAll">
            <summary>
Recalculates the view port so the complete image is
displayed. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.ZoomOut(System.Double)">
            <summary>
Recalculates the view port to zoom out of the image. 
</summary>
            <param name="dFactor">Zoom factor. Use values greater than 1 in order to zoom out, and values between 0 and 1 in order to zoom in.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.ZoomIn(System.Double)">
            <summary>
Recalculates the view port to zoom into the image.
</summary>
            <param name="dFactor">Zoom factor. Use values greater than 1 in order to zoom in, and values between 0 and 1 in order to zoom out.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.ZoomOut">
            <summary>
This method was deprecated. Recalculates the view port to zoom out of the image.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.ZoomIn">
            <summary>
This method was deprecated. Recalculates the view port to zoom into the image.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.DrawDisplayList(HWND__*,System.Drawing.Rectangle)">
            <summary>
Draws a display list on a window. The preview is fit to the
window, while keeping its aspect ratio. Only the rectangle specified by the parameter rcClientRect will be used
</summary>
            <param name="hWnd">Window on which the
                    display list will be drawn.</param>
            <param name="rcClientRect">Region of the window used for drawing.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when drawing the
                                display list.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.DrawDisplayList(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
Draws a display list on a window. The preview is fit to the
window, while keeping its aspect ratio. Only the rectangle specified by the parameter rcClientRect will be used
</summary>
            <param name="pArgs">PaintEventArgs of the window, on which the
                    display list will be drawn.</param>
            <param name="rcClientRect">Region of the window used for drawing.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when drawing the
                                display list.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.DrawDisplayList(System.Windows.Forms.PaintEventArgs)">
            <summary>
Draws a display list on a window. The preview is fit to the
window, while keeping its aspect ratio.
</summary>
            <param name="pArgs">PaintEventArgs of the window, on which the
                    display list will be drawn.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when drawing the
                                display list.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(Eplan.EplApi.DataModel.MasterData.SymbolVariant,System.Boolean)">
            <summary>
Creates a display list for a symbol variant.
Removes the representation of previously displayed objects when creating a new list.
If parameter bReturnSymbolConnectionPointsData is TRUE, return also a structure
with information about the symbol variant's connection points
</summary>
            <returns>
If bReturnSymbolConnectionPointsData is TRUE, returns information about the symbol variant's connection points.
Each item in the returned list is a pair of values representing one connection point. Key is the connection point's location.
Value is the connection point's direction (1 - up, 2 - right, 4 - down, 8 - left).
If bReturnSymbolConnectionPointsData is FALSE, an empty list is returned.
</returns>
            <param name="pSymbolVariant">SymbolVariant object.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(Eplan.EplApi.DataModel.Page[])">
            <summary>
Creates a display list for an array of page. Removes the representation of previously displayed objects when creating a new list.
</summary>
            <param name="pagesToDisplay">Pages, of which a graphical representation should be created.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(Eplan.EplApi.DataModel.MasterData.SymbolVariant)">
            <summary>
Creates a display list for a symbol variant. A display list
is a set of graphical placements to be drawn. Removes the representation of previously displayed objects when creating a new list.
</summary>
            <param name="pSymbolVariant">SymbolVariant object.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(Eplan.EplApi.DataModel.MasterData.WindowMacro)">
            <summary>
Creates a display list for a macro. A display list is a set
of graphical placements to be drawn. Removes the representation of previously displayed objects when creating a new list.
</summary>
            <param name="pWindowMacro">WindowMacro object.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters,
                                    e.g. a wrong path.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(System.String,System.String,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.RepresentationType,System.Int32,Eplan.EplApi.DataModel.Project)">
            <summary>
Creates a display list for a macro. A display list is a set
of graphical placements to be drawn. Removes the representation of previously displayed objects when creating a new list.
</summary>
            <param name="strMacroFile">Full file name of a window macro.</param>
            <param name="strConverter">Name of a file converter. Parameter may be empty.
						   A file converter can be used to convert a file into a temporary macro file.
                           After converting, the content of the temp. macro file will be used to create a display list.
						   This is reserved for future enhancements.
						   Today, it is not possible to write an own converter by API.
</param>
            <param name="nRepType">Representation Type of Macro.</param>
            <param name="nVariant">Index of the macro variant.</param>
            <param name="pProject">Project which provides display
                       properties.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(System.String,System.String,System.Int32,Eplan.EplApi.DataModel.Project)">
            <summary>
Creates a display list for a macro. A display list is a set
of graphical placements to be drawn. Removes the representation of previously displayed objects when creating a new list.
</summary>
            <param name="strMacroFile">Full file name of a window macro.</param>
            <param name="strConverter">Name of a file converter. Parameter may be empty.
						   A file converter can be used to convert a file into a temporary macro file.
                           After converting, the content of the temp. macro file will be used to create a display list.
						   This is reserved for future enhancements.
						   Today, it is not possible to write an own converter by API.
</param>
            <param name="pProject">Project which provides display
                       properties.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(Eplan.EplApi.DataModel.Placement)">
            <summary>
Creates a display list for a placement. Removes the representation of previously displayed objects when creating a new list.
</summary>
            <param name="placement">placement to be drawn.</param>
            <remarks />
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Creates a display list for an array of StorableObjects.
</summary>
            <param name="objects">Objects to be drawn.</param>
            <remarks> A display list is a set of graphical placements to be drawn</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.CreateDisplayList(Eplan.EplApi.DataModel.Placement[])">
            <summary>
Creates a display list for an array of placements. 
</summary>
            <param name="placements">Objects, for which a graphical representation should be created.</param>
            <remarks>
Removes the representation of previously displayed objects when creating a new list.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">A null reference is passed to a
                                        parameter.</exception>
            <exception cref="!:BaseException">An error occurred, when creating the
                                display list. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.Finalize">
            <summary>
Non-deterministic Finalizer of DrawingService object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.Dispose">
            <summary>
Default destructor.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.DrawingService.#ctor">
            <summary>
default constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.DrawingService">
            <summary>
This class allows the user to create previews of macros and
other DataModel objects.
</summary>
            <remarks>
In <see text="offline programs" cref="!:UsingEplanAssemblies" />,
please make sure to clean up. The DrawingService object
before calling <see text="EplApplication.Exit()" cref="!:Eplan::EplApi::System::EplApplication::Exit" />.
The finalizer of DrawingService needs the API to be
initialized for freeing the internal display list.
</remarks>
            <example>
The example shows how to use DrawingService for a macro
preview. <code lang="cs" source="P8_API_Example_HEServices_DrawingService_Example2.cs.txt" /></example>
            <example>
The example shows how the DrawingService can be used.
Basically to draw EP8 objects one needs to gather objects to
draw, set the properties that control service behavior and
implement control's Paint event. This application displays a
form with a toolbar by which the DrawingService properties
(like zoom, colors, etc) can be affected. <code lang="cs" source="P8_API_Example_HEServices_DrawinService_Example1.cs.txt" /></example>
            <seealso cref="!:HE_Display.html" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.MacroToDxfDwg(System.String,System.String,Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Exports a complete macro to the DXF/DWG format 
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="sMacro">Macro to be exported.</param>
            <param name="prj">Project that is used.</param>
            <param name="sScheme">A settings scheme to use.</param>
            <param name="sTargetDir">The output directory.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgProjectToEMail(Eplan.EplApi.DataModel.Project,System.String,System.Double,System.String)">
            <summary>
Exports a complete project to the DXF/DWG format and sends it by email.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="prj">Project to be exported.</param>
            <param name="sScheme">A settings scheme to use.</param>
            <param name="dSplitSize">The value to overwrite the split size from the schema settings.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPageToEMail(Eplan.EplApi.DataModel.Page,System.String,System.String,System.Double,System.String)">
            <summary>
Exports a page to the DXF/DWG format and sends it by email.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="page">A page to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sFileName">The output file name.</param>
            <param name="dSplitSize">The value to overwrite the split size from the schema settings.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgProjectToDisk(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String)">
            <summary>
Exports a complete project as DXF/DWG files.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="prj">Project to be exported.</param>
            <param name="sScheme">A settings scheme to use.</param>
            <param name="sTargetDir">The output directory.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPageToDisk(Eplan.EplApi.DataModel.Page,System.String,System.String,System.String,System.String)">
            <summary>
Exports a page of a project as a DXF/DWG file.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="page">A page to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sTargetDir">The output directory.</param>
            <param name="sFileName">The output file name.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgProject(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Exports a complete project as DXF/DWG files.
Export settings are taken from the scheme passed in the 'sScheme' parameter
It is decided by the settings whether the target is email or a file.
</summary>
            <param name="prj">Project to be exported.</param>
            <param name="sScheme">A settings scheme to use.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, an
exception will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPages(System.Collections.ArrayList,System.String,System.String)">
            <summary>
Exports pages of a project as a DXF/DWG file.
Export settings are taken from the scheme passed in the 'sScheme' parameter
It is decided by the settings whether the target is email or a file.
</summary>
            <param name="arrayPages">A pages to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
In the location taken from scheme( Output path )  there will be create a folder with project's name where all exported files will be inserted.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPages(System.Collections.ArrayList,System.String)">
            <summary>
Exports pages of a project as a DXF/DWG file.
Export settings are taken from the scheme passed in the 'sScheme' parameter
It is decided by the settings whether the target is email or a file.
</summary>
            <param name="arrayPages">A pages to be exported.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
In the location taken from scheme( Output path )  there will be create a folder with project's name where all exported files will be inserted.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPage(Eplan.EplApi.DataModel.Page,System.String,System.String,System.String)">
            <summary>
Exports a page of a project as a DXF/DWG file.
Export settings are taken from the scheme passed in the 'sScheme' parameter
It is decided by the settings whether the target is email or a file.
</summary>
            <param name="page">A page to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sFileName">The output file name.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgProjectToEMail(Eplan.EplApi.DataModel.Project,System.String,System.Double)">
            <summary>
Exports a complete project to the DXF/DWG format and sends it by email.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="prj">Project to be exported.</param>
            <param name="sScheme">A settings scheme to use.</param>
            <param name="dSplitSize">The value to overwrite the split size from the schema settings.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPageToEMail(Eplan.EplApi.DataModel.Page,System.String,System.String,System.Double)">
            <summary>
Exports a page to the DXF/DWG format and sends it by email.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="page">A page to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sFileName">The output file name.</param>
            <param name="dSplitSize">The value to overwrite the split size from the schema settings.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgProjectToDisk(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Exports a complete project as DXF/DWG files.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="prj">Project to be exported.</param>
            <param name="sScheme">A settings scheme to use.</param>
            <param name="sTargetDir">The output directory.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPagesToDisk(Eplan.EplApi.DataModel.Page[],System.String,System.String,System.String)">
            <summary>
Exports pages of a project as a DXF/DWG file.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="pages">An array of pages to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sTargetDir">The output directory.</param>
            <param name="sLanguage">Specifies the language to translate the project into before the export.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPageToDisk(Eplan.EplApi.DataModel.Page,System.String,System.String,System.String)">
            <summary>
Exports a page of a project as a DXF/DWG file.
Export settings are taken from the scheme passed in the 'sScheme' parameter
</summary>
            <param name="page">A page to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sTargetDir">The output directory.</param>
            <param name="sFileName">The output file name.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgProject(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Exports a complete project as DXF/DWG files.
Export settings are taken from the scheme passed in the 'sScheme' parameter
It is decided by the settings whether the target is email or a file.
</summary>
            <param name="prj">Project to be exported.</param>
            <param name="sScheme">A settings scheme to use.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.DxfDwgPage(Eplan.EplApi.DataModel.Page,System.String,System.String)">
            <summary>
Exports a page of a project as a DXF/DWG file.
Export settings are taken from the scheme passed in the 'sScheme' parameter
It is decided by the settings whether the target is email or a file.
</summary>
            <param name="page">A page to be exported.</param>
            <param name="sScheme">Settings scheme to use.</param>
            <param name="sFileName">The output file name.</param>
            <remarks>
This method uses a scheme from "USER.DXF.SCHEMES". All
necessary settings are set in this scheme. If you pass an
empty string to "sScheme", the last used scheme will be
used which is currently set in GUI.
If no scheme does exist with the given scheme name, a
BaseException will be thrown.
Depending on the scheme settings, exported pages' names 
can be prefixed to create a folder-like structure. Options available in the scheme
for sub-folder generation are: none, from page tree, from page properties.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments, for
                                    \example a wrong scheme.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for exporting
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PdfPages(System.Collections.ArrayList,System.String,System.String,Eplan.EplApi.HEServices.Export.DegreeOfColor,System.Boolean,System.String,System.Boolean)">
            <summary>
Exports pages of one project as PDF file.
</summary>
            <param name="arrayPages">Array of Pages to be exported. ArrayList should contain only Pages of one project.</param>
            <param name="strSchema">The name of the settings schema.  If
                        no name is given, last used will be
                        used.  The Schemas are located in
                        "USER.PDFExportGUI.SCHEMAS".</param>
            <param name="strPdfExportFileName">Name of the PDF \file to
                                   be generated. If left
                                   blank, the output file
                                   name will be determined
                                   by the settings in the
                                   schema.  If a path name
                                   is given, it will
                                   override the directory
                                   setting in the schema.
                                   If the directory does not
                                   exist, it will be
                                   created. If the user does
                                   not have the necessary
                                   rights to access the file
                                   system, an exception will
                                   be thrown. If you set a
                                   \file name without the
                                   extension ".pfd", the
                                   extension will be added. </param>
            <param name="color">Determines the color setting of the
                    PDF file.  "BlackAndWhite" will make
                    all elements including bitmaps black on
                    a white background.  "GreyLevel" will
                    use shades of grey for every item.  Color
                    will use the full colors. </param>
            <param name="bExportModel">3D models will be exported as well
                           as the pages.  This requires a
                           separate license for 3D. </param>
            <param name="strLanguage">Language of exported pages</param>
            <param name="bUsePrintMargins">Use print margins. Parameter overrides setting in scheme.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Thrown if null was passed to a parameter</exception>
            <exception cref="!:ArgumentOutOfRangeException">Thrown if an invalid value was passed to a parameter, e.g.
                                              dZoomLevel is out of range.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export or when project has no pages to export. See the
                                exception message for details.</exception>
            <exception cref="!:InvalidScheme">Thrown if an invalid schema is given</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PdfPages(System.String,System.String,System.String[],System.String,Eplan.EplApi.HEServices.Export.DegreeOfColor,System.Boolean,System.String,System.Boolean)">
            <summary>
Exports pages of one project as PDF file.
</summary>
            <param name="strFullLinkFileName">Name of project with full path, from which a pages will be exported.</param>
            <param name="arrayPageNames">Array of page names, which will be export. ArrayList should contain only Pages of one project.</param>
            <param name="strSchema">The name of the settings schema.  If
                        no name is given, last used will be
                        used.  The Schemas are located in
                        "USER.PDFExportGUI.SCHEMAS".</param>
            <param name="strPdfExportFileName">Name of the PDF \file to
                                   be generated. If left
                                   blank, the output file
                                   name will be determined
                                   by the settings in the
                                   schema.  If a path name
                                   is given, it will
                                   override the directory
                                   setting in the schema.
                                   If the directory does not
                                   exist, it will be
                                   created. If the user does
                                   not have the necessary
                                   rights to access the file
                                   system, an exception will
                                   be thrown. If you set a
                                   \file name without the
                                   extension ".pfd", the
                                   extension will be added. </param>
            <param name="color">Determines the color setting of the
                    PDF file.  "BlackAndWhite" will make
                    all elements including bitmaps black on
                    a white background.  "GreyLevel" will
                    use shades of grey for every item.  Color
                    will use the full colors. </param>
            <param name="bExportModel">3D models will be exported as well
                           as the pages.  This requires a
                           separate license for 3D. </param>
            <param name="strLanguage">Language of exported pages</param>
            <param name="bUsePrintMargins">Use print margins. Parameter overrides setting in scheme.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Thrown if null was passed to a parameter</exception>
            <exception cref="!:ArgumentOutOfRangeException">Thrown if an invalid value was passed to a parameter, e.g.
                                              dZoomLevel is out of range.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export or when project has no pages to export. See the
                                exception message for details.</exception>
            <exception cref="!:InvalidScheme">Thrown if an invalid schema is given</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PdfProject(System.String,System.String,System.String,Eplan.EplApi.HEServices.Export.DegreeOfColor,System.Boolean,System.String,System.Boolean)">
            <summary>
Exports one project as PDF file.
</summary>
            <param name="strFullLinkFileName">Name of project with full path, from which a pages will be exported.</param>
            <param name="strSchema">The name of the settings schema.  If
                        no name is given, last used will be
                        used.  The Schemas are located in
                        "USER.PDFExportGUI.SCHEMAS".</param>
            <param name="strPdfExportFileName">Name of the PDF \file to
                                   be generated. If left
                                   blank, the output file
                                   name will be determined
                                   by the settings in the
                                   schema.  If a path name
                                   is given, it will
                                   override the directory
                                   setting in the schema.
                                   If the directory does not
                                   exist, it will be
                                   created. If the user does
                                   not have the necessary
                                   rights to access the file
                                   system, an exception will
                                   be thrown. If you set a
                                   \file name without the
                                   extension ".pfd", the
                                   extension will be added. </param>
            <param name="color">Determines the color setting of the
                    PDF file.  "BlackAndWhite" will make
                    all elements including bitmaps black on
                    a white background.  "GreyLevel" will
                    use shades of grey for every item.  Color
                    will use the full colors. </param>
            <param name="bExportModel">3D models will be exported as well
                           as the pages.  This requires a
                           separate license for 3D. </param>
            <param name="strLanguage">Language of exported project</param>
            <param name="bUsePrintMargins">Use print margins. Parameter overrides setting in scheme.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Thrown if null was passed to a parameter</exception>
            <exception cref="!:ArgumentOutOfRangeException">Thrown if an invalid value was passed to a parameter, e.g.
                                              dZoomLevel is out of range.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export or when project has no pages to export. See the
                                exception message for details.</exception>
            <exception cref="!:InvalidScheme">Thrown if an invalid schema is given</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PdfProject(Eplan.EplApi.DataModel.Project,System.String,System.String,Eplan.EplApi.HEServices.Export.DegreeOfColor,System.Boolean,System.String,System.Boolean)">
            <summary>
Exports one project as PDF file.
</summary>
            <param name="oProject">Project to be exported.</param>
            <param name="strSchema">The name of the settings schema.  If
                        no name is given, last used will be
                        used.  The Schemas are located in
                        "USER.PDFExportGUI.SCHEMAS".</param>
            <param name="strPdfExportFileName">Name of the PDF \file to
                                   be generated. If left
                                   blank, the output file
                                   name will be determined
                                   by the settings in the
                                   schema.  If a path name
                                   is given, it will
                                   override the directory
                                   setting in the schema.
                                   If the directory does not
                                   exist, it will be
                                   created. If the user does
                                   not have the necessary
                                   rights to access the file
                                   system, an exception will
                                   be thrown. If you set a
                                   \file name without the
                                   extension ".pfd", the
                                   extension will be added. </param>
            <param name="color">Determines the color setting of the
                    PDF file.  "BlackAndWhite" will make
                    all elements including bitmaps black on
                    a white background.  "GreyLevel" will
                    use shades of grey for every item.  Color
                    will use the full colors. </param>
            <param name="bExportModel">3D models will be exported as well
                           as the pages.  This requires a
                           separate license for 3D. </param>
            <param name="strLanguage">Language of exported project</param>
            <param name="bUsePrintMargins">Use print margins. Parameter overrides setting in scheme.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:ArgumentNullException">Thrown if null was passed to a parameter</exception>
            <exception cref="!:ArgumentOutOfRangeException">Thrown if an invalid value was passed to a parameter, e.g.
                                              dZoomLevel is out of range.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export or when project has no pages to export. See the
                                exception message for details.</exception>
            <exception cref="!:InvalidScheme">Thrown if an invalid schema is given</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProject(System.String,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean,System.String)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="strFullLinkFileName">Full link file name of the project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <param name="strLanguage">Language of exported project</param>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProject(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean,System.String)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="oProject">Project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <param name="strLanguage">Language of exported project</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPage(System.String,System.String,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean,System.String)">
            <summary>
Exports a page of a project as image file.
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="strFullLinkFileName">Full link file name of the project, which contains
                             the page to export.</param>
            <param name="strPageName">Name of the page to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created.
                           If the user does not have the necessary rights to
                           access the file system, an exception will be
                           thrown.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio
                     of the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export.
                               This parameter has no influence on other export
                               formats. For the compression according\: CCITT3,
                               CCITT4, and RLE the color depth always is 1, i.e. a
                               binary image is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This
                             does not influence the image format or the image
                             size.</param>
            <param name="strLanguage">Language of exported page</param>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
This function uses GDI+ library which is also used by .NET. See <see text="System.Drawing.Image" cref="!:System.Drawing.Image" /></remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
            <exception cref="!:ArgumentException"> Thrown when one of the arguments passed to the method was not valid. </exception>
            <exception cref="!:OutOfMemoryException"> Thrown when the operating system is out of memory and could not allocate memory to process the method call. For an explanation of how constructors use the OutOfMemory status, see the Remarks section at the end of this topic. </exception>
            <exception cref="!:MemberAccessException"> Thrown when one of the arguments specified in the application programming interface (API) call is already in use in another thread. </exception>
            <exception cref="!:IO::InternalBufferOverflowException"> Thrown when a buffer specified as an argument in the API call is not large enough to hold the data to be received. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:IO::FileNotFoundException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="!:UnauthorizedAccessException"> Thrown when a write operation is not allowed on the specified file. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the specified image file format is not known. </exception>
            <exception cref="!:NotImplementedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:ArgumentException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.HEServicesBase"> Thrown in other cases when error hasn't own exception class or it's unspecified. Please refer to message content.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPage(Eplan.EplApi.DataModel.Page,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean,System.String)">
            <summary>
Exports a page of a project as image file. 
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="oPage">Page to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
						  The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <param name="strLanguage">Language of exported page</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PXFProject(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Exports a project in PXF format.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project to be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                \file to be created. The
                                \file name extension is
                                added automatically.</param>
            <param name="bExportMasterData">If true, master data will
                                be exported.</param>
            <param name="bExportConnections">If true, connections also
                                 will be exported.</param>
            <exception cref="!:ArgumentException">Thrown in case
                                    of invalid
                                    \arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights
                                              to create
                                              files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       PXF export
                                       could not be
                                       created. </exception>
            <exception cref="!:BaseException">Errors
                                occurred
                                during export.
                                See the
                                exception
                                message for
                                details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PXFProject(Eplan.EplApi.DataModel.Project,System.String,System.Boolean,System.Boolean)">
            <summary>
Exports a project in PXF format.
</summary>
            <param name="oProject">Project to be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                \file to be created. The
                                \file name extension is
                                added automatically.</param>
            <param name="bExportMasterData">If true, master data will
                                be exported.</param>
            <param name="bExportConnections">If true, connections also
                                 will be exported.</param>
            <exception cref="!:ArgumentException">Thrown in case
                                    of invalid
                                    \arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights
                                              to create
                                              files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       PXF export
                                       could not be
                                       created. </exception>
            <exception cref="!:BaseException">Errors
                                occurred
                                during export.
                                See the
                                exception
                                message for
                                details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PXFProject(System.String,System.String)">
            <summary>
Exports a project in PXF format.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project to be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                \file to be created. The
                                \file name extension is
                                added automatically.</param>
            <exception cref="!:ArgumentException">Thrown in case
                                    of invalid
                                    \arguments.</exception>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for PXF export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
            <remarks>
Master data will also be exported. Connections however will
be ignored. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.PXFProject(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Exports a project in PXF format.
</summary>
            <param name="oProject">Project to be exported. </param>
            <param name="strExportFilePath">Path and file name of the
                                \file to be created. The
                                \file name extension is
                                added automatically.</param>
            <exception cref="!:ArgumentException">Thrown in case
                                    of invalid
                                    \arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights
                                              to create
                                              files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for
                                       PXF export
                                       could not be
                                       created. </exception>
            <exception cref="!:BaseException">Errors
                                occurred
                                during export.
                                See the
                                exception
                                message for
                                details.</exception>
            <remarks>
Master data will also be exported. Connections however will
be ignored. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProjectEx(System.String,System.String,System.String,System.Boolean)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns an array of strings containing names of the created files.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="strSchemeName">Name of the configuration scheme to use during the export.</param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <returns>An array of strings containing names of the created files.</returns>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProjectEx(System.String,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns an array of strings containing names of the created files.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <returns>An array of strings containing names of the created files.</returns>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProject(System.String,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="strFullLinkFileName">Full link file name of the project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProjectEx(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Boolean)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns an array of strings containing names of the created files.
</summary>
            <param name="oProject">Project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="strSchemeName">Name of the configuration scheme to use during the export.</param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <returns>An array of strings containing names of the created files.</returns>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProjectEx(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns an array of strings containing names of the created files.
</summary>
            <param name="oProject">Project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <returns>An array of strings containing names of the created files.</returns>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicProject(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a complete project as image files but instead of pages 
which <see text="type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> is 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="oProject">Project to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.
                           A sub\-folder named after the project will be
                           created in which the images will be stored.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPageEx(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
Exports a page of a project as image file.
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns the name of the created file.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project, which contains
                             the page to export.</param>
            <param name="strPageName">Name of the page to be exported.</param>
            <param name="strImageDir">Directory to which the image files will be written.
						   If NULL or empty, a directory specified in the schema will be used.
                           If the folder does not exist, it will be created.
                           If the user does not have the necessary rights to
                           access the file system, an exception will be
                           thrown.</param>
            <param name="strSchemeName">Name of the configuration scheme to use during the export.</param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This
                             does not influence the image format or the image
                             size.</param>
            <returns>The name of the created file.</returns>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
This function uses GDI+ library which is also used by .NET. See <see text="System.Drawing.Image" cref="!:System.Drawing.Image" /></remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
            <exception cref="!:ArgumentException"> Thrown when one of the arguments passed to the method was not valid. </exception>
            <exception cref="!:OutOfMemoryException"> Thrown when the operating system is out of memory and could not allocate memory to process the method call. For an explanation of how constructors use the OutOfMemory status, see the Remarks section at the end of this topic. </exception>
            <exception cref="!:MemberAccessException"> Thrown when one of the arguments specified in the application programming interface (API) call is already in use in another thread. </exception>
            <exception cref="!:IO::InternalBufferOverflowException"> Thrown when a buffer specified as an argument in the API call is not large enough to hold the data to be received. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:IO::FileNotFoundException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="!:UnauthorizedAccessException"> Thrown when a write operation is not allowed on the specified file. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the specified image file format is not known. </exception>
            <exception cref="!:NotImplementedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:ArgumentException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.HEServicesBase"> Thrown in other cases when error hasn't own exception class or it's unspecified. Please refer to message content.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPageEx(System.String,System.String,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a page of a project as image file.
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns the name of the created file.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project, which contains
                             the page to export.</param>
            <param name="strPageName">Name of the page to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created.
                           If the user does not have the necessary rights to
                           access the file system, an exception will be
                           thrown.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio
                     of the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export.
                               This parameter has no influence on other export
                               formats. For the compression according\: CCITT3,
                               CCITT4, and RLE the color depth always is 1, i.e. a
                               binary image is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This
                             does not influence the image format or the image
                             size.</param>
            <returns>The name of the created file.</returns>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
This function uses GDI+ library which is also used by .NET. See <see text="System.Drawing.Image" cref="!:System.Drawing.Image" /></remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
            <exception cref="!:ArgumentException"> Thrown when one of the arguments passed to the method was not valid. </exception>
            <exception cref="!:OutOfMemoryException"> Thrown when the operating system is out of memory and could not allocate memory to process the method call. For an explanation of how constructors use the OutOfMemory status, see the Remarks section at the end of this topic. </exception>
            <exception cref="!:MemberAccessException"> Thrown when one of the arguments specified in the application programming interface (API) call is already in use in another thread. </exception>
            <exception cref="!:IO::InternalBufferOverflowException"> Thrown when a buffer specified as an argument in the API call is not large enough to hold the data to be received. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:IO::FileNotFoundException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="!:UnauthorizedAccessException"> Thrown when a write operation is not allowed on the specified file. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the specified image file format is not known. </exception>
            <exception cref="!:NotImplementedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:ArgumentException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.HEServicesBase"> Thrown in other cases when error hasn't own exception class or it's unspecified. Please refer to message content.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPage(System.String,System.String,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a page of a project as image file.
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="strFullLinkFileName">Full link file name of the project, which contains
                             the page to export.</param>
            <param name="strPageName">Name of the page to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created.
                           If the user does not have the necessary rights to
                           access the file system, an exception will be
                           thrown.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
                          The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio
                     of the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export.
                               This parameter has no influence on other export
                               formats. For the compression according\: CCITT3,
                               CCITT4, and RLE the color depth always is 1, i.e. a
                               binary image is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This
                             does not influence the image format or the image
                             size.</param>
            <remarks>
The project "strFullLinkFileName" may be open in EPLAN or not. If
the project was not already open, it will be opened and after
the export it will be closed again.
This function uses GDI+ library which is also used by .NET. See <see text="System.Drawing.Image" cref="!:System.Drawing.Image" /></remarks>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
            <exception cref="!:ArgumentException"> Thrown when one of the arguments passed to the method was not valid. </exception>
            <exception cref="!:OutOfMemoryException"> Thrown when the operating system is out of memory and could not allocate memory to process the method call. For an explanation of how constructors use the OutOfMemory status, see the Remarks section at the end of this topic. </exception>
            <exception cref="!:MemberAccessException"> Thrown when one of the arguments specified in the application programming interface (API) call is already in use in another thread. </exception>
            <exception cref="!:IO::InternalBufferOverflowException"> Thrown when a buffer specified as an argument in the API call is not large enough to hold the data to be received. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:IO::FileNotFoundException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="!:UnauthorizedAccessException"> Thrown when a write operation is not allowed on the specified file. </exception>
            <exception cref="!:NotSupportedException"> Thrown when the specified image file format is not known. </exception>
            <exception cref="!:NotImplementedException"> Thrown when the method is not implemented. </exception>
            <exception cref="!:ArgumentException"> Thrown when the object is in an invalid state to satisfy the API call. For example, calling Pen::GetColor from a pen that is not a single, solid color results in a WrongState status. </exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.HEServicesBase"> Thrown in other cases when error hasn't own exception class or it's unspecified. Please refer to message content.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPageEx(Eplan.EplApi.DataModel.Page,System.String,System.String,System.Boolean)">
            <summary>
Exports a page of a project as image file. 
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns the name of the created file.
</summary>
            <param name="oPage">Page to be exported.</param>
            <param name="strImageDir">Directory to which the image files will be written.
						   If NULL or empty, a directory specified in the schema will be used.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.</param>
            <param name="strSchemeName">Name of the configuration scheme to use during the export.</param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <returns>Name of the created file.</returns>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPageEx(Eplan.EplApi.DataModel.Page,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a page of a project as image file. 
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" />
Returns the name of the created file.
</summary>
            <param name="oPage">Page to be exported.</param>
            <param name="strImagePath">Directory to which the image files will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
						  The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <returns>The name of the created file.</returns>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPage(Eplan.EplApi.DataModel.Page,System.String,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a page of a project as image file. 
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="oPage">Page to be exported.</param>
            <param name="strImagePath">Directory to which the image file will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.</param>
            <param name="strFileName">Name of the output file. May be NULL or empty (the name 
						  of the page exported will be taken in such case).
						  File name's extension is appended automatically
						  according to the format specified.
</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
						  The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPage(Eplan.EplApi.DataModel.Page,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a page of a project as image file. 
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="oPage">Page to be exported.</param>
            <param name="strImagePath">Directory to which the image file will be written.
                           If the folder does not exist, it will be created. If
                           the user does not have the necessary rights to
                           access the file system, an exception will be thrown.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
						  The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.GraphicPageEx2(Eplan.EplApi.DataModel.Page,System.String,Eplan.EplApi.HEServices.Export.Format,System.Int32,System.Int32,Eplan.EplApi.HEServices.Export.Compression,System.Boolean)">
            <summary>
Exports a page of a project as image file. 
<see text="Type" cref="P:Eplan.EplApi.DataModel.Page.PageType" /> of page can not be 
<see text="EXTERNALDOCUMENT" cref="T:Eplan.EplApi.DataModel.DocumentTypeManager.DocumentType" /></summary>
            <param name="oPage">Page to be exported.</param>
            <param name="strImagePath">Full name of the output file. If only a folder's name is 
						   specified (e.g. "C:\OutputFolder\") the file name will be
						   the name of the page exported.
						   File name's extension is appended automatically,
						   according to the format specified,
						   unless the file name already contains extension.
                           If the folder does not exist, it will be created. 
                           If the user does not have the necessary rights to
                           access the file system, an exception will be thrown.</param>
            <param name="imageFormat">Image format\: Supported export formats are\:<para />
                          * BMP: available color depth: 1, 4, 8, 16, 24 and 32
						  * TIF: available color depth: 1, 4, 8, 24 and 32
						  * GIF: color depth is irrelevant
						  *	PNG: available color depth: 1, 4, 8, 16, 24 and 32 
						  * JPG: available color depth: 1, 4, 8, 16, 24 and 32.
						  The enum IMAGE_FORMAT defines the necessary values. If an
                          invalid format is set, the page will be exported as
                          Tiff.</param>
            <param name="iColorDepth">Color depth of the image\: Allowed values are 1, 4,
                          8, 16, 24, and 32. If an invalid value is set, a
                          color depth of 24 bit us used.</param>
            <param name="iWidth">Width of the image in pixels.The height is
                     calculated automatically to keep the aspect ratio of
                     the page.</param>
            <param name="imageCompression">Sets the image compression for the Tiff export. This
                               parameter has no influence on other export formats.
                               For the compression according\: CCITT3, CCITT4, and
                               RLE the color depth always is 1, i.e. a binary image
                               is created. </param>
            <param name="bBlackAndWhite">If set to true b/w images will be created. This does
                             not influence the image format or the image size.</param>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:UnauthorizedAccessException">No user rights to create files on the
                                              \file system.</exception>
            <exception cref="!:ApplicationException">The internal interface for image export
                                       could not be created. </exception>
            <exception cref="!:BaseException">Errors occurred during export. See the
                                exception message for details.</exception>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Export.DegreeOfColor">
            <summary>
Color / Grey levels for PDF
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Compression.CCITT4">
            <summary>CCITT4 compression</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Compression.CCITT3">
            <summary>CCITT3 compression</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Compression.None">
            <summary>no compression</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Compression.RLE">
            <summary>RLE compression</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Compression.LZW">
            <summary>LZW compression</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Export.Compression">
            <summary>
Compression for TIFF format
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Format.JPG">
            <summary>JPG</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Format.PNG">
            <summary>PNG</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Format.GIF">
            <summary>Gif</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Format.TIF">
            <summary>Tiff</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Export.Format.BMP">
            <summary>Bitmap</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Export.Format">
            <summary>
Image format
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.#ctor(System.Boolean)">
            <summary>
Constructor with an option. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Export">
            <summary>
Class for exporting projects and project data to various
formats. 
<example>The following example shows how to use class Export.
<code lang="cs" source="P8_API_Example_HEServices_Export_Example1.cs.txt" /></example></summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.RenameDevice(Eplan.EplApi.DataModel.IFunctionBase,Eplan.EplApi.DataModel.FunctionBasePropertyList,System.Boolean,System.Boolean)">
            <summary>
Changes the full names of the found device.
</summary>
            <param name="pFunctionBase">Function3D from device which name will be changed.</param>
            <param name="pNewName">Name that will be set to functions of device.</param>
            <param name="bRenameCDPsAlso">If <c>true</c> then connection of this device (example: wires of cable) also will be renamed.</param>
            <param name="bKeepDescribingProps">If <c>true</c> then describing properties of functions will not be changed.</param>
            <exception cref="T:System.ArgumentException">Invalid parameters were found.</exception>
            <exception cref="T:System.ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.SetName(Eplan.EplApi.DataModel.IFunctionBase)">
            <summary>
Sets a default device tag to the function.
</summary>
            <returns />
            <remarks>
The function must have its function definition configured (since the code letter is provided by this).
</remarks>
            <param name="pFunctionBase">A Function3D for which name is to be set.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.EvaluateAndSetAllVisibleNames">
            <summary />
            <returns />
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.EvaluateAndSetAllNames">
            <summary />
            <returns />
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.EvaluateName(Eplan.EplApi.DataModel.IFunctionBase)">
            <summary />
            <param name="pFunctionBase">Function3D for which is evaluated name.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.AdjustVisibleName(Eplan.EplApi.DataModel.IFunctionBase)">
            <summary />
            <returns />
            <param name="pFunctionBase">Function3D for which the name is evaluated.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.AdjustFullName(Eplan.EplApi.DataModel.IFunctionBase)">
            <summary />
            <returns />
            <param name="pFunctionBase">Function3D for which name is evaluated.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.NameService3D.#ctor(Eplan.EplApi.DataModel.E3D.InstallationSpace)">
            <summary>
Constructor. Creates a NameService3D object.
</summary>
            <param name="installationSpace">Installation space to set.</param>
            <exception cref="!:ArgumentException">Invalid parameters were found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
        </member>
        <member name="T:Eplan.EplApi.HEServices.NameService3D">
            <summary>
Class for managing the Function3D names (device tags) on the
specified InstallationSpace
</summary>
            <remarks>
When using EPLAN interactively the structure identifiers of a Function 3D on a installation space are
adjusted automatically according to the installation space in which the Function 3D is located. 
In API, the methods of the NameService3D class helps to do this.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.TranslateText(System.String,Eplan.EplApi.DataModel.Project)">
            <summary>
Get translation for the given text, according to project settings.
</summary>
            <param name="strText">Text to translate</param>
            <param name="oProject">Project from which settings are read.</param>
            <remarks />
            <exception cref="T:System.ArgumentNullException">Throw if any parameter is invalid.</exception>
            <returns>
Translated text.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.GetStringToDisplayInDialogs(Eplan.EplApi.Base.MultiLangString)">
            <summary>
Get string displayed in project-independent dialogs (like parts management).
</summary>
            <param name="oMLS">String in multiple languages</param>
            <remarks>
Displayed language name is choosen from source language, GUI language or alternative language.
</remarks>
            <exception cref="T:System.ArgumentNullException">Throw if any parameter is invalid.</exception>
            <returns>
String displayed in project-independent dialogs (like parts management)
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.GetStringToDisplayInDialogs(Eplan.EplApi.DataModel.Project,Eplan.EplApi.Base.MultiLangString)">
            <summary>
Get string displayed in project dialogs.
</summary>
            <param name="oProject">Project from which settings will be read.</param>
            <param name="oMLS">String in multiple languages</param>
            <remarks>
Displayed language name is choosen from source language, GUI language, alternative language or first of translation languages.
</remarks>
            <exception cref="T:System.ArgumentNullException">Throw if any parameter is invalid.</exception>
            <returns>
String displayed in project dialogs.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.GetCommonLanguages(System.Collections.Specialized.StringCollection,Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Determines the list of languages, which the given
storableObjects have in common. Is used for getting the
common languages of a project.
</summary>
            <param name="listLanguages">[out] Collection returns the
                            common languages. Languages
                            are returned as language
                            shortcuts, e.g.. de_DE, en_US,
                            ...</param>
            <param name="storableObjects">[in] Array of <c>StorableObject</c>s.</param>
            <returns>
true, in case of no error.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.ExportMissingTranslation(System.String,System.String,System.Collections.Specialized.StringCollection,Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Exports a missing-word list of the given objects.
</summary>
            <param name="strFilename">\File name of the missing\-word
                          list file.</param>
            <param name="strConverter">Format of the export file
                           defined by the name of the XML
                           converter to use\:<para />XTrLanguageDbXml2TabConverterImpl
                           \- export as tab\-separated
                           Unicode\-File (Eplan 21
                           format)<para />XE5LanguageDbXmlConverterImpl
                           \- export as comma\-separated
                           ASCII\-Datei (Eplan 5 format)
							<para />XTrLanguageDbXmlConverterImpl
                           \- export as XML</param>
            <param name="listLanguages">List of languages, for which
                            the missing translations will
                            be exported.</param>
            <param name="storableObjects">Array of StorableObjects, for
                              which the missing translations
                              will be exported.</param>
            <remarks>
All languages in listLanguages have to be already in the list
of translation languages of the project.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments, e.g.
                                    invalid objects in the <c>storableObjects</c>
                                    array.</exception>
            <exception cref="!:BaseException">Thrown when an error
                                occurred during export. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.TranslateObjects(Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Translates all texts of a StorableObject (also project or
page).
</summary>
            <param name="storableObjects">Array of StorableObjects to be
                              translated.</param>
            <remarks>
For projects or pages all elements within will be translated.

</remarks>
            <returns>
true, in case of success.
</returns>
            <exception cref="!:BaseException">An error occurred during
                                translation.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.SetDisplayedLanguages(System.String,System.String)">
            <summary>
Method for adding a language that will be displayed in the project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project, into which the
                       language will be added.</param>
            <param name="strLanguage">Shortcut of the language (or languages separated by comma) to be
                          set.</param>
            <returns>
True, in case of success, or if giving language was added before.
</returns>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments. </exception>
            <exception cref="!:ApplicationException">Internal interface
                                       necessary for
                                       add language could not
                                       be created. </exception>
            <exception cref="!:BaseException">Thrown if an error occurs
                                while adding a language.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.SetDisplayedLanguages(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Method for adding a language that will be displayed in the project.
</summary>
            <param name="pProject">Project to be processed.</param>
            <param name="strLanguage">Shortcut of the language (or languages separated by comma) to be
                          set.</param>
            <returns>
True, in case of success, or if giving language was added before.
</returns>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments. </exception>
            <exception cref="!:ApplicationException">Internal interface
                                       necessary for
                                       add language could not
                                       be created. </exception>
            <exception cref="!:BaseException">Thrown if an error occurs
                                while adding a language.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.AddProjectLanguage(System.String,System.String)">
            <summary>
Method for adding a project language.
It adds the language to the set of possible languages.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project, into which the
                       language will be added.</param>
            <param name="strLanguage">Shortcut of the language to be
                          added.</param>
            <returns>
True, in case of success, or if giving language was added before.
</returns>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments. </exception>
            <exception cref="!:ApplicationException">Internal interface
                                       necessary for
                                       add language could not
                                       be created. </exception>
            <exception cref="!:BaseException">Thrown if an error occurs
                                while adding a language.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.AddProjectLanguage(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Method for adding a project language.
It adds the language to the set of possible languages.
</summary>
            <param name="pProject">Project to be processed.</param>
            <param name="strLanguage">Shortcut of the language to be
                          added.</param>
            <returns>
True, in case of success, or if giving language was added before.
</returns>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments. </exception>
            <exception cref="!:ApplicationException">Internal interface
                                       necessary for
                                       add language could not
                                       be created. </exception>
            <exception cref="!:BaseException">Thrown if an error occurs
                                while adding a language.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.RemoveProjectLanguage(System.String,System.String)">
            <summary>
Method for removing a project language.
It removes the language from the set of displayed languages. 
</summary>
            <param name="strProjectName">Full link file name of the
                             project to be processed.</param>
            <param name="strLanguage">Shortcut of the language to be
                          removed.</param>
            <returns>
Returns True if successful.
</returns>
            <remarks>
It is not possible to remove the source language! System message will be generated in this case.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments, e.g.
                                    the project does not
                                    exist.</exception>
            <exception cref="!:BaseException">Thrown if an error
                                occurs while removing a
                                language. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.RemoveProjectLanguages(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection)">
            <summary>
Method for removing a collection of languages from a project.
</summary>
            <param name="pProject">Project to be processed.</param>
            <param name="listLanguages">String collection containing languages to remove.</param>
            <returns>
Returns True if successful, False if removing at least one of languages failed.
</returns>
            <remarks>
It is not possible to remove the source language! System message will be generated in this case.
Method removes not only languages from project pool, but also translations from multilangual strings in a project.
</remarks>
            <exception cref="!:BaseException">Thrown if an error occurs
                                while removing a language.</exception>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.RemoveProjectLanguage(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Method for removing a project language.
It removes the language from the set of displayed languages. 
</summary>
            <param name="pProject">Project to be processed.</param>
            <param name="strLanguage">Shortcut of the language to be
                          removed.</param>
            <returns>
Returns True if successful.
</returns>
            <remarks>
It is not possible to remove the source language! System message will be generated in this case.
Method removes not only language from project pool, but also translations from multilangual strings in a project.
</remarks>
            <exception cref="!:BaseException">Thrown if an error occurs
                                while removing a language.</exception>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.ImportProjectTexts(System.String,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
Method for importing texts from the project into the
dictionary (language database). As the case may be, one or
more new languages will be added to the dictionary. The
language database into which the texts will be written are
determined by a user setting.

The languages specified in listLanguages should be already in
the translation languages of the project, otherwise nothing
is is imported for a language.
</summary>
            <param name="strProjectName">Full link file name of the
                             project from which the texts
                             will be imported.</param>
            <param name="listLanguages">List of languages to import. </param>
            <param name="bOverwrite">If set to true, translations
                         which are already existing in
                         the dictionary will be
                         overwritten by the imported
                         texts.</param>
            <remarks>


If the project given by strProjectName is not already open,
it will be opened and closed again after import.
</remarks>
            <returns>
true, in case of no error.
</returns>
            <exception cref="!:BaseException">Thrown if an error occurs
                                during import. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.ExportDatabaseTexts(System.String,System.String)">
            <summary>
Exporting text from translation database
</summary>
            <remarks />
            <param name="strFilename">Full file name.</param>
            <param name="strConverter">Converter long name (XTrLanguageDbXmlConverterImpl - XML format by default), see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <returns>
true, in case of no error.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.ImportDatabaseTexts(System.String,System.String,System.String)">
            <summary>
Importing text to translation database
</summary>
            <remarks />
            <param name="strFilename">Full file name.</param>
            <param name="strConverter">Converter long name (XTrLanguageDbXmlConverterImpl - XML format by default), see <see text="Eplan.EplApi.ApplicationFramework.XMLConverter" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverter" />
and <see text="Eplan.EplApi.ApplicationFramework.XMLConverterCategories" cref="!:Eplan::EplApi::ApplicationFramework::XMLConverterCategories" /> namespace.</param>
            <param name="strReferenceLanguage">List of language codes separated by semicolons.(example: en_US;de_DE)</param>
            <returns>
true, in case of no error.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.ImportProjectTexts(Eplan.EplApi.DataModel.Project,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
Method for importing texts from the project into the
dictionary (language database). As the case may be, one or
more new languages will be added to the dictionary. The
language database into which the texts will be written are
determined by a user setting.

The languages specified in listLanguages should be already in
the translation languages of the project, otherwise nothing
is is imported for a language.
</summary>
            <param name="pProject">Project from which the texts
                       will be imported.</param>
            <param name="listLanguages">List of languages to import. </param>
            <param name="bOverwrite">If set to true, translations
                         which are already existing in
                         the dictionary will be
                         overwritten by the imported
                         texts.</param>
            <remarks />
            <returns>
true, in case of no error.
</returns>
            <exception cref="!:BaseException">Thrown if an error occurs
                                during import. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.ExportMissingTranslation(System.String,System.String,System.Collections.Specialized.StringCollection,System.String)">
            <summary>
Exports a missing-word list of the given project.
</summary>
            <param name="strFilename">\File name of the missing\-word
                          list file.</param>
            <param name="strConverter">Format of the export file
                           defined by the name of the XML
                           converter to use\:<para />XTrLanguageDbXml2TabConverterImpl
                           \- export as tab\-separated
                           Unicode\-File (Eplan 21 format)<para />XE5LanguageDbXmlConverterImpl
                           \- export as comma\-separated
                           ASCII\-File (Eplan 5 format)
							<para />XTrLanguageDbXmlConverterImpl
                           \- export as XML</param>
            <param name="listLanguages">List of languages, for which
                            the missing translations will
                            be exported.</param>
            <param name="strProjectName">Full link file name of the
                             project, for which the missing
                             translations will be exported.</param>
            <remarks>
All languages in listLanguages have to be already in the list
of translation languages of the project.

If the project given by strProjectName is not already open,
it will be opened and closed again after export.
</remarks>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments, e.g.
                                    invalid objects in the <c>storableObjects</c>
                                    array.</exception>
            <exception cref="!:BaseException">Thrown when an error
                                occurred during export. </exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.TranslatePage(System.String,System.String)">
            <summary>
Translates all texts of a page in the specified project.
</summary>
            <param name="strProjectName">Full link file name of the
                             project, which contains the
                             page.</param>
            <param name="strPage">Full name of the page to be
                      translated.</param>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the translation process and will be closed subsequently.


</remarks>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project does
                                    not exist.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for
                                       translation could not
                                       be created. </exception>
            <exception cref="!:BaseException">An error occurred,
                                while translating the
                                page.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.TranslateProject(System.String)">
            <summary>
Translates all texts in the specified project.
</summary>
            <param name="strProjectName">Full link file name of the
                             project to be translated.</param>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the translation process and will be closed subsequently.


</remarks>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project does
                                    not exist.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for
                                       translation could not
                                       be created. </exception>
            <exception cref="!:BaseException">An error occurred,
                                while translating the
                                project.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Translate.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Translate">
            <summary>
Class providing functionality for translating project data. 
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Print.Parameters.m_pPrintParamIf">
            <summary>
internes Interface - implementiert die Verwaltung der Druckparameter
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.SetTargetFile(System.String)">
            <summary>
Pfad und Name der Ausgabedatei einstellen
</summary>
            <param name="sName">Pfad und Name der Ausgabedatei.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetTargetFile">
            <summary>
Pfad und Name der Ausgabedatei ermitteln
</summary>
            <returns>Pfad und Name der Ausgabedatei</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.SetCurrentPrinter(System.String)">
            <summary>
Aktuellen Drucker einstellen
</summary>
            <param name="sName">Name des Druckers</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetCurrentPrinter(System.String@)">
            <summary>
aktuellen Drucker auswählen
</summary>
            <param name="sName">Name des Druckers</param>
            <returns>True, wenn alles i.O.</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetOptions(System.Boolean*,System.Boolean*,System.Boolean*,System.Boolean*)">
            <summary>
Druckoptionen ermitteln
</summary>
            <param name="bSorted">Einstellung Sortierung der Ausgabe.</param>
            <param name="bReverse">Einstellung umgekehrte Ausgabe der Seiten.</param>
            <param name="bToFile">Ausgabe in File umleiten.</param>
            <param name="bChangedPages">Changed pages.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetOptions(System.Boolean*,System.Boolean*,System.Boolean*)">
            <summary>
Druckoptionen ermitteln
</summary>
            <param name="bSorted">Einstellung Sortierung der Ausgabe.</param>
            <param name="bReverse">Einstellung umgekehrte Ausgabe der Seiten.</param>
            <param name="bToFile">Ausgabe in File umleiten.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.SetOptions(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Druckoptionen setzen
</summary>
            <param name="bSorted">Einstellung Sortierung der Ausgabe.</param>
            <param name="bReverse">Einstellung umgekehrte Ausgabe der Seiten.</param>
            <param name="bToFile">Ausgabe in File umleiten.</param>
            <param name="bChangedPages">Changed pages.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.SetOptions(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Druckoptionen setzen
</summary>
            <param name="bSorted">Einstellung Sortierung der Ausgabe.</param>
            <param name="bReverse">Einstellung umgekehrte Ausgabe der Seiten.</param>
            <param name="bToFile">Ausgabe in File umleiten.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetBorders(System.String,System.Boolean,System.Drawing.RectangleF*,System.Drawing.RectangleF*,System.Boolean,System.Boolean,System.UInt32,System.Drawing.RectangleF*,System.Drawing.RectangleF*)">
            <summary>
Ermittelt Abmessungen 
</summary>
            <param name="strName">Druckername </param>
            <param name="bOrientation">Orientierung</param>
            <param name="rectMargin">[in]  </param>
            <param name="rectBoundingBox">[out] </param>
            <param name="bFitToPage" />
            <param name="bPreserveAspectRatio" />
            <param name="dPosition" />
            <param name="rectBorders">[out]  </param>
            <param name="rectClipBorders">[out] </param>
            <returns>True, wenn alles i.O.</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetMargins(System.String,System.Boolean,System.Double*,System.Drawing.RectangleF*)">
            <summary>
Ermittelt die eingestellten Druckränder.
</summary>
            <param name="strName">Druckername</param>
            <param name="bOrientation">Orientierung</param>
            <param name="fHwRatio">Höhe-Breite-Verhältnis </param>
            <param name="rect">zurückgeliefertes Rechteck</param>
            <returns>True, wenn alles i.O.</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetPrinterInfo(System.String,System.String@,System.String@,System.String@,System.UInt32*)">
            <summary>
Ermittelt Informationen über einen Drucker
</summary>
            <param name="strName">[in]Name des Druckers.</param>
            <param name="strLocation">[out]Ort des Druckers.</param>
            <param name="strComment">[out] Beschreibung.</param>
            <param name="strType">[out] Typ des Druckers.</param>
            <param name="dwStatus">[out] Status des Druckers.</param>
            <returns>True, wenn alles i.O.</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.GetPrinterList(System.Collections.Specialized.StringCollection@)">
            <summary>
Returns a list of existing printers
</summary>
            <param name="colNames">[out] Collection of printer names.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Parameters.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Print.Parameters">
            <summary>
management of printer parameters
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Print.m_strOrgLanguage">
            <summary>
Language before printing
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Print.m_strLanguage">
            <summary>
Printing language
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pProject">Project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
If <c> bPrintChangedPages </c> is used with non-empty <c>strTargetFile</c>
and nothing was changed empty file will be created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="pProject">Project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pProject">Project to be printed..</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>     
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="pProject">Project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>     
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages.</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently.

If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently.
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently.
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed project</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="arrayPages">ArrayList of page names to
                         be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed.

If <c> bPrintChangedPages </c> is used with non-empty <c>strTargetFile</c>
and nothing was changed empty file will be created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="arrayPages">ArrayList of page names to
                         be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print only changed pages.</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed.

If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="arrayPages">ArrayList of page names to be
                         printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.,
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed.
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="arrayPages">ArrayList of page names to be
                         printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are
                       specified by the full page
                       name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project.

If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are
                       specified by the full page
                       name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.,
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project.

If <c> bPrintChangedPages </c> is used with non-empty <c>strTargetFile</c>
and nothing was changed empty file will be created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are specified by
                       the full page name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are specified by
                       the full page name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <param name="strLanguage">Language of printed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.,
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pProject">Project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
If <c> bPrintChangedPages </c> is used with non-empty <c>strTargetFile</c>
and nothing was changed empty file will be created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="pProject">Project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pProject">Project to be printed..</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,Eplan.EplApi.DataModel.Project,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="pProject">Project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently.

If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently.
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently.
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Project(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints all pages of the given project on the specified
printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="arrayPages">ArrayList of page names to
                         be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed.

If <c> bPrintChangedPages </c> is used with non-empty <c>strTargetFile</c>
and nothing was changed empty file will be created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="arrayPages">ArrayList of page names to
                         be printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print only changed pages.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed.

If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="arrayPages">ArrayList of page names to be
                         printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.,
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed.
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.Collections.ArrayList,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="arrayPages">ArrayList of page names to be
                         printed.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified pages can belong to one project or a number of
projects. The projects have to be opened, otherwise nothing
is printed. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are
                       specified by the full page
                       name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project.

If <c> bPrintChangedPages </c> is used with non-empty
strTargetFile and nothing was changed empty file will be
created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are
                       specified by the full page
                       name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the
                            \output file in case of
                            printing to file.</param>
            <param name="bPrintChangedPages">Print changed pages</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.,
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project.

If <c> bPrintChangedPages </c> is used with non-empty <c>strTargetFile</c>
and nothing was changed empty file will be created anyway. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are specified by
                       the full page name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Pages(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Collections.Specialized.StringCollection,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
Prints pages on the specified printer.
</summary>
            <param name="strPrinterName">Printer name.</param>
            <param name="pSettings">
                <see text="System.Drawing.Printing.PrinterSettings" cref="T:System.Drawing.Printing.PrinterSettings" />
                        object to specify further
                        printer settings.</param>
            <param name="strFullLinkFileName">Full link file name of the
                         project to be printed.</param>
            <param name="colPages">Container of pages to be
                       printed. Pages are specified by
                       the full page name.</param>
            <param name="dNumber">Number of copies to print.</param>
            <param name="bPrintCollate">Collate output.</param>
            <param name="bPrintReverse">Reverse printing.</param>
            <param name="strTargetFile">Full file name of the output
                            \file in case of printing to
                            \file.</param>
            <exception cref="!:ArgumentException">Thrown
                                    in
                                    case
                                    of
                                    invalid
                                    \parameters,
                                    e.g.
                                    the
                                    project
                                    does
                                    not
                                    exist.</exception>
            <exception cref="!:ArgumentNullException">Thrown
                                        if
                                        a
                                        parameter
                                        is
                                        set
                                        to
                                        null.</exception>
            <exception cref="!:ApplicationException">The
                                       \internal
                                       interface
                                       necessary
                                       for
                                       printing
                                       could
                                       not
                                       be
                                       created.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">An
                                                           error
                                                           occurred
                                                           during
                                                           the
                                                           print
                                                           process.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:PrinterMissing">The
                                                                                given
                                                                                printer
                                                                                could
                                                                                not
                                                                                be
                                                                                found.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:DataModel\:\:OperationCanceledException">The
                                                                             print
                                                                             process
                                                                             was
                                                                             canceled
                                                                             by
                                                                             the
                                                                             user.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:HEServices\:\:Exceptions\:\:UnknownPrinter">Some
                                                                                undefined
                                                                                error
                                                                                occurred,
                                                                                e.g.,
                                                                                HDC
                                                                                could
                                                                                not
                                                                                be
                                                                                created.</exception>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the printing process and will be closed subsequently. All
pages in <c>colPages</c> need to belong to the specified
project. 
Warning! Please check settings under "Workstation-&gt;Graphical editing-&gt;Print" because they overwrite parameters of the method.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Print.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Print">
            <summary>
Class providing functionality for printing complete projects
or a number of pages. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.GetSearchDBEntries(Eplan.EplApi.DataModel.Project,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Returns objects from a list of search results.
</summary>
            <param name="pProject">Project of which the results list
                       entries will be returned.</param>
            <param name="nSearchDB">Index of the list of search
                        results. (0\: list 1, 1\: list 2).</param>
            <param name="nStartIndex">Start list index of the objects to
                          return. 0 means objects starting
                          with the first list position are
                          returned.</param>
            <param name="nCount">Maximum count of objects to
                     return.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
            <returns>
Found objects. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.GetSearchDBEntries(Eplan.EplApi.DataModel.Project,System.UInt32,System.UInt32)">
            <summary>
Returns objects from a list of search results.
</summary>
            <param name="pProject">Project of which the results list
                       entries will be returned.</param>
            <param name="nStartIndex">Start list index of the objects to
                          return. 0 means objects starting
                          with the first list position are
                          returned.</param>
            <param name="nCount">Maximum count of objects to
                     return.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
            <returns>
Found objects. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.GetAllSearchDBEntries(Eplan.EplApi.DataModel.Project,System.UInt32)">
            <summary>
\Returns all objects in a list of search results.
</summary>
            <param name="pProject">Project of which the results list
                       entries will be returned.</param>
            <param name="nSearchDB">Index of the list of search results.
                        (0\: list 1, 1\: list 2).</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
            <returns>
All found objects. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.GetAllSearchDBEntries(Eplan.EplApi.DataModel.Project)">
            <summary>
\Returns all objects in a list of search results.
</summary>
            <param name="pProject">Project of which the results list
                       entries will be returned.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
            <returns>
All found objects. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.AddRelatedObjectsToGotoDB(Eplan.EplApi.DataModel.StorableObject)">
            <summary>
Adds cross-referenced objects to the goto results list.
</summary>
            <param name="storableObject">Object of which the
                             cross\-references should be
                             found.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments
                                    (storableObject is
                                    not valid).</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.ClearSearchDB(Eplan.EplApi.DataModel.Project,System.UInt32)">
            <summary>
Clears the list of search results.
</summary>
            <param name="pProject">Project of which the list of search
                       results will be cleared.</param>
            <param name="nSearchDB">Index of the list of search results.
                        (0\: list 1, 1\: list 2).</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.ClearSearchDB(Eplan.EplApi.DataModel.Project)">
            <summary>
Clears the list of search results.
</summary>
            <param name="pProject">Project of which the list of search
                       results will be cleared.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.AddToSearchDB(Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Adds objects to the currently active list of search results.
</summary>
            <param name="storableObjects">Objects to add.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments
                                    (storableObject is
                                    not valid).</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The method finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.AddToSearchDB(Eplan.EplApi.DataModel.StorableObject)">
            <summary>
Fügt ein Objekt der Suchdatenbank hinzu. Es wird die aus den Einstellungen
gesetzte Suchdatenbank verwendet.
</summary>
            <exception cref="!:ArgumentNullException">Wenn Argumente nicht übergeben wurden.</exception>
            <exception cref="!:ArgumentException">Wenn Argumente nicht gültig. Zum Beispiel wenn das angegebene
 Projekt nicht existiert bzw. nicht gültig ist.</exception>
            <exception cref="!:ApplicationException">Die Schnittstelle für die Suche kann nicht erzeugt werden. </exception>
            <exception cref="!:BaseException">Suche konnte nicht korrekt durchgeführt werden.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.Page(Eplan.EplApi.DataModel.Page,System.String,System.String)">
            <summary>
Searches on the specified page for a search string. The
search settings will influence the result. The found object
will be written to the active list of results.
</summary>
            <param name="pPage">Page for which the search is
                    conducted.</param>
            <param name="searchString">Text to search for.</param>
            <param name="strFilterScheme">Filter scheme.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the page is not
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The search finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.Page(Eplan.EplApi.DataModel.Page,System.String)">
            <summary>
Searches on the specified page for a search string. The
search settings will influence the result. The found object
will be written to the active list of results.
</summary>
            <param name="pPage">Page for which the search is
                    conducted.</param>
            <param name="searchString">Text to search for.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the page is not
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The search finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.Project(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Searches on the specified project for a search string. The
search settings will influence the result. The found object
will be written to the active list of results.
</summary>
            <param name="pProject">Project for which the search is
                       conducted.</param>
            <param name="searchString">Text to search for.</param>
            <param name="strFilterScheme">Filter scheme.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The search finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.Project(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Searches on the specified project for a search string. The
search settings will influence the result. The found object
will be written to the active list of results.
</summary>
            <param name="pProject">Project for which the search is
                       conducted.</param>
            <param name="searchString">Text to search for.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. </exception>
            <exception cref="!:BaseException">The search finished
                                with errors.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.Project(System.String,System.String)">
            <summary>
Searches on the specified project for a search string. The
search settings will influence the result. The found object
will be written to the active list of results.
</summary>
            <remarks>
The specified project may be open in EPLAN or not. If the
project is not opened from the beginning, it will be opened
for the search process and will be closed subsequently.
</remarks>
            <param name="strProjectName">Full link file name of the
                             project for which the search is
                             conducted.</param>
            <param name="searchString">Text to search for.</param>
            <exception cref="!:ArgumentNullException">Thrown if null was
                                        passed as an
                                        argument.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the project is
                                    not valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for search could not
                                       be created. . </exception>
            <exception cref="!:BaseException">The search finished
                                with errors.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Search.Setting(Eplan.EplApi.HEServices.Search.Settings)">
            <summary>
Gets/Sets whether the specified setting of a search is
enabled
</summary>
            <param name="id">Search setting value. Cannot be null.</param>
            <returns>
Value of the setting.
</returns>
        </member>
        <member name="P:Eplan.EplApi.HEServices.Search.SearchDatabaseNr">
            <summary>
This property has been deprecated. There is only one search database.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.InstallationSpaces">
            <summary>
Search in installation spaces.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.Placeholders">
            <summary>
Search in placeholders.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.NotPlaced">
            <summary>
Search in unplaced functions.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.EvalutionPages">
            <summary>
Search in report pages.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.GraphicPages">
            <summary>
Search in graphical pages.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.LogicPages">
            <summary>
Search in logic pages.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.ProjectData">
            <summary>
Search in project properties.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.PageData">
            <summary>
Search in page properties.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.Texts">
            <summary>
Search in Texts.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.AllProperties">
            <summary>
Search in all properties of all components.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.DeviceTag">
            <summary>
Search in device tags.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.WholeTexts">
            <summary>
Find whole texts only.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Search.Settings.CaseSensitive">
            <summary>
Search case sensitive.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Search.Settings">
            <summary>
Settings for how to search.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Search.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Search">
            <summary>
Class providing functionality to search within a project. 
<example> The following example shows how to use class Search.
<code lang="C#">

Search oSearch = new Search();

// Set settings which will influence the search result
oSearch[Search.Settings.CaseSensitive] = false;
oSearch[Search.Settings.Texts] = false;
oSearch[Search.Settings.DeviceTag] = true;
oSearch[Search.Settings.AllProperties] = false;
oSearch[Search.Settings.Texts] = false;
oSearch[Search.Settings.PageData] = false;
oSearch[Search.Settings.ProjectData] = false;
oSearch[Search.Settings.GraphicPages] = false;
oSearch[Search.Settings.EvalutionPages] = false;
oSearch[Search.Settings.NotPlaced] = false;
oSearch[Search.Settings.LogicPages] = true;

Project oProject = new ProjectManager().OpenProject("$(MD_PROJECTS)\\ESS_Sample_Project.elk");

//clear active search result list
oSearch.ClearSearchDB(oProject);

string textToFind = "EB3*";
//Search the project
oSearch.Project(oProject, textToFind);		

//Get search results
StorableObject[] arrObjects = oSearch.GetAllSearchDBEntries(oProject);

</code></example></summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.DesignSpaces(Eplan.EplApi.DataModel.Project,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.InstallationSpace},System.String)">
            <summary>
Exports components of design space as xml and step data.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="listInstallationSpaces">Collection of installation spaces which will be exported. Can be null if <c>bEntireProject</c></param>
            <param name="strScheme">Scheme used to export installation spaces.</param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates step files and a XML-files with assembling data and numerical control data in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of installation spaces. If parameter <c>bEntireProject</c> is <c>true</c> then <c>listInstallationSpaces</c>
can be <c>null</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.CopperForNC(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Exports unfolding of bended bus bar  as numerical control data.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strMachineName">Name of machine which will be used to export. If null or empty then last used in GUI will be used.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="oCollection">Collection of 3d object will be exported. Can be null if <c>bEntireProject</c></param>
            <param name="strMaterialName">Name of material on which bus bar will be made. 
If name will be invalid then default material is being used for export.</param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates files with numerical control data in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of 3d bended bus bars. If parameter <c>bEntireProject</c> is <c>true</c> then <c>oCollection</c>
ca be <c>null</c>. If machine name is passed it must be valid what means that the must scheme with this name must exists as node under name
<c>"COMPANY.NCLog.CopperNCScheme.*"</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.CopperForDXF(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Exports unfolding of bended bus bar into DXF files.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strMachineName">Name of machine which will be used to export. If null or empty then last used in GUI will be used.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="oCollection">Collection of 3d object will be exported. Can be null if <c>bEntireProject</c></param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates DXF files in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of bended bus bars. If parameter <c>bEntireProject</c> is <c>true</c> then <c>oCollection</c>
ca be <c>null</c>. If machine name is passed it must be valid what means that the must scheme with this name must exists as node under name
<c>"COMPANY.NCLog.CopperDXFScheme.*"</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.DrillingTemplatesToDXF(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Exports drillings of a 3d objects into DXF files.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strMachineName">Name of machine which will be used to export. If null or empty then last used in GUI will be used.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="oCollection">Collection of 3d object from whicg drillings will be exported. Can be null if <c>bEntireProject</c></param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates files with numerical control data in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of 3d placements. If parameter <c>bEntireProject</c> is <c>true</c> then <c>oCollection</c>
ca be <c>null</c>. If machine name is passed it must be valid what means that the must scheme with this name must exists as node under name
<c>"COMPANY.NCLog.NCDXFScheme.*"</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.DrillingTemplatesToPDF(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Exports drillings of a 3d objects as templates into PDF files.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strMachineName">Name of machine which will be used to export. If null or empty then last used in GUI will be used.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="oCollection">Collection of 3d object from whicg drillings will be exported. Can be null if <c>bEntireProject</c></param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates files with numerical control data in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of 3d placements. If parameter <c>bEntireProject</c> is <c>true</c> then <c>oCollection</c>
ca be <c>null</c>. If machine name is passed it must be valid what means that the must scheme with this name must exists as node under name
<c>"COMPANY.NCLog.StencilScheme.*"</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.NCForRittalAutomation(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Exports drillings of a 3d objects as numerical control data for RittalAutomation machine.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strMachineName">Name of machine which will be used to export. If null or empty then last used in GUI will be used.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="oCollection">Collection of 3d object from whicg drillings will be exported. Can be null if <c>bEntireProject</c></param>
            <param name="strMaterialName">Name of material on which drilling will be made. 
If name will be invalid then default material is being used for export.</param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates files with numerical control data in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of 3d placements. If parameter <c>bEntireProject</c> is <c>true</c> then <c>oCollection</c>
ca be <c>null</c>. If machine name is passed it must be valid what means that the must scheme with this name must exists as node under name
<c>"COMPANY.NCLog.KieslingScheme.*"</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.NCForKiesling(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Exports drillings of a 3d objects as numerical control data for Kiesling machine.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strMachineName">Name of machine which will be used to export. If null or empty then last used in GUI will be used.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="oCollection">Collection of 3d object from whicg drillings will be exported. Can be null if <c>bEntireProject</c></param>
            <param name="strMaterialName">Name of material on which drilling will be made. 
If name will be invalid then default material is being used for export.</param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates files with numerical control data in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of 3d placements. If parameter <c>bEntireProject</c> is <c>true</c> then <c>oCollection</c>
ca be <c>null</c>. If machine name is passed it must be valid what means that the must scheme with this name must exists as node under name
<c>"COMPANY.NCLog.KieslingScheme.*"</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.NCForSteinhauer(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D})">
            <summary>
Exports drillings from a 3d objects as numerical control data for Steinhauer machine.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strMachineName">Name of machine which will be used to export. If null or empty then last used in GUI will be used.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEntireProject">If true then all project is exported.</param>
            <param name="oCollection">Collection of 3d object from whicg drillings will be exported. Can be null if <c>bEntireProject</c></param>
            <returns>
                <c>true</c> if export finished with success, otherwise <c>false</c></returns>
            <remarks>Function creates files with numerical control data in path passed by parameter <c>strTargetDirectory</c>. Source of this
data is hole project or collections of 3d placements. If parameter <c>bEntireProject</c> is <c>true</c> then <c>oCollection</c>
ca be <c>null</c>. If machine name is passed it must be valid what means that the must scheme with this name must exists as node under name
<c>"COMPANY.NCLog.SteinhauerScheme.*"</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.Placements3DToStep(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D},System.String)">
            <summary>
Exports given article placements into files in STEP format.
</summary>
            <param name="listPlacements3D">Collection of placements which will be exported. Can not be <c>null</c> or empty.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <remarks>Then names of files are generated from partnumber and variant. If there is no partnumber
the name is created from part designation and identifying name. For all length-adjustable parts the legend ID is added.
Export in original position of part without any transformation!</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.InstallationSpacesToStep(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.InstallationSpace},System.String,System.Boolean,System.String)">
            <summary>
Exports given installation spaces into files in STEP format.
</summary>
            <param name="listInstallationSpaces">Collection of installation spaces which will be exported. Can not be <c>null</c> or empty.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEachTopLevelParentInSeparateFile">If <c>true</c> then each first level child will be exported in separete file.</param>
            <param name="strScheme">Scheme used to export installation spaces.</param>
            <remarks>If <c>bEachTopLevelParentInSeparateFile</c> is <c>false</c> then names of files are generated from properties 
<see text="INSTALLATIONSPACE_FULLNAME" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_FULLNAME(System.Int32)" />.
If <c>true</c> then property <see text="FUNC_FULLNAME" cref="P:Eplan.EplApi.DataModel.FunctionBasePropertyList.FUNC_FULLNAME(System.Int32)" /> is added at the end of file name.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Thrown if schema is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.InstallationSpacesToStep(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.InstallationSpace},System.String,System.Boolean)">
            <summary>
Exports given installation spaces into files in STEP format.
</summary>
            <param name="listInstallationSpaces">Collection of installation spaces which will be exported. Can not be <c>null</c> or empty.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEachTopLevelParentInSeparateFile">If <c>true</c> then each first level child will be exported in separete file.</param>
            <remarks>If <c>bEachTopLevelParentInSeparateFile</c> is <c>false</c> then names of files are generated from properties 
<see text="INSTALLATIONSPACE_FULLNAME" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_FULLNAME(System.Int32)" />.
If <c>true</c> then property <see text="FUNC_FULLNAME" cref="P:Eplan.EplApi.DataModel.FunctionBasePropertyList.FUNC_FULLNAME(System.Int32)" /> is added at the end of file name.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.ProjectToStep(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Exports project into files in STEP format.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <param name="bEachTopLevelParentInSeparateFile">If <c>true</c> then each first level child will be exported in separete file.</param>
            <remarks>If <c>bEachTopLevelParentInSeparateFile</c> is <c>false</c> then names of files are generated from properties 
<see text="INSTALLATIONSPACE_FULLNAME" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_FULLNAME(System.Int32)" />.
If <c>true</c> then property <see text="FUNC_FULLNAME" cref="P:Eplan.EplApi.DataModel.FunctionBasePropertyList.FUNC_FULLNAME(System.Int32)" /> is added at the end of file name.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.InstallationSpacesToVrml(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.InstallationSpace},System.String,System.String)">
            <summary>
Exports given installation spaces into files in VRML format.
</summary>
            <param name="listInstallationSpaces">Collection of installation spaces which will be exported. Can not be <c>null</c> or empty.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. If value is <c>null</c> or empty target directory from scheme is used.</param>
            <param name="strScheme">Scheme used to export installation spaces.</param>
            <remarks>Names of files are generated from properties 
<see text="INSTALLATIONSPACE_FULLNAME" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_FULLNAME(System.Int32)" />. </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">Thrown if schema is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.InstallationSpacesToVrml(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.InstallationSpace},System.String)">
            <summary>
Exports given installation spaces into files in VRML format.
</summary>
            <param name="listInstallationSpaces">Collection of installation spaces which will be exported. Can not be <c>null</c> or empty.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <remarks>Names of files are generated from properties 
<see text="INSTALLATIONSPACE_FULLNAME" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_FULLNAME(System.Int32)" />. </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.ProjectToVrml(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Exports all installation spaces from project into files in VRML format.
</summary>
            <param name="oProject">Project to be exported. Can not be <c>null</c>.</param>
            <param name="strTargetDirectory">Directory to which files will be written.
If the folder does not exist, it will be created. If the user does not have the necessary rights to
access the file system, an exception will be thrown. Can not be <c>null</c> or empty.</param>
            <remarks>Names of files are generated from properties 
<see text="INSTALLATIONSPACE_FULLNAME" cref="P:Eplan.EplApi.DataModel.E3D.InstallationSpacePropertyList.INSTALLATIONSPACE_FULLNAME(System.Int32)" />. </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Export3D.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Export3D">
            <summary>
Class for exporting 3d objects to various formats.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.UpdatePartDimensions(Eplan.EplApi.DataModel.Function[])">
            <summary>
Transfers dimensions from articles to article placements.
Corresponds to the 'Project data -&gt; Parts / Devices -&gt; 2D panel layout -&gt; Update part dimensions' menu item.
</summary>
            <param name="arrArticlePlacements">The article placements to update.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.UpdatePartDimensions(Eplan.EplApi.DataModel.Project)">
            <summary>
Transfers dimensions from articles to article placements.
Corresponds to the 'Project data -&gt; Parts / Devices -&gt; 2D panel layout -&gt; Update part dimensions' menu item.
</summary>
            <returns>
An array of modified article placements.
</returns>
            <param name="prj">A project to update article placements in.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.UpdatePartDimensions(Eplan.EplApi.DataModel.Page)">
            <summary>
Transfers dimensions from articles to article placements.
Corresponds to the 'Project data -&gt; Parts / Devices -&gt; 2D panel layout -&gt; Update part dimensions' menu item.
</summary>
            <returns>
An array of modified article placements.
</returns>
            <param name="page">A panel layout page to update article placements from.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.UpdateMainElements(Eplan.EplApi.DataModel.Function)">
            <summary>
Transfers part references of a part placement to the corresponding main function.
Corresponds to the 'Project data -&gt; Parts / Devices -&gt; 2D panel layout -&gt; Update main elements' menu item.
</summary>
            <returns>
An array of modified main functions.
</returns>
            <param name="funcArticlePlacement">The article placement to update from.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.UpdateMainElements(Eplan.EplApi.DataModel.Project)">
            <summary>
Transfers part references of all the part placements in the project to main functions.
Corresponds to the 'Project data -&gt; Parts / Devices -&gt; 2D panel layout -&gt; Update main elements' menu item.
</summary>
            <returns>
An array of modified main functions.
</returns>
            <param name="prj">A project to update main functions in.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.UpdateMainElements(Eplan.EplApi.DataModel.Page)">
            <summary>
Transfers part references of all part placements on the page to main functions.
Corresponds to the 'Project data -&gt; Parts / Devices -&gt; 2D panel layout -&gt; Update main elements' menu item.
</summary>
            <returns>
An array of modified main functions.
</returns>
            <param name="page">A panel layout page to update main functions from.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.CreateArticlePlacement(Eplan.EplApi.DataModel.Function,System.String,System.String,System.Int32,Eplan.EplApi.Base.PointD,Eplan.EplApi.DataModel.Function@)">
            <summary>
Produces an article placement on the mounting panel. 
The article must be in the project's database.
</summary>
            <param name="oMountingPanel">mounting panel</param>
            <param name="strPartNumber">part number</param>
            <param name="strPartVariant">article's variant</param>
            <param name="macroVariant">variant of the article's macro to insert (0 - variant A, 1 - variant B, etc.)</param>
            <param name="pLocation">location</param>
            <param name="oArticlePlacement">created article placement</param>
            <remarks>
In case the specified macro variant doesn't exist, a BaseException is thrown.

Position of created placement is influenced by part placement handle string setting ("USER.PanelLayoutGui.Settings.Gripper").
If "USER.PanelLayoutGui.Settings.Gripper" is set to "UpperLeft" value then created placement will be positioned exactly at point passed in 
pLocation parameter.
</remarks>
            <example>
                <code lang="c#">
new Settings().SetStringSetting("USER.PanelLayoutGui.Settings.Gripper", "UpperLeft");

Note: The article must have width and height specified (the values must be greater than zero).
</code>
            </example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.CreateArticlePlacement(Eplan.EplApi.DataModel.Function,System.String,System.Int32,Eplan.EplApi.Base.PointD,Eplan.EplApi.DataModel.Function@)">
            <summary>
Produces an article placement on the mounting panel. 
The article must be in the project's database.
</summary>
            <param name="oMountingPanel">mounting panel</param>
            <param name="strPartNumber">part number</param>
            <param name="macroVariant">variant of the article's macro to insert (0 - variant A, 1 - variant B, etc.)</param>
            <param name="pLocation">location</param>
            <param name="oArticlePlacement">created article placement</param>
            <remarks>
In case the specified macro variant doesn't exist, a BaseException is thrown.

Position of created placement is influenced by part placement handle string setting ("USER.PanelLayoutGui.Settings.Gripper").
If "USER.PanelLayoutGui.Settings.Gripper" is set to "UpperLeft" value then created placement will be positioned exactly at point passed in 
pLocation parameter.
</remarks>
            <example>
                <code lang="c#">
 new Settings().SetStringSetting("USER.PanelLayoutGui.Settings.Gripper", "UpperLeft");

//Note: The article must have width and height specified (the values must be greater than zero).
</code>
            </example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.CreateArticlePlacement(Eplan.EplApi.DataModel.Function,System.String,Eplan.EplApi.Base.PointD,Eplan.EplApi.DataModel.Function@)">
            <summary>
Produces an article placement on the mounting panel. 
The article must be in the project's database.
</summary>
            <param name="oMountingPanel">mounting panel</param>
            <param name="strPartNumber">part number</param>
            <param name="pLocation">location</param>
            <param name="oArticlePlacement">created article placement</param>
            <remarks>
By default, variant A of the macro specified for the article is inserted.
In case the variant doesn't exist in the macro, a BaseException is thrown.

Position of created placement is influenced by part placement handle string setting ("USER.PanelLayoutGui.Settings.Gripper").
If "USER.PanelLayoutGui.Settings.Gripper" is set to "UpperLeft" value then created placement will be positioned exactly at point passed in 
pLocation parameter.
</remarks>
            <example>
                <code lang="c#">
new Settings().SetStringSetting("USER.PanelLayoutGui.Settings.Gripper", "UpperLeft");

//Note: The article must have width and height specified (the values must be greater than zero).
</code>
            </example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.CreateArticlePlacement(Eplan.EplApi.DataModel.Function,System.String,Eplan.EplApi.Base.PointD)">
            <summary>
Produces an article placement on the mounting panel. 
The article must be in the project's database.
</summary>
            <param name="oMountingPanel">mounting panel</param>
            <param name="strPartNumber">part number</param>
            <param name="pLocation">location</param>
            <remarks>
By default, variant A of the macro specified for the article is inserted.
In case the variant doesn't exist in the macro, a BaseException is thrown.

Position of created placement is influenced by part placement handle string setting ("USER.PanelLayoutGui.Settings.Gripper").
If "USER.PanelLayoutGui.Settings.Gripper" is set to "UpperLeft" 
value then created placement will be positioned exactly at point passed in pLocation parameter.
</remarks>
            <example>
                <code lang="c#">
 new Settings().SetStringSetting("USER.PanelLayoutGui.Settings.Gripper", "UpperLeft");

//Note: The article must have width and height specified (the values must be greater than zero).
</code>
            </example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.ReorganizeLegendNumbersWithSameNumbers(Eplan.EplApi.DataModel.Function,System.Int64,System.Int64,Eplan.EplApi.HEServices.MountingPanelService.NumberingDirection,System.Boolean)">
            <summary>
Reorganize legend Ids of a panel layout.
</summary>
            <param name="oMountingPanel">Mounting panel whose
                             legend numbers will be
                             reorganized.</param>
            <param name="nStartValue">Start value for the
                          numbering.</param>
            <param name="nStepValue">Step value for the
                         numbering.</param>
            <param name="nNumberingDirection">Numbering direction.
                                  Allowed values are defined
                                  in the enum
                                  NUMBERING_DIRECTION.</param>
            <param name="fSameNumbers">If true then set same numbers for identical devices. 
                           Identical devices have the same partnumber.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown when required
                                        parameter is null. </exception>
            <exception cref="!:ArgumentException">Invalid parameter.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Error occurred while
                                reorganizing legend
                                numbers.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.ReorganizeLegendNumbers(Eplan.EplApi.DataModel.Function,System.Int64,System.Int64,Eplan.EplApi.HEServices.MountingPanelService.NumberingDirection)">
            <summary>
Reorganize legend Ids of a panel layout.
</summary>
            <param name="oMountingPanel">Mounting panel whose
                             legend numbers will be
                             reorganized.</param>
            <param name="nStartValue">Start value for the
                          numbering.</param>
            <param name="nStepValue">Step value for the
                         numbering.</param>
            <param name="nNumberingDirection">Numbering direction.
                                  Allowed values are defined
                                  in the enum
                                  NUMBERING_DIRECTION.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Thrown when required
                                        parameter is null. </exception>
            <exception cref="!:ArgumentException">Invalid parameter.</exception>
            <exception cref="!:ApplicationException">Needed internal
                                       interface could not
                                       be created.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Error occurred while
                                reorganizing legend
                                numbers.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.MountingPanelService.NumberingDirection.Vertical">
            <summary>Vertical numbering</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.MountingPanelService.NumberingDirection.Horizontal">
            <summary>Horizontal numbering</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.MountingPanelService.NumberingDirection.Default">
            <summary>Sorted by DT</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.MountingPanelService.NumberingDirection">
            <summary>
Numbering direction
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.MountingPanelService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.MountingPanelService">
            <summary>
Class providing mounting panel functionalities such as reorganize legend numbers.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Backup.MasterData(System.Collections.Specialized.StringCollection,System.String,System.String,System.String,System.String,Eplan.EplApi.HEServices.Backup.MasterDataType,Eplan.EplApi.HEServices.Backup.Medium,System.Double)">
            <summary>
 Backs up master data. Master data include:
Symbol libraries, plot frames, forms, macros, parts data, dictionaries, user/workstation data.
</summary>
            <param name="strDataFileSelection">Selected files whose master data are to be backed up.</param>
            <param name="strComment">String that is written as a comment into the corresponding backup property in the backed up projects.</param>
            <param name="strSourcePath">Source directory</param>
            <param name="strTargetPath">Destination path where the backed up projects are stored.</param>
            <param name="strArchiveName">Name of file in which the backed up data are stored. Because strTargetpath already contains the destination path, the path must be left out when the file name is entered.</param>
            <param name="eMdType">An Enum constant, which may have the following values:
 <para>Symbols : Backup of symbol libraries. </para><para>Macros : Backup of macros.</para><para>Forms : Backup of forms.</para><para>Articles : Backup of parts data.</para><para>Languages : Backup of dictionaries.</para><para>StandardSheet : Backup of plot frames.</para><para>StationData : Backup of workstation settings.</para></param>
            <param name="eBakMedia">An Enum constant, which may have the following values:
 <para>Disk	: Project is backed up on hard disk, diskette...</para><para>EMail : Project is sent by email. Window with new message will be shown. </para></param>
            <param name="dSplitSize">If the project is to be compressed before being backed up, it is possible to automatically split the destination file into smaller sections to easily send them by e-mail. SplitSize indicates the maximum file size in megabyte.
 If rdSplitSize = 0, the file is not split up.
 If eBakMedia parameter = Disk, rdSplitSize is ignored! </param>
            <exception cref="!:BaseException">An error occurs during a data backup operation.</exception>
            <exception cref="!:ApplicationException">The interface to the backup system cannot be generated.</exception>
            <remarks>If the specified directory already contains a backup file with the same name, this file is
  overwritten</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Backup.Project(System.String,System.String,System.String,System.String,Eplan.EplApi.HEServices.Backup.Type,Eplan.EplApi.HEServices.Backup.Medium,System.Double,Eplan.EplApi.HEServices.Backup.Amount,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Backs up an entire project. 
The path specified in strProjectPath parameter becomes invalid after the backup.
</summary>
            <param name="strProjectPath">An entire path to the project. (File extensions, e.g. *.elk, don't have to be specified.)</param>
            <param name="strComment">String that is written as a comment into the corresponding backup property in the backed up project.</param>
            <param name="strTargetPath">Destination path where the backed up project is stored.</param>
            <param name="strArchiveName">File name under which backed up project is to be saved.</param>
            <param name="eBakMethod">An Enum constant, which may have the following values:
  <para>Backup        : Project is backed up</para><para>SourceOut     : Project is filed off</para><para>Archive       : Project is archived. Must not be set when "eBakMedia" parameter is "EMail".</para><para>Pack          : Project is packed. Param <c>strTargetPath</c> is ignored. </para></param>
            <param name="eBakMedia">An Enum constant, which may have the following values:
 <para>Disk	: Project is backed up on hard disk, diskette...</para><para>EMail : Project is sent by e-mail. Window with new message will be shown.</para></param>
            <param name="dSplitSize">If the project is to be compressed before being backed up, it is possible to automatically split the destination file into smaller sections to easily send them by e-mail. SplitSize indicates the maximum file size in megabytes.
 If rdSplitSize = 0, the file is not split up.
 If the eBakMedia parameter = Disk, rdSplitSize is ignored!</param>
            <param name="eBakAmount">An Enum constant, which may have the following values:
 <para>All : The entire project directory is backed up.</para><para>Min : Only the database files required to
  restore the project are backed up; redundant database files are ignored.</para></param>
            <param name="bCompressPrj">If true, the database is compressed before the backup is made (at DISAM level, the EPLAN project is not compressed).</param>
            <param name="bInclExtDocs">If true, external documents are included in the backup (files in the project subdirectory \DOC).</param>
            <param name="bInclImages">If true, image files are included in the backup (files in the project subdirectory \Images).</param>
            <param name="bCopyReferencedData">If true, external files that are referenced by the project 
								  are copied to the project's directory (the '\DOC' subdirectory) before the backup.</param>
            <remarks>If the specified directory already contains a backup file with the same name, this file is
 overwritten. Archive names of the form &lt;some name&gt;.nnn (n = a digit 0 - 9) are forbidden, because an archive name of this form ( with a three-digit-extension)is automatically created when the backup file is split into several parts. 
</remarks>
            <exception cref="!:BaseException">An error occurs during a data backup operation.</exception>
            <exception cref="!:ApplicationException">The interface to the backup system cannot be generated.</exception>
            <exception cref="!:ProjectLockingException">The project could not be locked for back up.</exception>
            <example>Following example shows how to use the method: 
<code lang="cs" source="P8_API_Example_HEServices_Backup_Example1.cs.txt" /></example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Backup.Project(System.Collections.Specialized.StringCollection,System.String,System.String,System.Collections.Specialized.StringCollection,Eplan.EplApi.HEServices.Backup.Type,Eplan.EplApi.HEServices.Backup.Medium,System.Double,Eplan.EplApi.HEServices.Backup.Amount,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Backs up the entire project. Projects with a path specified in parameter strColPrjSelection become invalid.
</summary>
            <param name="strColPrjSelection">Collection of projects that are to be backed up. 
 The names must contain the entire project path. Project file extensions (e.g. *.elk) don't have to be 
 specified; they are filtered out.</param>
            <param name="strComment">String that is written as a comment into the corresponding backup property in the backed up projects.</param>
            <param name="strTargetPath">Destination path where the backed up projects are stored.</param>
            <param name="strColArcName">Collection of file names under which backed up projects are to be saved. 
 The entries of strColArcName must be listed in the same order as those of strColPrjSelection.
 Because strTargetpath already contains the destination path, the path must be left out when the file name is entered.</param>
            <param name="eBakMethod">An Enum constant, which may have the following values:
  <para>Backup        : Project is backed up</para><para>SourceOut     : Project is filed off</para><para>Archive       : Project is archived. Must not be set when "eBakMedia" parameter is "EMail".</para><para>Pack          : Project is packed. Param <c>strTargetPath</c> is ignored. </para></param>
            <param name="eBakMedia">An Enum constant, which may have the following values:
 <para>Disk	: Project is backed up on hard disk, diskette...</para><para>EMail : Project is sent by e-mail. Window with new message will be shown.</para></param>
            <param name="dSplitSize">If the project is to be compressed before being backed up, it is possible to automatically split the destination file into smaller sections to easily send them by e-mail. SplitSize indicates the maximum file size in megabytes.
 If rdSplitSize = 0, the file is not split up.
 If the eBakMedia parameter = Disk, rdSplitSize is ignored!</param>
            <param name="eBakAmount">An Enum constant, which may have the following values:
 <para>All : The entire project directory is backed up.</para><para>Min : Only the database files required to
  restore the project are backed up; redundant database files are ignored.</para></param>
            <param name="bCompressPrj">If true, the database is compressed before the backup is made (at DISAM level, the EPLAN project is not compressed).</param>
            <param name="bInclExtDocs">If true, external documents are included in the backup (files in the project subdirectory \DOC).</param>
            <param name="bInclImages">If true, image files are included in the backup (files in the project subdirectory \Images).</param>
            <param name="bCopyReferencedData">If true, external files that are referenced by the project 
								  are copied to the project's directory (the '\DOC' subdirectory) before the backup.</param>
            <remarks>If the specified directory already contains a backup file with the same name, this file is
 overwritten. Archive names of the form &lt;some name&gt;.nnn (n = a digit 0 - 9) are forbidden, because an archive name of this form ( with a three-digit-extension)is automatically created when the backup file is split into several parts. 
</remarks>
            <exception cref="!:BaseException">An error occurs during a data backup operation.</exception>
            <exception cref="!:ApplicationException">The interface to the backup system cannot be generated.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Backup.Project(System.Collections.Specialized.StringCollection,System.String,System.String,System.Collections.Specialized.StringCollection,Eplan.EplApi.HEServices.Backup.Type,Eplan.EplApi.HEServices.Backup.Medium,System.Double,Eplan.EplApi.HEServices.Backup.Amount,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Backs up the entire project. Projects with a path specified in parameter strColPrjSelection become invalid.
</summary>
            <param name="strColPrjSelection">Collection of projects that are to be backed up. 
 The names must contain the entire project path. Project file extensions (e.g. *.elk) don't have to be 
 specified; they are filtered out.</param>
            <param name="strComment">String that is written as a comment into the corresponding backup property in the backed up projects.</param>
            <param name="strTargetPath">Destination path where the backed up projects are stored.</param>
            <param name="strColArcName">Collection of file names under which backed up projects are to be saved. 
 The entries of strColArcName must be listed in the same order as those of strColPrjSelection.
 Because strTargetpath already contains the destination path, the path must be left out when the file name is entered.</param>
            <param name="eBakMethod">An Enum constant, which may have the following values:
  <para>Backup        : Project is backed up</para><para>SourceOut     : Project is filed off</para><para>Archive       : Project is archived. Must not be set when "eBakMedia" parameter is "EMail".</para><para>Pack          : Project is packed. Param <c>strTargetPath</c> is ignored. </para></param>
            <param name="eBakMedia">An Enum constant, which may have the following values:
 <para>Disk	: Project is backed up on hard disk, diskette...</para><para>EMail : Project is sent by e-mail. Window with new message will be shown.</para></param>
            <param name="dSplitSize">If the project is to be compressed before being backed up, it is possible to automatically split the destination file into smaller sections to easily send them by e-mail. SplitSize indicates the maximum file size in megabytes.
 If rdSplitSize = 0, the file is not split up.
 If the eBakMedia parameter = Disk, rdSplitSize is ignored!</param>
            <param name="eBakAmount">An Enum constant, which may have the following values:
 <para>All : The entire project directory is backed up.</para><para>Min : Only the database files required to
  restore the project are backed up; redundant database files are ignored.</para></param>
            <param name="bCompressPrj">If true, the database is compressed before the backup is made (at DISAM level, the EPLAN project is not compressed).</param>
            <param name="bInclExtDocs">If true, external documents are included in the backup (files in the project subdirectory \DOC).</param>
            <param name="bInclImages">If true, image files are included in the backup (files in the project subdirectory \Images).</param>
            <remarks>If the specified directory already contains a backup file with the same name, this file is
 overwritten. Archive names of the form &lt;some name&gt;.nnn (n = a digit 0 - 9) are forbidden, because an archive name of this form ( with a three-digit-extension)is automatically created when the backup file is split into several parts. 

</remarks>
            <exception cref="!:BaseException">An error occurs during a data backup operation.</exception>
            <exception cref="!:ApplicationException">The interface to the backup system cannot be generated.</exception>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.Outline">
            <summary>Backup of outline.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.ProjectTemplate">
            <summary>Backup of project template.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.BaseProject">
            <summary>Backup of base project.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.StationData">
            <summary>Backup of workstation settings.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.StandardSheet">
            <summary>Backup of plot frames.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.Languages">
            <summary>Backup of dictionaries.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.Articles">
            <summary>Backup of parts data.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.Forms">
            <summary>Backup of forms.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.Macros">
            <summary>Backup of macros.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.MasterDataType.Symbols">
            <summary>Backup of symbol libraries.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Backup.MasterDataType">
            <summary>
Master data types
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Medium.EMail">
            <summary>Project is sent by email. After calling Backup function, window with new message is shown and then receiver or subject can be set.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Medium.Disk">
            <summary>Project is backed up on hard disk, diskette...</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Backup.Medium">
            <summary>
Medium for data backup
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Type.CreateBase">
            <summary>Base project is created.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Type.EMail">
            <summary>Project is sent by email</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Type.Pack">
            <summary>Project is packed</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Type.Archive">
            <summary>Project is archived</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Type.SourceOut">
            <summary>Project is filed off</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Type.MakeBackup">
            <summary>Project is backed up</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Backup.Type">
            <summary>
Scope of data backup
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Amount.Min">
            <summary>Only the database files required to restore the project are backed up; redundant database files are ignored.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Backup.Amount.All">
            <summary>The entire project directory is backed up.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Backup.Amount">
            <summary>
Scope of data backup
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Backup.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Backup.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Backup.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Backup">
            <summary>
This class provides functions for the data backup.
<example>Following example shows how to use Backup class.
<code lang="cs" source="P8_API_Example_HEServices_Backup_Example1.cs.txt" /></example></summary>
        </member>
        <member name="M:IXHExport.exportData(ProjectHandle,EString,IXHExport.FilterMode,std.vector&lt;EString,std.allocator&lt;EString&gt;&gt;,EString,EContext*)">
            <param name="hProject">Handle to ther project from which we export the content</param>
            <param name="esLanguage">Language (e.g., en_US) (optional).</param>
            <param name="nFiltermode">Defines the scope of import (optional).
<para>0: list all harness objects together with directly assigned and indirectly related objects,
1: list all functions, connections and harness objects in project without any filtering,
2: if functions or connections assigned to harness in selection, apply mode "harness_related", otherwise "all" </para></param>
            <param name="vHarnessNames">Specifies the harness names used as filter criteria for given filtering mode (optional).</param>
            <param name="esDestination">Target file where the export</param>
            <param name="pContext">Current context object</param>
        </member>
        <member name="M:IXHExport.exportData(EString,EString,IXHExport.FilterMode,std.vector&lt;EString,std.allocator&lt;EString&gt;&gt;,EString,EContext*)">
            <param name="esProject">The full path of project.</param>
            <param name="esLanguage">Language (e.g., en_US) (optional).</param>
            <param name="nFiltermode">Defines the scope of import (optional).
<para>0: list all harness objects together with directly assigned and indirectly related objects,
1: list all functions, connections and harness objects in project without any filtering,
2: if functions or connections assigned to harness in selection, apply mode "harness_related", otherwise "all" </para></param>
            <param name="vHarnessNames">Specifies the harness names used as filter criteria for given filtering mode (optional).</param>
            <param name="esDestination">Target file where the export</param>
            <param name="pContext">Current context object</param>
        </member>
        <member name="F:XPAM_FIELD_GEWICHT">
XPAM_FIELD_EINBAUORT,		gelöscht 6.4.2004  KRA,MTE
</member>
        <member name="M:IPDFExport.exportPages(std.vector&lt;PageHandle,std.allocator&lt;PageHandle&gt;&gt;,EContext)">
            <summary>
method for exporting several pages of a project
</summary>
            <param name="vecPages">Vector of page handles which are exported. </param>
            <param name="rContext">Context with the needed parameters for the export</param>
            <returns>0 if method fails </returns>
            <remarks>It makes sense that all pages in the given vector are from the same
 project, since all are put into the same target file and project settings are used.</remarks> 
http://intranet/fue/prod/Eplan%20Redesign/Developer%20Guide/APPBASICS/Doku_PdfExport.doc
</member>
        <member name="M:IPDFExport.exportProject(ProjectHandle,EContext)">
            <summary>
method for exporting a whole project
</summary>
            <param name="hProject">Project to export</param>
            <param name="rContext">Context with the needed parameters for the export</param>
            <returns>0 if method fails </returns> 
http://intranet/fue/prod/Eplan%20Redesign/Developer%20Guide/APPBASICS/Doku_PdfExport.doc
</member>
        <member name="M:EsgInPlaceEditToolkit.isReadOnlyProperty(BaseHandle,System.UInt16)">
            <summary>
Method checks if property is read only
</summary>
            <param name="propId">The property id.</param>
            <returns>True, if read only.</returns>
        </member>
        <member name="M:EsDevTag.getNestedFunctions(DMFunctionHandle,std.vector&lt;DMFunctionHandle,std.allocator&lt;DMFunctionHandle&gt;&gt;*)">
Collects all function which are directly nested in source function.
</member>
        <member name="M:DMInPlaceContext.getMousePosY">
            <summary>
Get mouse position y in screen coordinates.
</summary>
            <returns>y-position of mouse </returns>
        </member>
        <member name="M:DMInPlaceContext.getMousePosX">
            <summary>
Get mouse position x in screen coordinates.
</summary>
            <returns>x-position of mouse </returns>
        </member>
        <member name="M:DMInPlaceContext.setMousePosition(System.Int32,System.Int32)">
            <summary>
Set the mouse position in screen coordinates
</summary>
            <param name="x">x-position</param>
            <param name="y">y-position</param>
        </member>
        <member name="M:DMInPlaceContext.getY">
            <summary>
Get y-position of dialog
</summary>
            <returns>The y-position</returns>
        </member>
        <member name="M:DMInPlaceContext.setY(System.Int32)">
            <summary>
Set y-position of dialog
</summary>
            <param name="y">y-position</param>
        </member>
        <member name="M:DMInPlaceContext.getX">
            <summary>
Get x-position of dialog
</summary>
            <returns>The x-position</returns>
        </member>
        <member name="M:DMInPlaceContext.setX(System.Int32)">
            <summary>
Set x-position of dialog
</summary>
            <param name="x">x-position</param>
        </member>
        <member name="F:SUM_SUBTOTAL">
CR 7348: Summierungen ////////
</member>
        <member name="M:DmgDimensionCircle.internalGetGripPoints(std.vector&lt;DmgGripPointInfo,std.allocator&lt;DmgGripPointInfo&gt;&gt;*,IDmgDrawingContext*)">
            <summary>
get the grip points
</summary>
        </member>
        <member name="M:DmgDimensionCircle.internalFindNearestSnapPoint(System.Int32,EPoint,System.Double*,EPoint*,Dmg.DmgSnapTypes*,IDmgDrawingContext*)">
            <summary>
Method searches for snap points around pntLocation. If a snap is found with a distance smaller than dMniDist then true is returned and dMinDist,
pntFound and nFoundType are actualised.
</summary>
        </member>
        <member name="M:DmgDimensionCircle.isDiameterMeasured">
            <summary>
Find out if diameter or radius is measured.
</summary>
            <returns>True if diameter is measured, otherwise false.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setTypeOfMeasure(System.Boolean)">
            <summary>
Set type of measure i.e. if radius or diamete should be measured.
</summary>
            <param name="bMeasDiameter">If true, diameter is measured otherwise radius.</param>
        </member>
        <member name="M:DmgDimensionCircle.getStyleOfCircleDimension">
            <summary>
Get the style of circle dimension.
</summary>
            <returns>The style of circle dimension.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setStyleOfCircleDimension(Dmg.DmgTypeOfCircleDimension)">
            <summary>
Set the style of the circle dimension.
</summary>
            <param name="nType">The style of circle dimension.</param>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionTextPosition(EPoint)">
            <summary>
Set the dimension text position.
</summary>
            <param name="pntTextPosition">The dimension text position.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionTextPosition">
            <summary>
Get the dimension text position.
</summary>
            <returns>The dimension text position.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionText(EString)">
            <summary>
Set the dimension text.
</summary>
            <param name="esDimensionText">The dimension text.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionText">
            <summary>
Get dimension text.
</summary>
            <returns>The dimension text.</returns>
        </member>
        <member name="M:DmgDimensionCircle.getPointExtensionLine">
            <summary>
Get vertex of extension line.
</summary>
            <returns>the vertex of extension line.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setPointExtensionLine(EPoint)">
            <summary>
Set the vertex of extension line.
</summary>
            <param name="pntExtensionLine">Vertex extension line.</param>
        </member>
        <member name="M:DmgDimensionCircle.getVertex">
            <summary>
Get the vertex of dimension line.
</summary>
            <returns>The vertex.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setVertex(EPoint)">
            <summary>
Set the vertex. This indicates the vertex of dimension line.
</summary>
            <param name="pntVertex">The vertex.</param>
        </member>
        <member name="M:DmgDimensionCircle.getCenter">
            <summary>
Get the center.
</summary>
            <returns>the center of circle or circular arc.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setCenter(EPoint)">
            <summary>
Set the center of the circle or circular arc.
</summary>
            <param name="pntCenter">The center of circle or circular arc.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionPosition">
            <summary>
Get the dimension position.
</summary>
            <returns>The dimension position.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionPosition(EPoint)">
            <summary>
Set the dimension position. This position indicates the vertex of dimension line on the circle.
</summary>
            <param name="pntDimensionPosition">The dimension position.</param>
        </member>
        <member name="M:DmgDimensionCircle.getDimensionPoint">
            <summary>
Get the dimension point. This point indicates the vertex of dimension line on the circle.
</summary>
            <returns>The dimension point.</returns>
        </member>
        <member name="M:DmgDimensionCircle.setDimensionPoint(DmgDimensionPoint)">
            <summary>
Set the dimension point. This point indicates the vertex of dimension line on the circle.
</summary>
            <param name="dimDimPoint">The dimension point to set.</param>
        </member>
        <member name="T:DmgSpecialMirrorRotateTexts">
            <summary>
This is a class for transforming texts in a special manner used e.g. for
the change of norms, for mirroring in the ged or by the symbol editor.
You can mirror texts or ratate texts by 90, 180 and 270 degrees.
</summary>
        </member>
        <member name="M:EGeoSpline.getSplineAsPolyline(EGeoPolyLine*,System.UInt32)">
            <summary>
methods converts spline into a polyline
</summary>
            <param name="geoPoly">converted polyline </param>
            <param name="nSegments">number of segments of new created polyline, default:128
	Created polyine may contain only one segment, if control points of bezier curve are on the line
	between pntstart and pntend</param>
            <returns>true if everything is allright </returns>
        </member>
        <member name="F:Aflicense.m_bIsLicensingAvailable">
is licensing is available
</member>
        <member name="M:Aflicense.isLicensingAvailable">
Checks if licensing is available
</member>
        <member name="F:AfApplication.sm_Application">
************************************************************************
************************************************************************
</member>
        <member name="T:EUnicodeConverter">
EUnicodeConverter.h
</member>
        <member name="M:op_BitwiseAnd(IEArchive*,EColor*)">
global operator to write an EColor into an archive or to read it from
</member>
        <member name="M:EBox3D.getCenter">
get box center point 
</member>
        <member name="M:EBox3D.getDiagonal">
get box direction vector.
</member>
        <member name="M:EPosition3D.set(EPoint3D,EUnitVector3D,EAngleType)">
conversion from eCabinet/Triga
</member>
        <member name="M:EPosition3D.set(EPoint3D,EUnitVector3D,EUnitVector3D)">
explicit set
</member>
        <member name="M:EPosition3D.#ctor(EPoint3D,EUnitVector3D,EUnitVector3D)">
conversion from eCabinet/Triga
</member>
        <member name="M:EPosition3D.#ctor(EPoint3D,EUnitVector3D,EAngleType)">
explicit constructor
</member>
        <member name="M:EPosition3D.#ctor(ETransform3D)">
conversion from ETransform3D
</member>
        <member name="M:EPosition3D.#ctor(EPosition3D*)">
copy constructor
</member>
        <member name="M:EPosition3D.#ctor(EPosition3D)">
copy constructor
</member>
        <member name="M:EPosition3D.#ctor">
default constructor
</member>
        <member name="F:EArc3D.m_Angle">
angle to End-Point
</member>
        <member name="F:EArc3D.m_StartVector">
Start-Point
</member>
        <member name="F:EArc3D.m_Normal">
normal vector 
</member>
        <member name="F:EArc3D.m_Origin">
center point
</member>
        <member name="M:EArc3D.set(EPoint3D,EUnitVector3D,EVector3D,EAngleType)">
Methodes from Interface ICurve3D
	@see : ICurve3D

</member>
        <member name="M:EPath3D.getEndPoint">
Interface Function
</member>
        <member name="M:EPath3D.getStartPoint">
Interface Function
</member>
        <member name="M:EPath3D.isClosed">
Interface Function
</member>
        <member name="M:EContour3D.triangulate(std.vector&lt;ETriangle3D,std.allocator&lt;ETriangle3D&gt;&gt;*)">
triangulate closed contour
</member>
        <member name="M:EContour3D.getEndPoint">
Interface Function
</member>
        <member name="M:EContour3D.getStartPoint">
Interface Function
</member>
        <member name="M:EContour3D.isClosed">
Interface Function
</member>
        <member name="T:EPointArray3D">
represents an array of points

</member>
        <member name="M:EBoundingBox3D.checkBoxZRange(EBoundingBox3D)">
special Function to compare the Z-range of two bounding boxes. 
Needed for hidden line calculation.
returns a negative value if this Z-range is closer to 0 than bb
returns 0 if Z-ranges overlap
returns a positive value if bb Z-range is closer to 0 than this 

</member>
        <member name="M:EBoundingBox3D.isInsideBoxXY(EBoundingBox3D)">
special Function to compare two bounding boxes by ignoring z-axis. 
Needed for hidden line calculation.
True if this is inside or touching bb
False if this and bb are disjunct. 

</member>
        <member name="M:EBoundingBox3D.isInside(EPoint3D,System.Int32*,System.Int32*)">
special function for polygon inside/outside test:
		return value is true if point is inside, else
		LowCount is increased, if p is left, lower, nearer then LDF
		HighCount is increased, if p is right, upper, farer then RUB

</member>
        <member name="M:EBoundingBox3D.getSize">
returns getLength(GetDiagonale())
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getCenter">
returns getRub()-getLdf()/2
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getDiagonal">
returns getRub()-getLdf()
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRub">
returns right, up back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRuf">
returns right, up, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRdb">
returns right, down, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRdf">
returns right, down, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLub">
returns left, up, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLuf">
returns left, up, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLdb">
returns left, down, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLdf">
returns left, down, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.isSet">
check, if at least one point was set (is false after clear)
</member>
        <member name="M:EBoundingBox3D.merge(EBoundingBox3D)">
adds another BoundingBox
</member>
        <member name="M:EBoundingBox3D.merge(EPoint3D)">
adds one Point
</member>
        <member name="M:EBoundingBox3D.clear">
initializes the BoundingBox empty
</member>
        <member name="M:EBoundingBox3D.set(ERectangle,System.Double,System.Double)">
initializes the BoundingBox whith a 2D rectangle and the z range
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D,EPoint3D)">
initializes the BoundingBox whith to corner points
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D,System.Double)">
initializes the BoundingBox as a cube with edges of "size" length
</member>
        <member name="M:EBoundingBox3D.set(EBoundingBox3D)">
initializes the BoundingBox by another BoundingBox
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D)">
initializes the BoundingBox with one point (size()=0)
</member>
        <member name="M:EPlane3D.getDirectedDistance(EPoint3D)">
distance in direction of normal is positive, other side negative
this value will be negative(!) if the point is opposite to the nomal of the plane
</member>
        <member name="M:EPlane3D.intersect(EPlane3D,ERay3D*)">
intersect Plane with plane; result is a ray 
</member>
        <member name="M:EPlane3D.intersect(ERay3D,EPoint3D*)">
intersect ray with plane
</member>
        <member name="M:EPlane3D.project(EVector3D)">
projected vector on plane
</member>
        <member name="M:EPlane3D.project(EPoint3D)">
projected point on plane
</member>
        <member name="M:EPlane3D.getPointFromPlane(EPoint)">
Plane coordinates to world
</member>
        <member name="M:EPlane3D.getPointOnPlane(EPoint3D,EPoint*)">
World coordinates to plane, true if exact on plane, else projected point
</member>
        <member name="M:EPlane3D.getDistance(EPoint3D)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:EPlane3D.getDistanceSq(EPoint3D)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:EPlane3D.transform(ETransform3D)">
transform plane
</member>
        <member name="M:EPlane3D.isOn(ERay3D)">
test if ray is flat in the plane
</member>
        <member name="M:EPlane3D.isOn(EVector3D)">
test if vector is flat in the plane
</member>
        <member name="M:EPlane3D.isOn(EPoint3D)">
test if point is on Plane
</member>
        <member name="M:EPlane3D.isParallel(EPlane3D)">
check for parallel Planes, true if normals are colinear 
</member>
        <member name="M:EPlane3D.op_Equality(EPlane3D)">
Plane equality operator.
</member>
        <member name="M:EPlane3D.getAxisV">
Plane V-Axis (calculated from normal)
</member>
        <member name="M:EPlane3D.getAxisU">
Plane U-Axis (calculated from normal)
</member>
        <member name="M:EPlane3D.getOrigin">
Plane getOrigin
</member>
        <member name="M:EPlane3D.getNormal">
Plane normal vector.
</member>
        <member name="M:ERay3D.rayDistance(EPoint3D)">
pkt is projected orthogonal to the ray. then the directed distance between the ray origin and this projection is calculated
	this is reverse to getPoint(dbl); 

pkt is projected orthogonal to the ray. then the directed distance between the ray origin and this projection is calculated
</member>
        <member name="M:ERay3D.rayDistanceSq(ERay3D)">
calculates distance between two rays
if result ==0.0, rays intersect, result has coordinates of the intersection point
if result &gt;0.0, the rays don't intersect, result has coordinates of the point of minimal distance on ray1.

</member>
        <member name="M:ERay3D.projectTo(EPoint3D)">
calculate closest point to given Point
</member>
        <member name="M:ERay3D.getDistance(EPoint3D)">
calculate minimal distance between Point and ray
</member>
        <member name="M:ERay3D.getDistanceSq(EPoint3D)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:ERay3D.transform(ETransform3D)">
transform ray
</member>
        <member name="M:ERay3D.isOn(EPoint3D)">
ray is on 
</member>
        <member name="M:ERay3D.isParallel(ERay3D)">
check for parallel rays, true if directions are collinear 
</member>
        <member name="M:ERay3D.op_Equality(ERay3D)">
ray equality operator.
</member>
        <member name="M:ERay3D.getOrigin">
ray origin
</member>
        <member name="M:ERay3D.getDirection">
ray direction vector.
</member>
        <member name="M:ERay3D.setOrigin(EPoint3D)">
set ray getOrigin
</member>
        <member name="M:ERay3D.setDirection(EUnitVector3D)">
set ray direction vector.
</member>
        <member name="M:ERay3D.#ctor(EPoint3D,EUnitVector3D)">
Constructor
</member>
        <member name="M:EUnitVector3D.normalizedScalarprod(EVector3D)">
calculates scalarproduct with unit vectors
</member>
        <member name="M:EUnitVector3D.unit">
normalize to unit length
</member>
        <member name="M:EUnitVector3D.getLength">
get length
</member>
        <member name="M:EUnitVector3D.getLengthSq">
get square of length
</member>
        <member name="M:EUnitVector3D.op_SubtractionAssignment(EVector3D)">
inplace subtract a vector
</member>
        <member name="M:EUnitVector3D.op_AdditionAssignment(EVector3D)">
inplace add a vector
</member>
        <member name="M:EUnitVector3D.op_DivisionAssignment(System.Double)">
divide by a scale
</member>
        <member name="M:EUnitVector3D.op_MultiplicationAssignment(System.Double)">
multiplicate inplace by a scalar
</member>
        <member name="M:EUnitVector3D.set(System.Double,System.Double,System.Double)">
set ordinates
</member>
        <member name="M:EUnitVector3D.#ctor(EPoint3D)">
copy constructor
</member>
        <member name="M:EUnitVector3D.#ctor(EVector3D)">
copy constructor
</member>
        <member name="M:EUnitVector3D.#ctor(System.Double,System.Double,System.Double)">
constructor
</member>
        <member name="M:EContour2D.addSegmentBegin(EPoint)">
Alias of addSegmentPoint
</member>
        <member name="M:ETransform3D.getMov">
access to transformation vector component of the transformation
</member>
        <member name="M:ETransform3D.getMat">
access to rotation matrix component of the transformation
</member>
        <member name="M:ETransform3D.getScale">
calculates the scale of a 3D-transform. is the 3.root of getDeterminante
	does not work properly, if scaling for x y and z is different 
</member>
        <member name="M:ETransform3D.isMirror">
returns true, if the transformation does mirror objects
</member>
        <member name="M:ETransform3D.getDeterminante">
calculates the determinant of the matrix
</member>
        <member name="M:ETransform3D.transpose">
transpose Matrix (swap columns and rows)
</member>
        <member name="M:ETransform3D.op_UnaryNegation">
build inverse transform 
</member>
        <member name="M:ETransform3D.op_Multiply(System.Double)">
transform distance (eg. radius); does not work properly if scaling in x,y and z is different
</member>
        <member name="M:ETransform3D.transform(EVector3D*)">
transform a vector inplace

transform a vector inplace
</member>
        <member name="M:ETransform3D.transform(EPoint3D*)">
transform a pointvector inplace

transform a pointvector inplace
</member>
        <member name="M:ETransform3D.op_Multiply(EPoint3D)">
transform a pointvector
</member>
        <member name="M:ETransform3D.op_Multiply(EVector3D)">
transform a vector
</member>
        <member name="M:ETransform3D.op_MultiplicationAssignment(ETransform3D)">
in place combine two transformation by matrix multiply
</member>
        <member name="M:ETransform3D.op_Multiply(ETransform3D)">
combine two transformation by matrix multiply
</member>
        <member name="M:ETransform3D.op_Equality(ETransform3D)">
test equality

test equality
</member>
        <member name="M:ETransform3D.setIdentity">
build identity transform
</member>
        <member name="M:ETransform3D.op_Assign(ETransform3D*)">
move operator
</member>
        <member name="M:ETransform3D.op_Assign(ETransform3D)">
assignment operator
</member>
        <member name="M:ETransform3D.#ctor(EMatrix3D,EVector3D)">
constructs a from values
</member>
        <member name="M:ETransform3D.#ctor(EVector3D)">
constructs a translating ETransform3D
</member>
        <member name="M:ETransform3D.#ctor(EPoint3D,EVector3D,EAngleType)">
constructs a rotation ETransform3D, that rotates counter clock wise around the given center point and axis
</member>
        <member name="M:ETransform3D.#ctor(EPoint3D,EVector3D,EVector3D)">
constructs a ETransform3D, from two axis and an origin point
</member>
        <member name="M:ETransform3D.#ctor(EVector3D,EVector3D)">
constructs a ETransform3D from two axis, calculates w = u%v
</member>
        <member name="M:ETransform3D.#ctor(EVector3D,EVector3D,EVector3D)">
constructs a ETransform3D from three axis
</member>
        <member name="M:ETransform3D.#ctor(System.Double)">
constructs a scaling ETransform3D
</member>
        <member name="M:ETransform3D.#ctor(EAngleType,EAngleType,EAngleType)">
constructs a rotation ETransform3D by three angles 
</member>
        <member name="M:ETransform3D.#ctor(EAngleType,EVector3D)">
constructs a rotation ETransform3D by axis and angle
</member>
        <member name="M:ETransform3D.#ctor(ETransform3D*)">
the move constructor
</member>
        <member name="M:ETransform3D.#ctor(ETransform3D)">
the copy constructor
</member>
        <member name="M:ETransform3D.#ctor">
constructs a unit transform
</member>
        <member name="M:EMatrix3D.op_MultiplicationAssignment(EMatrix3D)">
in place combine two transformation by matrix multiply
</member>
        <member name="M:EMatrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double!System.Runtime.CompilerServices.">
constructs a from values
</member>
        <member name="M:EMatrix3D.#ctor(System.Double)">
constructs a scaling matrix
</member>
        <member name="M:EMatrix3D.#ctor(EAngleType,EAngleType,EAngleType)">
constructs a rotation matrix by three angles 
</member>
        <member name="M:EMatrix3D.#ctor(EAngleType,EVector3D)">
constructs a rotation matrix by axis and angle
</member>
        <member name="M:EMatrix3D.#ctor(EMatrix3D)">
the copy constructor

the move constructor
</member>
        <member name="M:EMatrix3D.#ctor">
constructs a unit matrix
</member>
        <member name="M:EVector3D.getV">
get as array of doubles 
</member>
        <member name="M:op_Multiply(System.Double,EVector3D)">
friend operator, first operand not a W3dGeometry class 
skalar multiplication

skalar multiplication
</member>
        <member name="M:EVector3D.normalizedCrossprod(EVector3D)">
calculates cross product with unit vectors
</member>
        <member name="M:EVector3D.normalizedScalarprod(EVector3D)">
calculates scalarproduct with unit vectors
</member>
        <member name="M:EVector3D.getAngle(EVector3D,EVector3D)">
calculate angle between vectors (0-360°), plane normal vector decides what is the right angle
</member>
        <member name="M:EVector3D.getAngleXY(EVector3D)">
calculate angle between vectors (0-180°)
</member>
        <member name="M:EVector3D.getAngle(EVector3D)">
calculate angle between vectors (0-180°)
</member>
        <member name="M:EVector3D.isNull">
faster test if getLength() equals 0.0
</member>
        <member name="M:EVector3D.isColinear(EVector3D)">
test if two Vectors are colinear 
</member>
        <member name="M:EVector3D.unit">
normalize to unit length
</member>
        <member name="M:EVector3D.getLength">
get length
</member>
        <member name="M:EVector3D.getLengthSq">
get square of length
</member>
        <member name="M:EVector3D.op_Inequality(EVector3D)">
test unequal; to bee implemented if needed 
</member>
        <member name="M:EVector3D.op_Equality(EVector3D)">
test equal
</member>
        <member name="M:EVector3D.op_UnaryNegation">
negate a vector
</member>
        <member name="M:EVector3D.op_Modulus(EVector3D)">
vector product
</member>
        <member name="M:EVector3D.op_Subtraction(EVector3D)">
subtract a vector
</member>
        <member name="M:EVector3D.op_Addition(EVector3D)">
add a vector
</member>
        <member name="M:EVector3D.op_Multiply(EVector3D)">
scalar product
</member>
        <member name="M:EVector3D.op_Multiply(System.Double)">
multiplicate by a scalar
</member>
        <member name="M:EVector3D.op_SubtractionAssignment(EVector3D)">
inplace subtract a vector
</member>
        <member name="M:EVector3D.op_AdditionAssignment(EVector3D)">
inplace add a vector
</member>
        <member name="M:EVector3D.op_DivisionAssignment(System.Double)">
divide by a scale
</member>
        <member name="M:EVector3D.op_MultiplicationAssignment(System.Double)">
multiplicate inplace by a scalar
</member>
        <member name="M:EVector3D.set(System.Double,System.Double,System.Double)">
set ordinates
</member>
        <member name="M:EVector3D.getAt(System.UInt32)">
get cordinate at index (0, 1 or 2)

get coordinate 
</member>
        <member name="M:EVector3D.setZ(System.Double)">
set z coordinate

set z coordinate
</member>
        <member name="M:EVector3D.getZ">
get z coordinate

get z coordinate
</member>
        <member name="M:EVector3D.setY(System.Double)">
set y coordinate

set y coordinate
</member>
        <member name="M:EVector3D.getY">
get y coordinate

get y coordinate
</member>
        <member name="M:EVector3D.setX(System.Double)">
set x cordinate

set x cordinate
</member>
        <member name="M:EVector3D.getX">
get x cordinate

get x cordinate
</member>
        <member name="M:EVector3D.init">
clear content

clear content
</member>
        <member name="M:EVector3D.#ctor(EPoint3D)">
conversion constructor: treat point as vector
</member>
        <member name="M:EVector3D.#ctor(EPoint3D,EPoint3D)">
constructor
</member>
        <member name="M:EVector3D.#ctor(EVector3D*)">
move constructor
</member>
        <member name="M:EVector3D.#ctor(EVector3D)">
copy constructor
</member>
        <member name="M:EVector3D.#ctor(System.Double,System.Double,System.Double)">
constructor
</member>
        <member name="M:EVector3D.#ctor">
default constructor
</member>
        <member name="M:EPoint3D.getAt(System.UInt32)">
get coordinate 
</member>
        <member name="M:EPoint3D.getV">
get Point as array of doubles 

get as array of doubles 
</member>
        <member name="M:EPoint3D.distanceTo(EPoint3D)">
calculates distance 
</member>
        <member name="M:EPoint3D.distanceSqTo(EPoint3D)">
calculates square of distance (faster than calc distance)
</member>
        <member name="M:EPoint3D.setZ(System.Double)">
set z coordinate

set z coordinate
</member>
        <member name="M:EPoint3D.z">
get z coordinate

get z coordinate
</member>
        <member name="M:EPoint3D.setY(System.Double)">
set y coordinate

set y coordinate
</member>
        <member name="M:EPoint3D.y">
get y coordinate

get y coordinate
</member>
        <member name="M:EPoint3D.setX(System.Double)">
set x cordinate

set x cordinate
</member>
        <member name="M:EPoint3D.x">
get x cordinate

get x cordinate
</member>
        <member name="M:EPoint3D.#ctor(EVector3D)">
conversion constructor
</member>
        <member name="M:EAngleType.op_UnaryNegation">
invert angle
</member>
        <member name="M:EAngleType.op_SubtractionAssignment(EAngleType)">
inplace add angles 
</member>
        <member name="M:EAngleType.op_Subtraction(EAngleType)">
add angles 
</member>
        <member name="M:EAngleType.op_AdditionAssignment(EAngleType)">
inplace add angles 
</member>
        <member name="M:EAngleType.op_Addition(EAngleType)">
add angles 
</member>
        <member name="M:EAngleType.value(enAngleType,System.Double)">
set Angle specifyed unit
</member>
        <member name="M:EAngleType.value(enAngleType)">
get Angle specifyed unit
</member>
        <member name="M:EAngleType.trn">
get Angle in turns; circle=1
</member>
        <member name="M:EAngleType.rad">
get Angle in radian; circle=2*PI
</member>
        <member name="M:EAngleType.deg">
get Angle in degrees; circle=360deg
</member>
        <member name="M:EAngleType.trn(System.Double)">
set Angle in turns; circle=1
</member>
        <member name="M:EAngleType.rad(System.Double)">
set Angle in radian; circle=2*PI
</member>
        <member name="M:EAngleType.deg(System.Double)">
set Angle in degrees; circle=360deg
</member>
        <member name="M:EAngleType.#ctor(EAngleType)">
copy constructor
</member>
        <member name="M:EAngleType.#ctor(enAngleType,System.Double)">
constructor
</member>
        <member name="M:EAngleType.#ctor">
default constructor
</member>
        <member name="T:enAngleType">
Type to define angle value range
</member>
        <member name="F:AT_TURNS">
circle 1.0
</member>
        <member name="F:AT_RADIAN">
circle 2*PI
</member>
        <member name="F:AT_DEGREE">
circle 360°
</member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ExportGenerateSchematicConfiguration(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Exports generate schematic configuration into xml file. 
TODO:
</summary>
            <param name="project">Project of which the PLC configuration will be exported.</param>
            <param name="fileName">Full name of the export file.</param>
            <remarks>
If the given directory in the full file name does not exist, it will be created.
</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="!:BaseException">An error occurred during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.WriteBackConnPointDesignations(Eplan.EplApi.DataModel.EObjects.Terminal[],System.Boolean)">
            <summary>
Writes back connection point designations from the selected overview PLC terminals 
to associated schematic PLC terminals. 
</summary>
            <returns>
An array of functions (PLC terminals, terminals, plugs) affected by the operation.
</returns>
            <remarks>
* The terminals must have a CPU name specified.
* The method corresponds to the 'Write back connection point designations' dialog in P8 
  (Project data -&gt; PLC -&gt; Write back connection point designations...).
</remarks>
            <param name="arrPLCTerminals">Selected overview PLC terminals.</param>
            <param name="bAlsoToConnectedPlugsAndTerminals">Specifies whether the directly connected plugs / terminals should also be affected.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.WriteBackConnPointDesignations(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean)">
            <summary>
Writes back connection point designations from overview PLC terminals of the given CPU
to associated schematic PLC terminals. 
</summary>
            <returns>
An array of functions (PLC terminals, terminals, plugs) affected by the operation.
</returns>
            <remarks>
* The terminals must have a CPU name specified.
* The method corresponds to the 'Write back connection point designations' dialog in P8 
  (Project data -&gt; PLC -&gt; Write back connection point designations...).
</remarks>
            <param name="prj">A project to perform the action in.</param>
            <param name="sCPUName">A CPU name.</param>
            <param name="bAlsoToConnectedPlugsAndTerminals">Specifies whether the directly connected plugs / terminals should also be affected.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:NOPLCCPU">An error occurrs when no Plc CPU found in the project</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.WriteBackConnPointDesignations(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Writes back connection point designations from overview PLC terminals of the given CPU
to associated schematic PLC terminals. 
</summary>
            <returns>
An array of functions (PLC terminals, terminals, plugs) affected by the operation.
</returns>
            <remarks>
* The terminals must have a CPU name specified.
* The method corresponds to the 'Write back connection point designations' dialog in P8 
  (Project data -&gt; PLC -&gt; Write back connection point designations...).
</remarks>
            <param name="prj">A project to perform the action in.</param>
            <param name="sCPUName">A CPU name.</param>
            <param name="bAlsoToConnectedPlugsAndTerminals">Specifies whether the directly connected plugs / terminals should also be affected.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ReadressTerminalsForCPU(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.PlcService.ReadressingConfig)">
            <summary>
Executes PLC terminals re-addressing process based on the configuration passed. 
</summary>
            <param name="oProject">A project to perform re-addressing on.</param>
            <param name="config">Re-adressing configuration.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the re-addressing process.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ReadressTerminalsInProject(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.PlcService.ReadressingConfig,System.Boolean)">
            <summary>
Executes PLC terminals re-addressing process based on the configuration passed. 
</summary>
            <param name="oProject">A project to perform re-addressing on.</param>
            <param name="config">Re-adressing configuration.</param>
            <param name="bShowProgress">Specifies if a progress window should be visible.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:BaseException">An error occurred
                                during the re-addressing process.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.ConfigurationProject">
            <summary>
Gets/Sets ...
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.Station">
            <summary>
Gets/Sets ...
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.CpuName">
            <summary>
Gets/Sets ...
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.OnlySelectedTerminals">
            <summary>
Gets/Sets if the re-addressing process affects all PLC terminals in the project or just the selected ones.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.Scheme">
            <summary>
Gets/Sets a PLC scheme name to use for re-adressing.
If empty string is set, the last used configuration scheme will be implicitly reused
which is currently set in GUI.
</summary>
            <seealso cref="M:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.GetAvailableSchemeList(Eplan.EplApi.DataModel.Project)" />
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.SortModeIndex">
            <summary>
Gets/Sets a sort mode that should be used during re-addressing.
Should be in range from 0 (default) to the value returned by SortModesCount property -1.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.AnalogStartAddress">
            <summary>
Start address value to use for analog addresses. If empty, a default value will be used.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.ChangeAnalog">
            <summary>
If true, analog addresses will be changed.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.DigitalStartAddress">
            <summary>
Start address value to use for digital addresses. If empty, a default value will be used.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.ChangeDigital">
            <summary>
If true, digital addresses will be changed.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.GetAvailableSchemeList(Eplan.EplApi.DataModel.Project)">
            <summary>
Returns a list of PLC configurations existing in a project
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.GetSortModesCount">
            <summary>
Returns a number of valid sort modes.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ReadressingConfig.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PlcService.ReadressingConfig">
            <summary>
Used as a container for PLC re-addressing settings. 
</summary>
            <seealso cref="M:Eplan.EplApi.HEServices.PlcService.ReadressTerminalsInProject(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.PlcService.ReadressingConfig,System.Boolean)" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.GenerateSchematic(Eplan.EplApi.DataModel.Project,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Generates PLC schematic pages.
</summary>
            <example>
The XML file has the following format:

<code lang="XML">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;PLC_CONFIG_FILE FileName="C:\\Users\\EPL\\Desktop\\PLC.xml" Type="PLC schematics generator" Version="1.0"&gt;
 &lt;DEVICE Name="=EB3+ET1-A1"&gt;
  &lt;Function Name="=EB3+ET1-A1" Macro="$(MD_MACROS)\\SIE.6ES7315-2AG10-0AB0.ema" FuncText="de_DE@CPU 315-2 DP&amp;#10;input 24VDC;en_US@CPU 315-2 DP&amp;#10;input 24VDC;" SingleLinePage="=EB3+ETA/1" MultiLinePage="=EB3+EBS/1"/&gt;
  &lt;Function Name="=EB3+ET1-A1:X1" SingleLinePage="=EB3+ETA/1"/&gt;
  &lt;Function Name="=EB3+ET1-A1:X2"/&gt;
  &lt;Function Name="=EB3+ET1-A1:L+" MultiLinePage="=EB3+EBS/1"/&gt;
  &lt;Function Name="=EB3+ET1-A1:M1" MultiLinePage="=EB3+EBS/1"/&gt;
  &lt;Function Name="=EB3+ET1-A1:M2" MultiLinePage="=EB3+EBS/1"/&gt;
  &lt;Function Name="=EB3+ET1-A1:PE" MultiLinePage="=EB3+EBS/1"/&gt;
 &lt;/DEVICE&gt;
&lt;/PLC_CONFIG_FILE&gt;
</code></example>
            <remarks>
                <p>Description of the available XML tags:</p>
                <p>root node of xml file:<br />

PLC_CONFIG_FILE</p>
                <p>node attributes:<br />

FileName - path of the XML file(purely informative)<br />

Type - "PLC schematics generator"(purely
informative)<br />

Version - version of the XML file(z.Z.: "1.0")</p>
                <p>standard node:<br />

DEVICE - device data</p>
                <p>node attribute<br />

Name - Device tag, e.g.: "=EB3+ET1-A7"</p>
                <p>standard node:<br />

Function - data of the individual functions of the device</p>
                <p>node attributes:<br />

Name - function name, e.g.: "=EB3+ET1-A7:1"<br />

Macro - path to the macro file, e.g.:
"$(MD_MACROS)\\PLC\\Beschaltung1.ema"<br />

FuncText - function text (multi language string)<br />

SingleLinePage - name of the single-line page<br />

SingleLinePageLadder - ladder of the single-line page
(calculated by the menu point 'Calculate pages...')<br />

MultiLinePage - name of the multi-line page<br />

MultiLinePageLadder - ladder of the multi-line page
(calculated by the menu point 'Calculate pages...')<br />

OverviewPage -overwiew page<br />

RackPage -rack page</p>
                <p>standard node:<br />

Variable - variable of the placeholder object in the macro</p>
                <p>node attributes:<br />

Name - name of the variable<br />

Value - value to be set for the variable</p>
            </remarks>
            <param name="oProject">Project
                       into which
                       the PLC
                       schematic
                       pages will
                       be
                       generated.</param>
            <param name="strConfigFileName">The config
                                \file name
                                in the xml
                                format.</param>
            <param name="bGenerateSingleLineRepresentations">the pages
                                                 of the type
                                                 "SingleLine"
                                                 should be
                                                 generated</param>
            <param name="bGenerateMultiLineRepresentations">the pages
                                                of the type
                                                "MultiLine"
                                                should be
                                                generated</param>
            <param name="bGenerateOverviews">the pages
                                 of the type
                                 "Overview"
                                 should be
                                 generated</param>
            <param name="bGenerateRackOverviews">the pages
                                     of the type
                                     "RackOverview"
                                     should be
                                     generated</param>
            <returns>
returns changed pages.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">Internal interface
                                       for generating plc
                                       schematic pages
                                       could not be
                                       created.</exception>
            <exception cref="!:BaseException">Error during plc
                                schematic pages
                                generating.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ImportAssignmentList(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Imports PLC assignment lists.
</summary>
            <remarks>
If no scheme name (strScheme) is passed, the last-used scheme
will be used which is currently set in GUI.
The name of the file to import is defined
in the scheme.
</remarks>
            <param name="oProject">Project into which the PLC
                       assignment list will be
                       imported.</param>
            <param name="strConfigurationProject">PLC configuration project name</param>
            <param name="strStation">PLC station name</param>
            <param name="strCPU">PLC CPU.</param>
            <param name="strLanguage">Language shortcut for the
                          import, e.g. "en_US".</param>
            <param name="strAssignmentListFileName">Alternative file name and path. If empty
										parameter will be taken from plc schema.</param>
            <param name="bCompByAddress">If set to true, the PLC address
                             is used as reference value.</param>
            <param name="bAcceptInvAddr">If set to true, even invalid
                             addresses will be read.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for importing PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ImportAssignmentList(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Imports PLC assignment lists.
</summary>
            <remarks>
If no scheme name (strScheme) is passed, the last-used scheme
will be used which is currently set in GUI.
The name of the file to import is defined
in the scheme.
</remarks>
            <param name="oProject">Project into which the PLC
                       assignment list will be
                       imported.</param>
            <param name="strScheme">Scheme for the import.</param>
            <param name="strCPU">PLC CPU.</param>
            <param name="strLanguage">Language shortcut for the
                          import, e.g. "en_US".</param>
            <param name="bCompByAddress">If set to true, the PLC address
                             is used as reference value.</param>
            <param name="bAcceptInvAddr">If set to true, even invalid
                             addresses will be read.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for importing PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.</exception>
            <exception cref="!:InvalidScheme">An error occurrs when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ExportAssignmentList(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.String,System.String)">
            <summary>
Exports PLC assignment lists
</summary>
            <remarks>
If no scheme name (strScheme) is passed, the last-used scheme
will be used which is currently set in GUI.
The file name of the export file is defined in
the scheme.
</remarks>
            <param name="oProject">Project of which the PLC
                       assignment list will be exported.</param>
            <param name="strConfigurationProject">PLC configuration project name
                     or empty string. If you do not fill 
					 parameter strConfigurationProject you can only export
                     i/o data which is related to plc boxes where the the
					 configuration project also is empty.</param>
            <param name="strStation">PLC station name or empty string. If you do not
                     not fill parameter strStation you can only export
                     i/o data which is related to plc boxes where the
                     station name also is empty.</param>
            <param name="strCPU">PLC CPU or empty string. If you do not fill 
					 parameter strCPU you can only export i/o data
					 which is related to plc boxes where the cpu name
					 also is empty.</param>
            <param name="strLanguage">Language shortcut to determine the
                          export language, e.g. "en_US".</param>
            <param name="strAssignmentListFileName">Alternative file name and path. If empty
										parameter will be taken from plc schema.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ExportAssignmentList(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String)">
            <summary>
Exports PLC assignment lists
</summary>
            <remarks>
If no scheme name (strScheme) is passed, the last-used scheme
will be used which is currently set in GUI.
The file name of the export file is defined in
the scheme.
</remarks>
            <param name="oProject">Project of which the PLC
                       assignment list will be exported.</param>
            <param name="strScheme">Scheme for the export.</param>
            <param name="strCPU">PLC CPU or empty string. If you do not fill 
					 parameter strCPU you can only export i/o data
					 which is related to plc boxes where the cpu name
					 also is empty.</param>
            <param name="strLanguage">Language shortcut to determine the
                          export language, e.g. "en_US".</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ImportData(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,Eplan.EplApi.HEServices.PlcService.ImportMatch,System.Boolean)">
            <summary>
Imports PLC data using the specified converter. 
Use the GetAvailableConverters method to get the list of registered PLC data converters.
</summary>
            <param name="oProject">Project which the PLC data
                       will be imported to.</param>
            <param name="strConverterID">ID of the PLC data converter to use.
						   The IDs of the registered PLC converters together with their full
						   names may be obtained by calling the GetAvailableConverters method.</param>
            <param name="strLanguage">Language used during the
                          import process, e.g.
                          de_DE, en_EN, etc.</param>
            <param name="strInputFileName">The input file name in the format
							   corresponding to the converter used.</param>
            <param name="eImportMatch">Matching criteria for PLC data
                           import.</param>
            <param name="bShowCompareDlg">Shows compare dialog when true.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ImportData(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,Eplan.EplApi.HEServices.PlcService.ImportMatch)">
            <summary>
Imports PLC data using the specified converter. 
Use the GetAvailableConverters method to get the list of registered PLC data converters.
</summary>
            <param name="oProject">Project which the PLC data
                       will be imported to.</param>
            <param name="strConverterID">ID of the PLC data converter to use.
						   The IDs of the registered PLC converters together with their full
						   names may be obtained by calling the GetAvailableConverters method.</param>
            <param name="strLanguage">Language used during the
                          import process, e.g.
                          de_DE, en_EN, etc.</param>
            <param name="strInputFileName">The input file name in the format
							   corresponding to the converter used.</param>
            <param name="eImportMatch">Matching criteria for PLC data
                           import.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ImportData(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.PlcService.ImportMatch)">
            <summary>
Imports PLC data from a file. This method may be used 
to import PLC data in the PLC standard
exchange format (.pbf files) using the PlcDcXMLExchangerUniversal converter.
In order to import PLC data using specific PLC data converter, use the overloaded ImportData method
together with the GetAvailableConverters method.
</summary>
            <param name="oProject">Project into which the PLC data
                       will be imported.</param>
            <param name="strFullName">Full file name of the file to
                          import. </param>
            <param name="eImportMatch">Matching criteria for PLC data
                           import.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for importing PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the import.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ExportData(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
Exports PLC data using the specified converter. 
Use the GetAvailableConverters method to get the list of registered PLC data converters.
</summary>
            <param name="oProject">Project which the PLC data
                       will be exported from.</param>
            <param name="strConfigurationProject">The name of the PLC configuration data set to export.
									  It must be one of the strings returned by the GetPLCConfigurationProjects function.</param>
            <param name="strConverterID">ID of the PLC data converter to use.
						   The IDs of the registered PLC converters together with their full
						   names may be obtained by calling the GetAvailableConverters method.</param>
            <param name="strLanguage">Language used during the
                          export operation, e.g.
                          de_DE, en_EN, etc.</param>
            <param name="strOutputFileName">Full file name of the output file.
                          The file name should have correct extension
						  according to the converter used.</param>
            <param name="bOverwrite">If the output file already exists, this parameter specifies
						whether it should be overwritten.</param>
            <remarks>
If the given directory in the full file name does not exist,
it will be created.
</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ExportData(Eplan.EplApi.DataModel.Project,System.String,System.String,System.String,System.String)">
            <summary>
Exports PLC data using the specified converter. 
Use the GetAvailableConverters method to get the list of registered PLC data converters.
</summary>
            <param name="oProject">Project which the PLC data
                       will be exported from.</param>
            <param name="strConfigurationProject">The name of the PLC configuration data set to export.
									  It must be one of the strings returned by the GetPLCConfigurationProjects function.</param>
            <param name="strConverterID">ID of the PLC data converter to use.
						   The IDs of the registered PLC converters together with their full
						   names may be obtained by calling the GetAvailableConverters method.</param>
            <param name="strLanguage">Language used during the
                          export operation, e.g.
                          de_DE, en_EN, etc.</param>
            <param name="strOutputFileName">Full file name of the output file.
                          The file name should have correct extension
						  according to the converter used.</param>
            <remarks>
If the given directory in the full file name does not exist,
it will be created.
</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ExportData(Eplan.EplApi.DataModel.Project,System.String,System.String,System.Boolean)">
            <summary>
Exports PLC data. This method may be used to export PLC data only in the PLC standard
exchange format (.pbf files) using the PlcDcXMLExchangerUniversal converter.
In order to export PLC data using specific PLC data converter, use the overloaded ExportData method
together with the GetAvailableConverters method.
</summary>
            <param name="oProject">Project of which the PLC data
                       will be exported.</param>
            <param name="strConfigurationProject">A PLC configuration project. If you pass an empty
                            string, all PLC data contained in the P8 project will be exported.</param>
            <param name="strOutputFileName">Full name of the output file without an extension. 
						  The filename extension is added automatically.</param>
            <param name="bOverwrite">If the output file already exists, this parameter specifies
						whether it should be overwritten.</param>
            <remarks>
If the given directory in the full file name does not exist,
it will be created.
</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.ExportData(Eplan.EplApi.DataModel.Project,System.String,System.String)">
            <summary>
Exports PLC data. This method may be used to export PLC data in the PLC standard
exchange format (.pbf files) using the PlcDcXMLExchangerUniversal converter.
In order to export PLC data using specific PLC data converter, use the overloaded ExportData method
together with the GetAvailableConverters method.
</summary>
            <param name="oProject">Project of which the PLC data
                       will be exported.</param>
            <param name="strConfigurationProject">A PLC configuration project. If you pass an empty
                            string, all PLC data contained in the P8 project will be exported.</param>
            <param name="strOutputFileName">Full name of the output file without an extension. 
						  The filename extension is added automatically.</param>
            <remarks>
If the given directory in the full file name does not exist,
it will be created.
</remarks>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Project does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       for exporting PLC
                                       data could not be
                                       created. </exception>
            <exception cref="!:BaseException">An error occurred
                                during the export.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.GetPLCConfigurationProjects(Eplan.EplApi.DataModel.Project)">
            <summary>
Returns a list of PLC config. projects included in the EPLAN P8's project.
These names may be used as values of strConfigurationProject parameter of the 
ExportData method.
</summary>
            <param name="oProject">Project to get the list of PLC config. projects from.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.GetAvailableConverters">
            <summary>
Returns a list of PLCDataConverterInfo objects representing registered PLC converters 
that may be used for importing or exporting PLC data.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.PLCDataConverterInfo.FullName">
            <summary>
Returns a full name of the PLC converter.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlcService.PLCDataConverterInfo.ConverterID">
            <summary>
A converter's ID. The value of this property may be used as strConverterID parameter
to the ImportData and ExportData methods of the PLCService class.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PlcService.PLCDataConverterInfo">
            <summary>
A structure containing a PLC converter's ID together with its full name.
This structure instances are elements of the array returned by the GetAvailableConverters method.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PlcService.ImportMatch.Nothing">
            <summary>Don't match. Create new functions for all imported objects.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PlcService.ImportMatch.Name">
            <summary>Match by identifying names. Note: in this case, a comparison dialog may be displayed
for the user to individually selecting some function to update.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.PlcService.ImportMatch.Id">
            <summary>Match by internal object ids.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PlcService.ImportMatch">
            <summary>
Matching options for PLC data import. 
</summary>
            <remarks>
The import process tries to match imported objects with those existing in the project.
Based on the option selected, the matching may be performed by internal object ids
or by objects' identifying names.
If an imported object is matched with an existing function, properties of the existing function will be updated
whereas for unmatched imported objects, new functions will be created in the project.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlcService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PlcService">
            <summary>
Class providing functionality for importing and exporting PLC data. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyMDPartsDatabaseItems(Eplan.EplApi.DataModel.Project,System.Collections.Generic.IEnumerable{Eplan.EplApi.MasterData.MDPartsDatabaseItem},System.String)">
            <summary>
Starts a check run for the given MDPartsDatabaseItems (MDParts).
</summary>
            <param name="oProject">Project to write messages to.</param>
            <param name="oItems">Parts collection.</param>
            <param name="strVerificationScheme">Scheme to use for the check run.</param>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <exception cref="T:System.ArgumentNullException">Throw if parameter is invalid.</exception>
            <remarks>
If the scheme name is empty, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyMDPartsDatabaseItems(Eplan.EplApi.DataModel.Project,System.Collections.Generic.IEnumerable{Eplan.EplApi.MasterData.MDPartsDatabaseItem})">
            <summary>
Starts a check run for the given MDPartsDatabaseItems (MDParts).
</summary>
            <param name="oProject">Project to write messages to.</param>
            <param name="oItems">Parts collection.</param>
            <exception cref="T:System.ArgumentNullException">Throw if parameter is invalid.</exception>
            <remarks>
Last-used scheme will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyMDPartsDatabaseItems(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Starts a check run for all MDParts or only for MDParts from ProjectMessages marked as done depending on bVerifyCompletedMessagesOnly parameter.
</summary>
            <param name="oProject">Project to write messages to.</param>
            <param name="strVerificationScheme">Scheme to use for the check run.</param>
            <param name="bVerifyCompletedMessagesOnly">Verifies completed messages only when true</param>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <exception cref="T:System.ArgumentNullException">Throw if parameter is invalid.</exception>
            <remarks>
If the scheme name is empty, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyMDPartsDatabaseItems(Eplan.EplApi.DataModel.Project,System.Boolean)">
            <summary>
Starts a check run for all MDParts or only for MDParts from ProjectMessages marked as done depending on bVerifyCompletedMessagesOnly parameter.
</summary>
            <param name="oProject">Project to write messages to.</param>
            <param name="bVerifyCompletedMessagesOnly">Verifies completed messages only when true</param>
            <exception cref="T:System.ArgumentNullException">Throw if parameter is invalid.</exception>
            <remarks>
Last-used scheme will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyInstallationSpace(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.InstallationSpace})">
            <summary>
Starts a check run for the given installation spaces.
</summary>
            <param name="colInstallationSpaces">List of installation spaces to check.</param>
            <exception cref="T:System.ArgumentNullException">Throw if parameter is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyInstallationSpace(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.InstallationSpace},System.String)">
            <summary>
Starts a check run for the given installation spaces.
</summary>
            <param name="colInstallationSpaces">List of installation spaces to check.</param>
            <param name="strVerificationScheme">Scheme to use for the check run.</param>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <exception cref="T:System.ArgumentNullException">Throw if any parameter is invalid.</exception>
            <remarks>
If the scheme name is empty, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyPages(System.Collections.ArrayList,System.String)">
            <summary>
Starts a check run for the given pages.
</summary>
            <param name="colPages">List of pages to check.</param>
            <param name="strVerificationScheme">Scheme to use for the check run.</param>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
            <remarks>
If the scheme name is empty, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyPages(System.Collections.ArrayList)">
            <summary>
Starts a check run for the given pages.
</summary>
            <param name="colPages">List of pages to check.</param>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyProject(System.String,System.String)">
            <summary>
Starts a check run for the given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project to
                             check.</param>
            <param name="strVerificationScheme">Scheme to use for the check run.</param>
            <remarks>
If the scheme name is empty, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyProject(System.String)">
            <summary>
Starts a check run for the given project.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project to
                             check.</param>
            <exception cref="!:InvalidScheme">An error occurred when used scheme name doesn't exist</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyProject(Eplan.EplApi.DataModel.Project,System.String)">
            <summary>
Starts a check run for the given project.
</summary>
            <param name="oProject">Project to check.</param>
            <param name="strVerificationScheme">Scheme to use for the check run.</param>
            <remarks>
If the scheme name is empty, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyProject(Eplan.EplApi.DataModel.Project)">
            <summary>
Starts a check run for the given project.
</summary>
            <param name="oProject">Project to check.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyProject(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Starts a check run for the given project.
</summary>
            <param name="oProject">Project to check.</param>
            <param name="strVerificationScheme">Scheme to use for the check run.</param>
            <param name="bVerifyCompletedMessagesOnly">Verifies completed messages only when true</param>
            <remarks>
If the scheme name is empty, the last-used scheme
will be used which is currently set in GUI.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyCompletedMessagesOnly(Eplan.EplApi.DataModel.Project)">
            <summary>
Starts a check run for the given project, only for the messages marked as done.
</summary>
            <param name="oProject">Project to check.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.VerifyCompletedMessagesOnly(System.String)">
            <summary>
Starts a check run for the given project, only for the messages marked as done.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project to check.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Check.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Check">
            <summary>
Class for checking projects or pages.
</summary>
            <example>The following examples shows how to use class Check.
<code lang="cs" source="P8_API_Example_HEServices_Check_Example1.cs.txt" /></example>
            <example>
                <code lang="cs" source="P8_API_Example_HEServices_Check_Example2.cs.txt" />
            </example>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.get_Values(Eplan.EplApi.DataModel.MasterData.Macro,System.Int32,System.UInt32,System.String)">
            <summary>
This method was deprecated. Please use GetValues method on DataModel.Graphics.PlaceHolder object.
\Returns the values of all variables in the nIndex-th
PlaceHolder of a Macro variant for a given record.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nVariant">The 0\-based variant index of
                       the macro variant to be
                       searched.</param>
            <param name="nIndex">1\-based index of the
                     PlaceHolder to be evaluated</param>
            <param name="strRecordName">Record name.</param>
            <returns>
The values of the variables.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlaceHolderService.RecordNames(Eplan.EplApi.DataModel.MasterData.Macro,System.Int32,System.UInt32)">
            <summary>
This property was deprecated. Please use GetRecordNames method on DataModel.Graphics.PlaceHolder object.
\Returns the names of all records in the nIndex-th
PlaceHolder of a Macro.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nVariant">The 0\-based variant index of the
                       macro variant to be searched.</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
List of record names.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlaceHolderService.NumberOfRecords(Eplan.EplApi.DataModel.MasterData.Macro,System.Int32,System.UInt32)">
            <summary>
This property was deprecated. Please use GetNumberOfRecords method on DataModel.Graphics.PlaceHolder object.
\Returns the count of all records from the nIndex-th
PlaceHolder of a Macro.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nVariant">The 0\-based variant index of the
                       macro variant to be searched.</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
Number of records.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlaceHolderService.VariableNames(Eplan.EplApi.DataModel.MasterData.Macro,System.Int32,System.UInt32)">
            <summary>
This property was deprecated. Please use GetVariableNames method on DataModel.Graphics.PlaceHolder object.
\Returns the names of all variables in the nIndex-th
PlaceHolder of a Macro variant.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nVariant">The 0\-based variant index of the
                       macro variant to be searched.</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
List of variable names.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given Macro
                                    does not exist or
                                    isn't valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlaceHolderService.NumberOfVariables(Eplan.EplApi.DataModel.MasterData.Macro,System.Int32,System.UInt32)">
            <summary>
This property was deprecated. Please use GetNumberOfVariables method on DataModel.Graphics.PlaceHolder object.
\Returns the count of variables in the nIndex-th PlaceHolder
of a Macro.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nVariant">The 0\-based variant index of the
                       macro variant to be searched.</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
Number of variables.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="P:Eplan.EplApi.HEServices.PlaceHolderService.NumberOfPlaceholders(Eplan.EplApi.DataModel.MasterData.Macro,System.Int32)">
            <summary>
This property was deprecated. Please use PlaceHolders property on DataModel.MasterData.WindowMacro or DataModel.MasterData.PageMacro object.
\Returns the count of PlaceHolder objects in a macro.
</summary>
            <param name="oMacro">The (opened) macro</param>
            <param name="nVariant">The 0\-based variant index of the
                       macro variant in which the
                       placeholders will be searched.</param>
            <returns>
Number of PlaceHolders.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given Macro
                                    does not exist or
                                    isn't valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
            <exception cref="T:Eplan.EplApi.HEServices.Exceptions.InvalidVariant">
	Thrown when given number variant of WindowMacro doesn't exist.
</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.GetValues(Eplan.EplApi.DataModel.MasterData.Macro,System.UInt32,System.String)">
            <summary>
\Returns the values of all variables in the nIndex-th
PlaceHolder of a Macro variant for a given record.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nIndex">1\-based index of the
                     PlaceHolder to be evaluated</param>
            <param name="strRecordName">Record name.</param>
            <returns>
The values of the variables.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.GetRecordNames(Eplan.EplApi.DataModel.MasterData.Macro,System.UInt32)">
            <summary>
\Returns the names of all records in the nIndex-th
PlaceHolder of a Macro.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
List of record names.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.GetNumberOfRecords(Eplan.EplApi.DataModel.MasterData.Macro,System.UInt32)">
            <summary>
\Returns the count of all records from the nIndex-th
PlaceHolder of a Macro.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
Number of records.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.GetVariableNames(Eplan.EplApi.DataModel.MasterData.Macro,System.UInt32)">
            <summary>
\Returns the names of all variables in the nIndex-th
PlaceHolder of a Macro variant.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
List of variable names.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given Macro
                                    does not exist or
                                    isn't valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.GetNumberOfVariables(Eplan.EplApi.DataModel.MasterData.Macro,System.UInt32)">
            <summary>
\Returns the count of variables in the nIndex-th PlaceHolder
of a Macro.
</summary>
            <param name="oMacro">The (opened) Macro</param>
            <param name="nIndex">1\-based index of the PlaceHolder to
                     be evaluated.</param>
            <returns>
Number of variables.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does nor
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.GetNumberOfPlaceholders(Eplan.EplApi.DataModel.MasterData.Macro)">
            <summary>
\Returns the count of PlaceHolder objects in a macro.
</summary>
            <param name="oMacro">The (opened) macro</param>
            <returns>
Number of PlaceHolders.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given Macro
                                    does not exist or
                                    isn't valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.IsVariableValid(System.String)">
            <summary>
Verifies the correctness if a variable name of a placeholder.
If a variable name contains invalid characters, this method
\returns false.
</summary>
            <param name="strVariableName">variable name to check.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.
                                Pleas see the
                                exception message
                                for further
                                explanation.</exception>
            <returns>
false: If strVariableName contains characters, which cannot
be used for variable name.

true: strVariableName can be used as variable name.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.RemoveInvalidObjectReferences(Eplan.EplApi.DataModel.Graphics.PlaceHolder)">
            <summary>
Removes invalid (e.g. deleted) object references from a
PlaceHolder.
</summary>
            <param name="oPlaceHolder">PlaceHolder object</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.RemoveObjectReferences(Eplan.EplApi.DataModel.Graphics.PlaceHolder,Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Removes object references from a PlaceHolder.
</summary>
            <param name="oPlaceHolder">PlaceHolder object</param>
            <param name="pObjects">List of objects, of which the
                       references will be removed.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.GetAssignedObjects(Eplan.EplApi.DataModel.Graphics.PlaceHolder)">
            <summary>
\Returns a list of objects assigned to a PlaceHolder.
</summary>
            <param name="oPlaceHolder">PlaceHolder object</param>
            <returns>
list of assigned objects.
</returns>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created.</exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.AssignObjects(Eplan.EplApi.DataModel.Graphics.PlaceHolder,Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Assigns a list of Placement references to a PlaceHolder
object. The originally assigned references are replaced.
</summary>
            <param name="oPlaceHolder">PlaceHolder Object.</param>
            <param name="pObjects">List of objects the PlaceHolder
                       will reference.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created.</exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.ApplyRecord(Eplan.EplApi.DataModel.Graphics.PlaceHolder,System.String,System.Boolean)">
            <summary>
Applies a record of values on a PlaceHolder object.
</summary>
            <param name="oPlaceHolder">PlaceHolder object</param>
            <param name="strRecordName">Name of the record to apply.</param>
            <param name="bApplyPageData">Whether the page data should be set.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.ApplyRecord(Eplan.EplApi.DataModel.Graphics.PlaceHolder,System.String)">
            <summary> 
Applies a record of values on a PlaceHolder object.
</summary>
            <remarks>
Sets also the page data.
</remarks>
            <param name="oPlaceHolder">PlaceHolder object</param>
            <param name="strRecordName">Name of the record to apply.</param>
            <exception cref="!:ArgumentNullException">Thrown in case of
                                        missing parameters.</exception>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid arguments,
                                    e.g. the given
                                    Placeholder does not
                                    exist or isn't
                                    valid.</exception>
            <exception cref="!:ApplicationException">The internal
                                       interface for place
                                       holders could not be
                                       created. </exception>
            <exception cref="!:BaseException">Service couldn't be
                                correctly executed.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.Finalize">
            <summary>
Non-deterministic Finalizer of PlaceHolderService object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.Dispose">
            <summary>
Default destructor 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.PlaceHolderService.#ctor">
            <summary>
Default constructor 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.PlaceHolderService">
            <summary>
Class providing functionality to manage <see text="Eplan.EplApi.DataModel.Graphics.PlaceHolder" cref="T:Eplan.EplApi.DataModel.Graphics.PlaceHolder" />
objects. You can for example assign Placements to a
PlaceHolder or apply a given record.
</summary>
            <seealso cref="T:Eplan.EplApi.DataModel.Graphics.PlaceHolder" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.AssignMainTerminal(Eplan.EplApi.DataModel.EObjects.Terminal,System.Boolean,System.Boolean)">
            <summary>
Converts auxiliary terminal into main terminal.
</summary>
            <param name="pTerminal">Terminal function will be assigned the "Main terminal" property. Can't be <c>null</c> or transient.</param>
            <param name="bOverwriteFilledPropsWithEmptyProps">If <c>true</c> then properties of old main terminal that contain no value removes existing properties on new main terminal.</param>
            <param name="bOverwriteEmptyPropsWithFilledProps">If <c>true</c> then properties of old main terminal that contain value are transfered to properties on new main terminal that contain no value. </param>
            <returns>
                <c>true</c> if operation succeeded i.e. terminal is now main terminal, <c>false</c> otherwise </returns>
            <remarks>
                <para>
Changes an auxiliary terminal into a main terminal by assigning the "main terminal" property to the auxiliary terminal. 
The auxiliary terminal is changed into a main terminal. The original main terminal is then converted to an auxiliary terminal.
Converting terminal to main terminal adopts properties from old to new main terminal based on parameters passed to method.
Appropriate for terminals, that have multiple representation types. Changes the main terminal property from one representation type to another.
Does not change the main terminal property from one level to another for multilevel terminals.  
</para>
                <para>
This method makes no changes to functions which are transient or their category is not <c>Terminal</c>. For such functions
it returns <c>false</c>.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>pTerminal</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>pTerminal</c> is <c>invalid</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminals(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig)">
            <summary>
Optimize all distributed terminals of all terminal strips in the project
</summary>
            <param name="prj">A project to process.</param>
            <param name="settings">A set of options for optimization process.
If NULL, options last used in GUI are read from user settings.</param>
            <returns>
TRUE if operation succeeded, FALSE otherwise.
</returns>
            <seealso cref="T:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminals(Eplan.EplApi.DataModel.EObjects.TerminalStrip[],Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig)">
            <summary>
Optimize all distributed terminals of the selected terminal strips
</summary>
            <param name="arrTerminalStrips">Array of terminal strips to process.</param>
            <param name="settings">A set of options for optimization process.
If NULL, options last used in GUI are read from user settings.</param>
            <returns>
TRUE if operation succeeded, FALSE otherwise.
</returns>
            <seealso cref="T:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminals(Eplan.EplApi.DataModel.EObjects.Terminal[],Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig)">
            <summary>
Optimize all distributed terminals of the selected terminals
</summary>
            <param name="arrTerminals">Array of terminals to process.</param>
            <param name="settings">A set of options for optimization process.
If NULL, options last used in GUI are read from user settings.</param>
            <returns>
TRUE if operation succeeded, FALSE otherwise.
</returns>
            <seealso cref="T:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig" />
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.FunctionDefinitionGroup">
            <summary>
An integer specifying a default <see text="function definition group" cref="P:Eplan.EplApi.DataModel.FunctionDefinition.Group" />
 for distributed terminals.
If part number of a distributed terminal is empty, the distributed terminal will get the specified function definition group.
The default is 10.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.PartNumberTerminalSH">
            <summary>
Part number that the distributed main terminal with 'SH' potential will get. 
If the part contains a function definition, this function definition will be the new function definition of the terminal.
By default, this option is empty.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.PartNumberTerminalN">
            <summary>
Part number that the distributed main terminal with 'N' potential will get. 
If the part contains a function definition, this function definition will be the new function definition of the terminal.
By default, this option is empty.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.PartNumberTerminalPE">
            <summary>
Part number that the distributed main terminal with 'PE' potential will get. 
If the part contains a function definition, this function definition will be the new function definition of the terminal.
By default, this option is empty.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.PartNumberTerminal">
            <summary>
Part number that the distributed main terminal with 'Normal' potential will get. 
If the part contains a function definition, this function definition will be the new function definition of the terminal.
By default, this option is empty.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.UniteConnectedPE">
            <summary>
If TRUE, connected distributed PE-terminals will be sorted on the strip, so that they are located together on the strip.
Default is TRUE.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.UniteConnected">
            <summary>
If TRUE, connected distributed terminals will be sorted on the strip, so that they are located together on the strip.
Default is TRUE.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.KeepConnPointDesignations">
            <summary>
If TRUE, the connection points will keep their designations.
If FALSE, the connection points with designations will be treated like connection points without designations.
Default is TRUE.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.KeepDesignations">
            <summary>
If TRUE, the distributed terminals will keep their device tag.
If FALSE, the distributed terminals with device tag will be treated like distributed terminals without device tag.
Default is TRUE.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig.#ctor">
            <summary>
Default constructor. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.TerminalsService.OptimizeDistributedTerminalsConfig">
            <summary>
Options for optimizing distributed terminals. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.TerminalsService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.TerminalsService">
            <summary>
Class providing functionality for processing terminals and terminal strips. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.Unite(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Placement3D},Eplan.EplApi.Base.PointD3D)">
            <summary>
Merges collection of layout space components in such a way that their are treated like <c>one</c> object.
</summary>
            <remarks>
                <para>Unite creates one new object by combining meshes of elements. After this method is called all objects passed as parameter become invalid.</para>
                <para>The handle which location is a prameter is stored in a new object. If a 3D macro is generate from this object, then it is moved to this point on the cursor and placed.</para>
            </remarks>
            <param name="colPlacements2Unite">Collection of objects which will be combined. Must have at least 2 elements.</param>
            <param name="oPoint">Absolute position of handle.</param>
            <returns>
New object which parent is an installation space of components from which it has been created. If value is <c>null</c> unite didn't end with success. 
For more information in this case please check system messages.
</returns>
            <exception cref="T:System.ArgumentNullException">Is thrown in case of null collection is passed or number of valid items is less then 2.</exception>
            <exception cref="T:System.ApplicationException">If this functionality is not avaiable. Please check exception message.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">If internal error has occured. Please check exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.OpenInstallationSpaceWithDeviceName(System.String,System.String)">
            <summary>
Opens the installation space which contains a given function. The
function is selected in the graphic editor.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strDeviceName">Name of a function.</param>
            <remarks />
            <remarks>
The given function can be a main function (motor,...), a device with index (plug, PLC connection,...)
or an interruption point.
Only the first found function will be selected.
</remarks>
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.OpenInstallationSpaceWithPlacement3D(Eplan.EplApi.DataModel.E3D.Placement3D)">
            <summary>
Opens the installation space and selects the Placement passed as oPlacement.
The Placement is selected in the graphic editor.
</summary>
            <param name="oPlacement">Placement to be selected.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.OpenInstallationSpace(System.String,System.String)">
            <summary>
Opens Installations space with the name passed to strName.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strFullName">Full name of the Installation Space. It is visible in property INSTALLATIONSPACE_FULLNAME.</param>
            <returns>
The opened InstallationSpace object.
</returns>
            <remarks />
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.ShowAllConnections">
            <summary>
Makes all 3d connections visible in opened 3d graphic editor view.
</summary>
            <exception cref="T:System.ApplicationException">Is thrown if the current license does not allow the execution of this task.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">If internal error has occured. Please check exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.ShowConnections(System.Collections.Generic.IEnumerable{Eplan.EplApi.DataModel.E3D.Connection3D})">
            <summary>
Makes 3d connections visible in opened 3d graphic editor view.
</summary>
            <param name="colConnections">Connections which will be drawn in GED.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown when parameter is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">Is thrown if the current license does not allow the execution of this task.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">If internal error has occured. Please check exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.Unhide(Eplan.EplApi.DataModel.E3D.Placement3D)">
            <summary>
Makes a 3d object visible in opened 3d graphic editor view.
</summary>
            <remarks>
This method does not change automatically current viewpoint or open a 3D view.
</remarks>
            <exception cref="T:System.ArgumentNullException">Is thrown when parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Is thrown when parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Is thrown if the current license does not allow the execution of this task.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">If internal error has occured. Please check exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.Hide(Eplan.EplApi.DataModel.E3D.Placement3D)">
            <summary>
Makes a 3d object invisible in opened 3d graphic editor view.
</summary>
            <exception cref="T:System.ArgumentNullException">Is thrown when parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Is thrown when parameter is invalid.</exception>
            <exception cref="T:System.ApplicationException">Is thrown if the current license does not allow the execution of this task.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">If internal error has occured. Please check exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit3D.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Edit3D">
            <summary>
Class to help with working on 3D objects in the graphics editor. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.SynchronizeObjectsToNavigators(Eplan.EplApi.DataModel.StorableObject[])">
            <summary>
Synchronize objects selected in GUI navigators.
Groups will not be resolved, each object of a group must be given in parameter.
</summary>
            <param name="objects">Storable objects to select.</param>
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.CutOff(Eplan.EplApi.DataModel.Graphics.GraphicalPlacement,Eplan.EplApi.Base.PointD)">
            <summary>
Cut off given object at a given position.
</summary>
            <param name="oPlacement">Object to cut.</param>
            <param name="oPoint">Point of object to cut off.</param>
            <returns>
Modified graphical objects, empty array if it was last object, null if nothing was removed.
</returns>
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.CutOff(Eplan.EplApi.Base.PointD)">
            <summary>
Cut off objects at a given position,from page opened in GED .
</summary>
            <param name="oPoint">Point of object to cut off.</param>
            <returns>
Modified graphical objects, empty array if it was last object, null if nothing was removed.
</returns>
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.CutOff(Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD)">
            <summary>
Cut off objects at a given position and page.
</summary>
            <param name="oPage">Page with object to cut off.</param>
            <param name="oPoint">Point of object to cut off.</param>
            <returns>
Modified graphical objects, empty array if it was last object, null if nothing was removed.
</returns>
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.Mirror(Eplan.EplApi.DataModel.Graphics.GraphicalPlacement[],Eplan.EplApi.Base.PointD,Eplan.EplApi.Base.PointD)">
            <summary>
Moves objects to its mirror position.
</summary>
            <param name="plcmnts">Placements to move.</param>
            <param name="oPntStart">Starting point of a line(mirror)</param>
            <param name="oPntEnd">Ending point of a line(mirror)</param>
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
            <exception cref="T:System.ArgumentException">Is thrown in case of oPntStart is equal to oPntEnd</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.Rotate(Eplan.EplApi.DataModel.Placement[],Eplan.EplApi.Base.PointD,System.Double)">
            <summary>
Rotates objects.
</summary>
            <param name="plcmnts">Placements to rotate.</param>
            <param name="oPntStart">Starting point for rotation</param>
            <param name="angle">Angle (in radians)</param>
            <exception cref="!:ArgumentNullException">Is thrown in case of null parameters.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.SendToBack(Eplan.EplApi.DataModel.Placement)">
            <summary>
Opens the page, selects the Placement passed as oPlacementToMove and move the Placement back.
</summary>
            <param name="oPlacementToMove">Placement to move.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.BringToFront(Eplan.EplApi.DataModel.Placement)">
            <summary>
Opens the page, selects the Placement passed as oPlacementToMove and move the Placement front.
</summary>
            <param name="oPlacementToMove">Placement to move.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.RedrawGed">
            <summary>
Redraws GED surface.
</summary>
            <remarks>GED is not redrawn when Eplan P8 is opened in 'Quiet' mode. In this case method call always returns false.</remarks>
            <returns>
True if operation succeeded and false if not.
</returns>
            <exception cref="!:ApplicationException">The graphics editor interface could not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.SetFocusToGED">
            <summary>
Sets focus to GED frame.
</summary>
            <returns>
true if operation succeeded and false if not.
</returns>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.ClearSelection">
            <summary>
Removes selection from all objects in currently opened document.
</summary>
            <remarks>To see in ged that the selection is cleared use <see text="RedrawGed" cref="M:Eplan.EplApi.HEServices.Edit.RedrawGed" /> to redraw the GED.</remarks>
            <exception cref="T:System.ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.SelectProjectInPagesNavigator(Eplan.EplApi.DataModel.Project)">
            <summary>
Selects the project in pages navigator
</summary>
            <returns>
true if operation succeeded and false if not.
</returns>
            <param name="oProject">project to select</param>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ArgumentNullException">Null was passed to a parameter.</exception>
            <exception cref="!:ApplicationException">The internal interface could not be created.</exception>
            <exception cref="!:BaseException">An error occurred. Please refer to the
                                exception message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.SelectObjects(System.String,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
Selects objects in GED
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project. The already selected objects will be deselected.</param>
            <param name="objectIds">List of Ids of objects to be selected.
Note that an object Id MUST have three parts separated with slash: Type/Id/transient flag. Transient flag can have 2 values, 0 means object is persistent, 1 means object is transient.
e.g.: 17/142/0. When you get the object Id from <c>Properties.PROPUSER_DBOBJECTID</c>, you have to remove the first number (project id) and the first '/' from this string (see example).</param>
            <param name="bDeselectAll">Deselect all objects which were already selected.</param>
            <remarks> The already selected objects will be deselected.</remarks>
            <remarks />
            <example>
The following examples shows a method to mark all the motors on a given schematic page.

<code lang="cs" source="P8_API_Example_HEServices_SelectObjects.cs.txt" /></example>
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.OpenPageWithNameAndXYCoords(System.String,System.String,System.Double,System.Double)">
            <summary>
Opens the page with the name passed to strPageName and sets
the cursor to the position defined by the X and Y
coordinates.
</summary>
            <param name="strFullLinkFileName">Full link file name of the
                             project.</param>
            <param name="strPageName">Name of the page to open.</param>
            <param name="nXCoord">X coordinate.</param>
            <param name="nYCoord">Y coordinate.</param>
            <remarks />
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.OpenPageWithPlacement(Eplan.EplApi.DataModel.Placement)">
            <summary>
Opens the page and selects the Placement passed as oPlacementToSelect.
The Placement is selected in the graphic editor.
</summary>
            <param name="oPlacementToSelect">Placement to be selected.</param>
            <remarks />
            <exception cref="!:ArgumentNullException">Is thrown in case of null
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.OpenPageWithNameAndFunctionName(System.String,System.String,System.String)">
            <summary>
Opens the page which contains a given function. The
function is selected in the graphic editor. 
</summary>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strPageName">Name of the page to open - if empty it will search in whole project.</param>
            <param name="strFuncName">Name of a function.</param>
            <remarks> First found function will be selected. If page name parameter is empty whole project will be searched. This method searches even for non logic functions.
</remarks>
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.OpenPageWithNameAndDeviceName(System.String,System.String,System.String)">
            <summary>
Opens the page with the name passed to strPageName and select the function whose name passed to strDeviceName.
The function is selected in the graphic editor.
If no function with name strDeviceName was found on the page, so no element will be selected. But the page will be still opened.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strDeviceName">Name of a function.</param>
            <remarks />
            <remarks>
The given function can be a main function (motor,...), a device with index (plug, PLC connection,...)
or an interruption point.
On a given page only the first found function will be selected, if one found.
The method does not work if a function has graphic or external representation type.
</remarks>
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.OpenPageWithDeviceName(System.String,System.String)">
            <summary>
Opens the page which contains a given function. The
function is selected in the graphic editor.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strDeviceName">Name of a function.</param>
            <remarks />
            <remarks>
The given function can be a main function (motor,...), a device with index (plug, PLC connection,...)
or an interruption point.
Only the first found function will be selected.
The method does not work if a function has graphic or external representation type.
</remarks>
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.OpenPageWithName(System.String,System.String)">
            <summary>
Opens the page with the name passed to strPageName.
</summary>
            <param name="strFullLinkFileName">Full link file name of the project.</param>
            <param name="strPageName">Name of the page to open.</param>
            <returns>
The opened Page object.
</returns>
            <remarks />
            <exception cref="!:ArgumentException">Is thrown in case of invalid
                                    \parameters.</exception>
            <exception cref="!:ApplicationException">The graphics editor interface could
                                       not be created.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Edit.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Edit">
            <summary>
Class to open pages in the graphics editor for editing. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.SelectionSet.GetSelectedProjects(System.Boolean)">
            <summary>
Return the selected projects as an iterator.
</summary>
            <param name="bFirst">true\: the first project. false\: the
                     next project.</param>
            <returns>
Returns selected Project.
</returns>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.SelectionSet._setObjectTypes(System.Int32[])">
            <summary>
For internal use.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.CurrentlyEdited">
            <summary>
Determines Page or InstallationSpace currently edited in graphical editor.
</summary>
            <returns>
Page or InstallationSpace currently edited in graphical editor. 
Returns null if nothing is open in graphical editor.
</returns>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.Document">
            <summary>
Determines whether a document is selected. This will only return a document,
when the selection is inside the graphical editor.
</summary>
            <returns>
the document selected and null if not available.
</returns>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.LockProjectByDefault">
            <summary>
If set to true, the objects returned and the rest objects from project by the SelectionSet
method are locked. Default value is <c>false</c>.
</summary>
            <remarks>
                <c>LockProjectByDefault</c> should be set to <c>true</c> before any chagnes on any inside elements of obtained objects.
</remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.LockSelectionByDefault">
            <summary>
If set to true, the objects returned by the SelectionSet
methods are locked. Default value is <c>true</c>.
</summary>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.IsOnlyOneObjectSelected">
            <summary>
Determines whether exactly one object is selected.
</summary>
            <returns>
True, if exactly one object is selected.


</returns>
            <remarks>
 When a node is selected, this is only the first element.
</remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.IsPageSelected">
            <summary>
Determines whether a page is selected.
</summary>
            <returns>
true, if a page is selected.


</returns>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.SelectionRecursive">
            <summary>
Gets the complete selection on the active window.
Property <c>LockProjectByDefault</c> should be set to <c>true</c> before any changes on any inside elements of obtained objects.
</summary>
            <remarks>
When a node in tree view is selected, all nested elements will be returned .
</remarks>
            <returns>
Array of objects casted to class <see text="StorableObject" cref="T:Eplan.EplApi.DataModel.StorableObject" />.
</returns>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.Selection">
            <summary>
Gets the complete selection on the active window.
Property <c>LockProjectByDefault</c> should be set to <c>true</c> before any changes on any inside elements of obtained objects.
</summary>
            <remarks>
When a node is selected, this is only the first element. The property can work only within one project.
</remarks>
            <returns>
Array of selected objects casted to class <see text="StorableObject" cref="T:Eplan.EplApi.DataModel.StorableObject" />.
</returns>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.ProjectMessages">
            <summary>
Gets all selection project's messages.
</summary>
            <returns>
Array of selected <see text="ProjectMessage" cref="T:Eplan.EplApi.EServices.ProjectMessage" /> objects.
</returns>
            <depend cref="M:XEsSelection.getSelection(std.vector&lt;BaseHandle,std.allocator&lt;BaseHandle&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IGfWind*,std.vector&lt;System.UInt16,std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*,System.UInt16)" />
        </member>
        <member name="M:Eplan.EplApi.HEServices.SelectionSet.GetSelectedPages">
            <summary>
Gets the selected pages.
</summary>
            <returns>
\returns array of selected pages.


</returns>
            <remarks>
Returns all selected pages. When a node is selected, all pages inside are returned.
</remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.OpenedInstallationSpaces">
            <summary>
Gets installation spaces opened in GED.
</summary>
            <returns>
Returns an array of opened installation spaces.
</returns>
            <remarks>
                <para>
If GED is currently displaying an installation space it is at the first position in the array.
</para>
                <para>
Note that if <see text="LockSelectionByDefault" cref="P:Eplan.EplApi.HEServices.SelectionSet.LockSelectionByDefault" /> is <c>true</c> then only
objects from projects open in read-write mode will be locked.
</para>
            </remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.OpenedPages">
            <summary>
Gets pages open in GED.
</summary>
            <returns>
Returns an array of opened pages.
</returns>
            <remarks>
                <para>
This property returns the page currently selected in GED as the first element in the array.
</para>
                <para>
Note that if <see text="LockSelectionByDefault" cref="P:Eplan.EplApi.HEServices.SelectionSet.LockSelectionByDefault" /> is <c>true</c> then only
objects from projects open in read-write mode will be locked.
</para>
            </remarks>
        </member>
        <member name="P:Eplan.EplApi.HEServices.SelectionSet.SelectedProjects">
            <summary>
Return the selected projects of the active dialog as an array.
If you select elements from different projects inside of one dialog you can determinate the selected projects.
</summary>
            <returns>
Returns all selected Projects of the active dialog.
</returns>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.SelectionSet.GetSelectedObject(System.Boolean)">
            <summary>
\Returns the first selected object.
</summary>
            <param name="bFirst">true\: the first object. false\: the
                     next object.</param>
            <returns>
Returns StorableObject of the selected element or null.


</returns>
            <remarks>
When a node is selected, this is only the first element.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.SelectionSet.GetCurrentProject(System.Boolean)">
            <summary>
Determines the active project.
</summary>
            <param name="bUseSelDlg">if set to true\: Opens an
                         additional selection dialog, if
                         more than one project was selected
                         in the page browser.</param>
            <returns>
return != null: the active project
return = null: no project is open
</returns>
            <remarks>
When 'Cancel' button was pressed in the selection dialog, 1st open project will be returned.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.SelectionSet.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.SelectionSet">
            <summary>
Class providing functionality to get selected objects from a current dialog of EPLAN. 	 	
</summary>
            <remarks>
The methods usually return an empty result if there is more than 1 one project open, except from SelectedProjects and GetCurrentProject(true).			
</remarks>
            <example>The following example shows how to use class SelectionSet.
<code lang="cs" source="P8_API_Example_HEServices_SelectionSet_Example1.cs.txt" /></example>
            <example>
                <code lang="cs" source="P8_API_Example_HEServices_SelectionSet_Example2.cs.txt" />
            </example>
        </member>
        <member name="T:IMate">
represents a common interface class for a constraint in 3d
</member>
        <member name="T:W3D.IMeshObject">
represents a mesh object - basic interface for all mesh interfaces

</member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.WindowMacro(Eplan.EplApi.DataModel.MasterData.WindowMacro,System.Int32,Eplan.EplApi.DataModel.E3D.PointMate,Eplan.EplApi.DataModel.E3D.Mate,System.Double,System.Double,System.Double,System.Double,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places a window macro with snapping source mate to a target mate from another object. 	 
</summary>
            <remarks>The position and/or orientation of the associated placements changes after the snapping, in a way that the macro's source mate in the same position as a target mate.</remarks>
            <param name="oMacro">Object with opened macro.</param>
            <param name="nVariant">Index of the macro variant to be placed (0 based).</param>
            <param name="oSourceMate">Given mate of a macro</param>
            <param name="oTargetMate">Target mate</param>
            <param name="dRotationAngle">Additional rotation angle (radian)</param>
            <param name="dX">Additional offset in x direction </param>
            <param name="dY">Additional offset in y direction</param>
            <param name="dZ">Additional offset in z direction</param>
            <param name="nNumerationMode">Numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a parameter.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred during inserting the macro. Please refer to the error message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.WindowMacro(Eplan.EplApi.DataModel.MasterData.WindowMacro,System.Int32,Eplan.EplApi.DataModel.E3D.PointMate,Eplan.EplApi.DataModel.E3D.Mate,System.Double,System.Double,System.Double,System.Double,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode,System.Boolean)">
            <summary>
Places a window macro with a given mate to another mate. 
That means, that the position and/or orientation of the 
associated placements will change, so that
the given mate fits to the target mate.
</summary>
            <remarks />
            <param name="oMacro">Object with opened macro.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oSourceMate">given mate of macro</param>
            <param name="oTargetMate">target mate</param>
            <param name="dRotationAngle">additional rotation angle (radian)</param>
            <param name="dX">additional offset in x direction </param>
            <param name="dY">additional offset in y direction</param>
            <param name="dZ">additional offset in z direction</param>
            <param name="nNumerationMode">numeration mode</param>
            <param name="bUseSourceMateOnPlacementArea">if true, the given mate of macro will project to the placement area of macro</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.WindowMacro(Eplan.EplApi.DataModel.MasterData.WindowMacro,System.Int32,Eplan.EplApi.DataModel.E3D.Placement3D,System.Windows.Media.Media3D.Matrix3D,Eplan.EplApi.HEServices.Insert3D.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places objects from window macro into layout space.
</summary>
            <remarks>
In same cases after inserting 3d macro the absolute transformation of inserted object can be different then the one determined in parameters.
This situation can happen when in macro user handle is defined and it is not located in origin of first object from the macro.
In this case all objects from macro are placed relative to this user defined handle which is located in given position.
</remarks>
            <param name="oMacro">Opened macro object.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oParent">Object from EPLAN project to which top most objects from macro will be assigned.</param>
            <param name="oMatrix">Transformation by which objects from macro will be multiplied.</param>
            <param name="nMoveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position.</param>
            <param name="nNumerationMode">Numeration mode used during inserting objects.</param>
            <returns>Inserted placements.</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters.</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.SymbolMacro(System.String,System.Int32,Eplan.EplApi.DataModel.E3D.Placement3D,System.Windows.Media.Media3D.Matrix3D,Eplan.EplApi.HEServices.Insert3D.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places objects from symbol macro into layout space.
</summary>
            <remarks>
In same cases after inserting 3d macro the absolute transformation of inserted object can be different then the one determined in parameters.
This situation can happen when in macro user handle is defined and it is not located in origin of first object from the macro.
In this case all objects from macro are placed relative to this user defined handle which is located in given position.
</remarks>
            <param name="strEMSFileName">Full file name of the SymbolMacro file (.ems) to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oParent">Object from EPLAN project to which top most objects from macro will be assigned.</param>
            <param name="oMatrix">Transformation by which objects from macro will be multiplied.</param>
            <param name="nMoveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
            <internal />
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.WindowMacro(System.String,System.Int32,Eplan.EplApi.DataModel.E3D.Placement3D,System.Windows.Media.Media3D.Matrix3D,Eplan.EplApi.HEServices.Insert3D.MoveKind,Eplan.EplApi.DataModel.MasterData.WindowMacro.Enums.NumerationMode)">
            <summary>
Places objects from window macro into layout space.
</summary>
            <remarks>
In same cases after inserting 3d macro the absolute transformation of inserted object can be different then the one determined in parameters.
This situation can happen when in macro user handle is defined and it is not located in origin of first object from the macro.
In this case all objects from macro are placed relative to this user defined handle which is located in given position.
</remarks>
            <param name="strFileName">Full file name of the WindowMacro file (.ema) to be placed.</param>
            <param name="nVariant">Index of the macro variant to be
                       placed (0 based).</param>
            <param name="oParent">Object from EPLAN project to which top most objects from macro will be assigned.</param>
            <param name="oMatrix">Transformation by which objects from macro will be multiplied.</param>
            <param name="nMoveCondition">Determines if the macro will be
                            placed with absolute coordinates
                            or relatively to its original
                            position</param>
            <param name="nNumerationMode">numeration mode</param>
            <returns> Inserted placements</returns>
            <exception cref="!:ArgumentException">Thrown in case of
                                    invalid parameters..</exception>
            <exception cref="!:ArgumentNullException">Null was set to a
                                        parameter.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">An error occurred
                                during inserting the
                                macro. Please refer
                                to the error
                                message.</exception>
            <internal>
thi todo
</internal>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Insert3D.MoveKind.Relative">
            <summary>Place macro using coordinates relative to its original position.</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.Insert3D.MoveKind.Absolute">
            <summary>Place macro using absolute coordinates.</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Insert3D.MoveKind">
            <summary>
Enumeration, which determines whether a macro will be placed
using absolute coordinates or coordinates relative to its
original position on the page. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Insert3D.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Insert3D">
            <summary> 
TODO
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CoordinateService.ConvertCoordinate(Eplan.EplApi.DataModel.Page,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems)">
            <summary>
Method that converts from coordinate system based on page type to another
</summary>
            <param name="oPage">Page which frame size, height and type will be used to calculate new coordinates</param>
            <param name="oSourcePoint">Source Point.</param>
            <param name="oDestinationCoordinateSystem">Destination coordinate system.</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CoordinateService.ConvertCoordinate(Eplan.EplApi.DataModel.Page,Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems,Eplan.EplApi.Base.PointD,Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems)">
            <summary>
Method that converts from given coordinate system to another 
</summary>
            <param name="oPage">Page which frame size and height will be used to calculate new coordinates</param>
            <param name="oSourceCoordinateSystem">Source coordinate system.</param>
            <param name="oSourcePoint">Source Point.</param>
            <param name="oDestinationCoordinateSystem">Destination coordinate system.</param>
        </member>
        <member name="F:Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems.COORDSYSTEM_PROCESS">
            <summary>Process page</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems.COORDSYSTEM_FLUID">
            <summary>Fluid page</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems.COORDSYSTEM_ELECTRO">
            <summary>Logical page</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems.COORDSYSTEM_GRAPHIC">
            <summary>Graphics page</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.CoordinateService.CoordinateSystems">
            <summary>
Enumeration of coordinate systems
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CoordinateService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CoordinateService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.CoordinateService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.CoordinateService">
            <summary> 
Class for converting coordinate systems 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.GenerateListOfUnusedConnections(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Generates list of unused or deleted connection from project.
</summary>
            <param name="oPrj">Project from which generation of list will be done.</param>
            <param name="strFileNameFullPath">Full path to file into which list will be writen.</param>
            <param name="bExportOnlyDeletedConnections">If true only deleted connection will be added to list.</param>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.ExportProductionWiring(Eplan.EplApi.DataModel.Project,Eplan.EplApi.DataModel.Connection[],Eplan.EplApi.HEServices.ConnectionService.PWMachineType,System.String,System.String,System.String,Eplan.EplApi.Base.ISOCode.Language,System.Boolean)">
            <summary>
Exports manufacturing data for wire fabrication machines.
</summary>
            <param name="oPrj">Project from which production wirings will be exported.</param>
            <param name="selectedConnections">Connection which will be used in export.</param>
            <param name="kindOfMachine">Type of machine that will be used to export production wirings.</param>
            <param name="strNameOfMachine">Name of machine that will be used to export production wirings.</param>
            <param name="strDestinationPath">Directory into which export will done. If not exists then it will be created.</param>
            <param name="strFileName">If passed then export will be to this file. Can be <c>null</c> or empty.</param>
            <param name="nExportLanguage">Language in which export will be done.</param>
            <param name="bAllowExportConnectionMultiple">If true then multiple connections are also exported.</param>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.ExportProductionWiring(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.ConnectionService.PWMachineType,System.String,System.String,System.String,Eplan.EplApi.Base.ISOCode.Language,System.Boolean)">
            <summary>
Exports manufacturing data for wire fabrication machines.
</summary>
            <param name="oPrj">Project from which production wirings will be exported.</param>
            <param name="kindOfMachine">Type of machine that will be used to export production wirings.</param>
            <param name="strNameOfMachine">Name of machine that will be used to export production wirings.</param>
            <param name="strDestinationPath">Directory into which export will done. If not exists then it will be created.</param>
            <param name="strFileName">If passed then export will be to this file. Can be <c>null</c> or empty.</param>
            <param name="nExportLanguage">Language in which export will be done.</param>
            <param name="bAllowExportConnectionMultiple">If true then multiple connections are also exported.</param>
            <exception cref="T:System.ArgumentException">Thrown in case of invalid arguments.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when neccessary argument is <c>null</c>.</exception>
            <exception cref="T:System.ApplicationException">The internal interface used for export could not be created.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No user rights to create files on the file system.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.Correct(Eplan.EplApi.DataModel.Project,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Correct connections in a project. Corresponds to ProjectData-&gt;Connections-&gt;Correct.
</summary>
            <param name="oProject">Project to correct connections.</param>
            <param name="bMergeConnectioDefinitionPoints">Merge connection definition points with same connection graphic.</param>
            <param name="bMergeNetDefinitionPoints">Merge several net definition points on  a net to one net definition point per net.</param>
            <param name="bRemoveSuperfluousNetDefinitionPoints">Remove unnecessary net definition poinzs.</param>
            <remarks />
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.TrackNet(Eplan.EplApi.DataModel.Connection,System.Collections.Generic.List{Eplan.EplApi.DataModel.Connection})">
            <summary>
Finds all connections in the same net as <c>oSourceConnection</c>.
</summary>
            <param name="oSourceConnection">Connection from which tracking net is started.</param>
            <param name="foundConnectionList">List of connections that are in the same net as <c>oSourceConnection</c>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if parameter <c>oSourceConnection</c> or <c>foundConnectionList</c> is <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Throw if parameter <c>oSourceConnection</c> is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.TrackSignal(Eplan.EplApi.DataModel.Connection,System.Collections.Generic.List{Eplan.EplApi.DataModel.Connection})">
            <summary>
Finds all connections on the same schema as <c>oSourceConnection</c> which transmit the same signal.
</summary>
            <param name="oSourceConnection">Connection from which tracking signal is started.</param>
            <param name="foundConnectionList">List of connections that transmits the same signal as <c>oSourceConnection</c>
and are on the same schema.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if parameter <c>oSourceConnection</c> or <c>foundConnectionList</c> is <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Throw if parameter <c>oSourceConnection</c> is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.TrackPotential(Eplan.EplApi.DataModel.Connection,System.Collections.Generic.List{Eplan.EplApi.DataModel.Connection})">
            <summary>
Finds all connections which are in the same circuit as <c>oSourceConnection</c> and have the same potential.
</summary>
            <param name="oSourceConnection">Connection from which tracking potential is started.</param>
            <param name="foundConnectionList">List of connections that has the same potential as <c>oSourceConnection</c>
and are in the same circuit.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if parameter <c>oSourceConnection</c> or <c>foundConnectionList</c> is <c>null</c> value.</exception>
            <exception cref="T:System.ArgumentException">Throw if parameter <c>oSourceConnection</c> is invalid.</exception>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.InterconnectDevices(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
Interconnect devices like in dialog "Interconnect devices".
</summary>
            <param name="arrPinsSource">List of pins. Sources of the new connections.</param>
            <param name="arrPinsTarget">List of pins. Targets of the new connections.</param>
            <exception cref="!:ApplicationException">An internal interface necessary for the
                                       function could not be created.</exception>
            <remarks>
Without parameter "cable", the new Connections are not of type "wire in cable"
</remarks>
            <returns>
Array of new created connections<see text="Connection" cref="T:Eplan.EplApi.DataModel.Connection" />.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.InterconnectDevices(System.Collections.ArrayList,System.Collections.ArrayList,Eplan.EplApi.DataModel.Function)">
            <summary>
Interconnect devices like in dialog "Interconnect devices".
</summary>
            <param name="arrPinsSource">List of pins. Sources of the new connections.</param>
            <param name="arrPinsTarget">List of pins. Targets of the new connections.</param>
            <param name="cable">Cable whose free wires are taken to connect the pins.</param>
            <exception cref="!:ApplicationException">An internal interface necessary for the
                                       function could not be created.</exception>
            <remarks />
            <returns>
Array of new created connections<see text="Connection" cref="T:Eplan.EplApi.DataModel.Connection" />.
</returns>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DeleteConnectionDefinitionPoints(System.Collections.ArrayList,Eplan.EplApi.HEServices.ConnectionService.Deletion,System.Boolean,System.Boolean,System.String)">
            <summary>
Delete wire designations and connection definition points.
</summary>
            <param name="arrConnectionList">List of connections for
                                which to delete the wire
                                designations or connection
                                definition points.</param>
            <param name="rDeleteMode">Delete mode. Valid
                          values are 0 and 1. See
                          enumeration <see text="Deletion" cref="T:Eplan.EplApi.HEServices.ConnectionService.Deletion" />.</param>
            <param name="bLeaveManuals">If set to true, connection
                            definition points indicated as 'manually set'
							are ignored.</param>
            <param name="bRegenrateConnections">If set to true, first
                                    the connections will be
                                    regenerated.</param>
            <param name="strSchemaName">Settings scheme to be used during the operation.</param>
            <exception cref="!:ArgumentException">Invalid parameters
                                    found.</exception>
            <exception cref="!:ApplicationException">An internal interface
                                       necessary for the
                                       function could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                while deleting connection
                                definition points or
                                wire designations.
                                Please read the
                                exception message</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 

CDPs to remove are taken from Connection.ConnectionDefPoints property. 
This property is updated after generating connections. 
Some methods like Cable.Create or Cable.SetLogicalArea don't update connections and 
Connection.ConnectionDefPoints property is empty which causes that CDP will not be removed.

Please make sure that connections are up-to-date before using this method or 
use it with parameter bRegenerateConnections set to true.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DeleteConnectionDefinitionPoints(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.ConnectionService.Deletion,System.Boolean,System.Boolean,System.String)">
            <summary>
Delete wire designations and connection definition points.

This method acts only on connection definition points 
associated with (i.e. returned by) a connection existing in the project
</summary>
            <param name="oProject">Project in which to
                       delete the wire
                       designations or connection
                       definition points.</param>
            <param name="rDeleteMode">Delete mode. Valid
                          values are 0 and 1. See
                          enumeration <see text="Deletion" cref="T:Eplan.EplApi.HEServices.ConnectionService.Deletion" />.</param>
            <param name="bLeaveManuals">If set to true, connection
                            definition points indicated as 'manually set'
							are ignored.</param>
            <param name="bRegenrateConnections">If set to true, first
                                    the connections will be
                                    regenerated.</param>
            <param name="strSchemaName">Settings scheme to be used during the operation.</param>
            <exception cref="!:ArgumentException">Invalid parameters
                                    found.</exception>
            <exception cref="!:ApplicationException">An internal interface
                                       necessary for the
                                       function could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                while deleting connection
                                definition points or
                                wire designations.
                                Please read the
                                exception message</exception>
            <exception cref="!:InvalidScheme">An error occurs when
                                used scheme name
                                doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 

CDPs to remove are taken from Connection.ConnectionDefPoints property. 
This property is updated after generating connections. 
Some methods like Cable.Create or Cable.SetLogicalArea don't update connections and 
Connection.ConnectionDefPoints property is empty which causes that CDP will not be removed.

Please make sure that connections are up-to-date before using this method or 
use it with parameter bRegenerateConnections set to true.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DeleteConnectionDefinitionPoints(System.Collections.ArrayList,Eplan.EplApi.HEServices.ConnectionService.Deletion,System.Boolean,System.Boolean)">
            <summary>
Delete wire designations and connection definition points.
</summary>
            <param name="arrConnectionList">List of connections for
                                which to delete the wire
                                designations or connection
                                definition points.</param>
            <param name="rDeleteMode">Delete mode. Valid
                          values are 0 and 1. See
                          enumeration <see text="Deletion" cref="T:Eplan.EplApi.HEServices.ConnectionService.Deletion" />.</param>
            <param name="bLeaveManuals">If set to true, connection
                            definition points indicated as 'manually set'
							are ignored.</param>
            <param name="bRegenrateConnections">If set to true, first
                                    the connections will be
                                    regenerated.</param>
            <exception cref="!:ArgumentException">Invalid parameters
                                    found.</exception>
            <exception cref="!:ApplicationException">An internal interface
                                       necessary for the
                                       function could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                while deleting connection
                                definition points or
                                wire designations.
                                Please read the
                                exception message</exception>
            <remarks>
The last-used scheme which is currently set in GUI
will be used during the operation.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 

CDPs to remove are taken from Connection.ConnectionDefPoints property. 
This property is updated after generating connections. 
Some methods like Cable.Create or Cable.SetLogicalArea don't update connections and 
Connection.ConnectionDefPoints property is empty which causes that CDP will not be removed.

Please make sure that connections are up-to-date before using this method or 
use it with parameter bRegenerateConnections set to true.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DeleteConnectionDefinitionPoints(Eplan.EplApi.DataModel.Project,Eplan.EplApi.HEServices.ConnectionService.Deletion,System.Boolean,System.Boolean)">
            <summary>
Delete wire designations and connection definition points.

This method acts only on connection definition points 
associated with (i.e. returned by) a connection existing in the project
</summary>
            <param name="oProject">Project in which to
                       delete the wire
                       designations or connection
                       definition points.</param>
            <param name="rDeleteMode">Delete mode. Valid
                          values are 0 and 1. See
                          enumeration <see text="Deletion" cref="T:Eplan.EplApi.HEServices.ConnectionService.Deletion" />.</param>
            <param name="bLeaveManuals">If set to true, connection
                            definition points indicated as 'manually set'
							are ignored.</param>
            <param name="bRegenrateConnections">If set to true, first
                                    the connections will be
                                    regenerated.</param>
            <exception cref="!:ArgumentException">Invalid parameters
                                    found.</exception>
            <exception cref="!:ApplicationException">An internal interface
                                       necessary for the
                                       function could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred,
                                while deleting connection
                                definition points or
                                wire designations.
                                Please read the
                                exception message</exception>
            <exception cref="!:InvalidScheme">An error occurs when
                                used scheme name
                                doesn't exist</exception>
            <remarks>
The last-used scheme which is currently set in GUI
will be used during the operation.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 

CDPs to remove are taken from Connection.ConnectionDefPoints property. 
This property is updated after generating connections. 
Some methods like Cable.Create or Cable.SetLogicalArea don't update connections and 
Connection.ConnectionDefPoints property is empty which causes that CDP will not be removed.

Please make sure that connections are up-to-date before using this method or 
use it with parameter bRegenerateConnections set to true.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.AlignAndFormatConnectionDefinitionPoints(System.Collections.ArrayList,System.String,Eplan.EplApi.HEServices.ConnectionService.Align,System.Boolean,System.Boolean)">
            <summary>
function to re-align and re-format connection definition
points.
</summary>
            <param name="arrConnectionList">List of connections for
                                which to format and
                                align connection
                                definition points.</param>
            <param name="strSchemaName">Name of the scheme,
                            which is used for wire
                            numbering.</param>
            <param name="rAlignFormatMode">Mode, which will be used
                               for aligning and
                               formatting of connection
                               definition points. The
                               values 0, 1, and 2 are
                               allowed. See enumeration
                               <see text="Align" cref="T:Eplan.EplApi.HEServices.ConnectionService.Align" />.</param>
            <param name="bLeaveManuals">If set to true, connection
                            definition points indicated as 'manually set'
							are ignored.</param>
            <param name="bRegenrateConnections">If set to true,
                                    connections will be
                                    generated before
                                    formatting.</param>
            <exception cref="!:ArgumentException">Invalid parameters
                                    found.</exception>
            <exception cref="!:ApplicationException">A necessary internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during formatting the
                                connection definition
                                points.</exception>
            <exception cref="!:InvalidScheme">An error occurs when
                                used scheme name
                                doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.AlignAndFormatConnectionDefinitionPoints(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.ConnectionService.Align,System.Boolean,System.Boolean)">
            <summary>
function to re-align and re-format connection definition
points.
</summary>
            <param name="oProject">Project in which to
                       format and align connection
                       definition points.</param>
            <param name="strSchemaName">Name of the scheme,
                            which is used for wire
                            numbering.</param>
            <param name="rAlignFormatMode">Mode, which will be used
                               for aligning and
                               formatting of connection
                               definition points. The
                               values 0, 1, and 2 are
                               allowed. See enum <see text="Align" cref="T:Eplan.EplApi.HEServices.ConnectionService.Align" />
                               .</param>
            <param name="bLeaveManuals">If set to true, connection
                            definition points indicated as 'manually set'
							are ignored.</param>
            <param name="bRegenrateConnections">If set to true,
                                    connections will be
                                    generated before
                                    formatting.</param>
            <exception cref="!:ArgumentException">Invalid parameters
                                    found.</exception>
            <exception cref="!:ApplicationException">A necessary internal
                                       interface could not
                                       be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                during formatting the
                                connection definition
                                points.</exception>
            <exception cref="!:InvalidScheme">An error occurs when
                                used scheme name
                                doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DesignateConnections(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition,System.Boolean,System.Boolean,Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations,Eplan.EplApi.HEServices.ConnectionService.Visibility,System.Int32[],System.Int32[],System.Boolean[])">
            <summary>
Designate connections (wires) with connection definition point.
</summary>
            <param name="oProject">Project in which the connections will be
                       designated.</param>
            <param name="strSchemaName">Name of the scheme, which is used for the wire
                            numbering.</param>
            <param name="rOverwriteMode">Mode to determine whether already existing
                             connection designations will be overwritten.
                             Valid values are\:0, 1, and See enum
                             DESIGNATE_OVERWRITE_MODE.</param>
            <param name="bMarkAsManual">If this flag is set to true, the created
                            connection designations will be marked as
                            "manually set".</param>
            <param name="bRegenrateConnections">If set to true, connections in the project will be updated
                                    prior to running the connection designation.</param>
            <param name="avoidIdenticalDesignationsKind">Mode to avoid multiple designations(0 = None, 1 = In selection, 2 = In whole project, 3 = In each reset-range).</param>
            <param name="visibilityKind">Mode to change visibility of designations(0 = Do not change, 1 = All visible, 2 = Visible once per page and extent) .</param>
            <param name="nStartValues">Start-values for all defined counters and subcounters in scheme.</param>
            <param name="nIncrements">Step-values for all defined counters and subcounters in scheme.</param>
            <param name="bGroup">Group all defined counters and subcounters in scheme.</param>
            <exception cref="!:ArgumentException">\Parameters contained invalid values.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for wire
                                       designation could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during wire
                                designation. Pleas read the exception
                                message.</exception>
            <exception cref="!:InvalidScheme">An error occurs when used scheme name doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DesignateConnections(System.String,System.String,Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition,System.Boolean,System.Boolean,Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations,Eplan.EplApi.HEServices.ConnectionService.Visibility,System.Int32[],System.Int32[],System.Boolean[])">
            <summary>
Designate connections (wires) with connection definition point.
</summary>
            <param name="strFullLinkFilePath">Link to project in which the connections will be
                       designated.</param>
            <param name="strSchemaName">Name of the scheme, which is used for the wire
                            numbering.</param>
            <param name="rOverwriteMode">Mode to determine whether already existing
                             connection designations will be overwritten.
                             Valid values are\:0, 1, and See enum
                             DESIGNATE_OVERWRITE_MODE.</param>
            <param name="bMarkAsManual">If this flag is set to true, the created
                            connection designations will be marked as
                            "manually set".</param>
            <param name="bRegenrateConnections">If set to true, connections in the project will be updated
                                    prior to running the connection designation.</param>
            <param name="avoidIdenticalDesignationsKind">Mode to avoid multiple designations(0 = None, 1 = In selection, 2 = In whole project, 3 = In each reset-range).</param>
            <param name="visibilityKind">Mode to change visibility of designations(0 = Do not change, 1 = All visible, 2 = Visible once per page and extent) .</param>
            <param name="nStartValues">Start-values for all defined counters and subcounters in scheme.</param>
            <param name="nIncrements">Step-values for all defined counters and subcounters in scheme.</param>
            <param name="bGroup">Group all defined counters and subcounters in scheme.</param>
            <exception cref="!:ArgumentException">\Parameters contained invalid values.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for wire
                                       designation could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during wire
                                designation. Pleas read the exception
                                message.</exception>
            <exception cref="!:InvalidScheme">An error occurs when used scheme name doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DesignateConnections(System.Collections.ArrayList,System.String,Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition,System.Boolean,System.Boolean,Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations,Eplan.EplApi.HEServices.ConnectionService.Visibility,System.Int32[],System.Int32[],System.Boolean[])">
            <summary>
Designate connections (wires) with connection definition point.
</summary>
            <param name="arrConnectionList">List of connections for which the connections will be
                       designated.</param>
            <param name="strSchemaName">Name of the scheme, which is used for the wire
                            numbering.</param>
            <param name="rOverwriteMode">Mode to determine whether already existing
                             connection designations will be overwritten.
                             Valid values are\:0, 1, and See enum
                             DESIGNATE_OVERWRITE_MODE.</param>
            <param name="bMarkAsManual">If this flag is set to true, the created
                            connection designations will be marked as
                            "manually set".</param>
            <param name="bRegenrateConnections">If set to true and arrConnectionList is not empty, connections in the project will be updated
                                    prior to running the connection designation.</param>
            <param name="avoidIdenticalDesignationsKind">Mode to avoid multiple designations(0 = None, 1 = In selection, 2 = In whole project, 3 = In each reset-range).</param>
            <param name="visibilityKind">Mode to change visibility of designations(0 = Do not change, 1 = All visible, 2 = Visible once per page and extent) .</param>
            <param name="nStartValues">Start-values for all defined counters and subcounters in scheme.</param>
            <param name="nIncrements">Step-values for all defined counters and subcounters in scheme.</param>
            <param name="bGroup">Group all defined counters and subcounters in scheme.</param>
            <exception cref="!:ArgumentException">\Parameters contained invalid values.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for wire
                                       designation could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during wire
                                designation. Pleas read the exception
                                message.</exception>
            <exception cref="!:InvalidScheme">An error occurs when used scheme name doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DesignateConnections(System.Collections.ArrayList,System.String,Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition,System.Boolean,System.Boolean)">
            <summary>
Designate connections (wires) with connection definition point.
</summary>
            <param name="arrConnectionList">List of connections for which the connections will be
                       designated.</param>
            <param name="strSchemaName">Name of the scheme, which is used for the wire
                            numbering.</param>
            <param name="rOverwriteMode">Mode to determine whether already existing
                             connection designations will be overwritten.
                             Valid values are\:0, 1, and See enum
                             DESIGNATE_OVERWRITE_MODE.</param>
            <param name="bMarkAsManual">If this flag is set to true, the created
                            connection designations will be marked as
                            "manually set".</param>
            <param name="bRegenrateConnections">If set to true and arrConnectionList is not empty, connections in the project will be updated
                                    prior to running the connection designation.</param>
            <exception cref="!:ArgumentException">\Parameters contained invalid values.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for wire
                                       designation could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during wire
                                designation. Pleas read the exception
                                message.</exception>
            <exception cref="!:InvalidScheme">An error occurs when used scheme name doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.DesignateConnections(Eplan.EplApi.DataModel.Project,System.String,Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition,System.Boolean,System.Boolean)">
            <summary>
Designate connections (wires) with connection definition point.
</summary>
            <param name="oProject">Project in which the connections will be
                       designated.</param>
            <param name="strSchemaName">Name of the scheme, which is used for the wire
                            numbering.</param>
            <param name="rOverwriteMode">Mode to determine whether already existing
                             connection designations will be overwritten.
                             Valid values are\:0, 1, and See enum
                             DESIGNATE_OVERWRITE_MODE.</param>
            <param name="bMarkAsManual">If this flag is set to true, the created
                            connection designations will be marked as
                            "manually set".</param>
            <param name="bRegenrateConnections">If set to true, connections in the project will be updated
                                    prior to running the connection designation.</param>
            <exception cref="!:ArgumentException">\Parameters contained invalid values.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for wire
                                       designation could not be created.</exception>
            <exception cref="!:BaseException">An error occurred during wire
                                designation. Pleas read the exception
                                message.</exception>
            <exception cref="!:InvalidScheme">An error occurs when used scheme name doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. 
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.PlaceConnectionDefinitionPoints(System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
Function for placing connection definition points (CDPs).
</summary>
            <param name="arrConnectionList">List of connections on which the CDPs will be placed.</param>
            <param name="strSchemaName">Name of the scheme used for placing CDPs.</param>
            <param name="bRegenrateConnections">If set to true, connections will be
                                    regenerated prior to placing CDPs.</param>
            <exception cref="!:ArgumentException">Invalid parameters found.</exception>
            <exception cref="!:ApplicationException">\Internal interface necessary for wire
                                       numbering functionality, could not be
                                       created.</exception>
            <exception cref="!:BaseException">An error occurred while placing CDPs.</exception>
            <exception cref="!:InvalidScheme">An error occurs when used scheme name doesn't exist</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. So when bRegenrateConnections is false, it is possible that connection
definition points will be placed on wrong (i.e. old) positions or existing ones will not be recognized.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.PlaceConnectionDefinitionPoints(Eplan.EplApi.DataModel.Project,System.String,System.Boolean)">
            <summary>
Function for placing connection definition points.
</summary>
            <param name="oProject">Project in which the connection
                       definition points will
                       be placed.</param>
            <param name="strSchemaName">Name of the scheme used
                            for placing connection
                            definition points.</param>
            <param name="bRegenrateConnections">If set to true,
                                    connections will be
                                    regenerated prior to
                                    placing connection
                                    definition points.</param>
            <exception cref="!:ArgumentException">Invalid parameters
                                    found.</exception>
            <exception cref="!:ApplicationException">\Internal interface
                                       necessary for wire
                                       numbering
                                       functionality, could
                                       not be created.</exception>
            <exception cref="!:BaseException">An error occurred
                                while placing connection
                                definition points.</exception>
            <remarks>
If no scheme exists under the given scheme name
(strSchemaName), an ArgumentException is thrown. If
strSchemaName is set to an empty string, the last-used scheme
will be used which is currently set in GUI.

Unlike in the GUI, connections are not always generated, but
only if bRegenrateConnections is set to true. So when bRegenrateConnections is false, it is possible that connection
definition points will be placed on wrong (i.e. old) positions or existing ones will not be recognized.
</remarks>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Visibility.OncePerPageAndExtent">
            <summary>Visible once per page and extent</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Visibility.All">
            <summary>All visible</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Visibility.DoNotChange">
            <summary>Do not change</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService.Visibility">
            <summary>
Supported modes for changing visibility of designations.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations.InEachResetRange">
            <summary>In each reset-range</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations.InWholeProject">
            <summary>In whole project</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations.InSelection">
            <summary>In selection</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations.None">
            <summary>None</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService.AvoidIdenticalDesignations">
            <summary>
Supported modes for avoiding multiple designations.
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService.PWMachineType">
            <summary>
Supported types of wire fabrication machine for wire manufacturing data export.
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Deletion.DesignationsAndCDPs">
            <summary>delete designation and connection definition points</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Deletion.ConnectionDefinitionPoints">
            <summary>delete only those connection definition points that
have unspecified designations (i.e. those that have
CONNECTION_DESIGNATION property empty)
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Deletion.Designations">
            <summary>delete only designations</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService.Deletion">
            <summary>
Mode for deleting wire designations and connection definition points
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Align.CanHaveDesignation">
just one designation                                        
<summary>process those connection definition points, which can have</summary>
any designation                                           
</member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Align.OnlyForWirnum">
            <summary>process only those connection definition points, which carry</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.Align.All">
            <summary>process all connection definition points</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService.Align">
            <summary>
Mode for aligning and formatting connection definition points
</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition.None">
            <summary>never overwrite</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition.ExceptManuals">
            <summary>overwrite all except those, which are marked as 'manually set'</summary>
        </member>
        <member name="F:Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition.All">
            <summary>always overwrite</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService.DesignateOverwrition">
            <summary>
Mode for overwriting connection designations.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.Finalize">
            <summary> Finalizer </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.Dispose">
            <summary> Destructor </summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.ConnectionService.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.ConnectionService">
            <summary>
Class providing connection functionality: Placing ,
designating, re-aligning, re-formatting, and deleting
connection definition points. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.Internal.Utilities.getFirstProjectFromMRUList(EString*)">
            <summary>
Get the first project from MRU List.
</summary>
            <param name="esProjectName">Project name with a full path and extension</param>
        </member>
        <member name="M:Eplan.EplApi.Internal.Utilities.setProjectAsFirstInMRUList(EString)">
            <summary>
Set a project as the first one in MRU List.
</summary>
            <param name="esProjectName">Project name with a full path and extension</param>
        </member>
        <member name="M:Eplan.EplApi.Internal.Utilities.getAllExistingSchemas(SSettingNode*)">
            <summary>
Returns an array of names of all scheme nodes existing under a specified settings node.
</summary>
            <param name="esNode">A settings node to check for scheme nodes</param>
        </member>
        <member name="T:Eplan.EplApi.Internal.Utilities">
            <summary>
Private class which defines some of the utilities used in the current module.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.NOPLCCPU.#ctor">
            <summary>
Constructor with standard message text from resources
identified by IDS_ERR_NO_PLCCPU_IN_PROJECT. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Exceptions.NOPLCCPU">
            <summary>
This exception is thrown when no Plc CPU found in project.
Functions from classes PlcService use it.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.InvalidVariant.#ctor(System.String)">
            <summary>
Constructor with number of variant given by user.
</summary>
            <param name="variant">Variant</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.InvalidVariant.#ctor">
            <summary>
Constructor with standard message text from resources
identified by IDS_ERR_INVALID_VARIANT. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Exceptions.InvalidVariant">
            <summary>
This exception is thrown, if the given variant of WindowMacro does not
exist. Functions from classes PlaceHolderService use it.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.PrinterMissing.#ctor(System.String)">
            <summary>
Constructor with custom message text.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.PrinterMissing.#ctor">
            <summary>
Constructor with standard message text from resources
identified by IDS_ERR_PRINTER_MISSING. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Exceptions.PrinterMissing">
            <summary>
Class needed by HEServices.Print; This exception is thrown
when Print.pages() doesn't find printer. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.UnknownPrinter.#ctor(System.String)">
            <summary>
Constructor with custom message text.
</summary>
            <param name="message"> Detail description of exception </param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.UnknownPrinter.#ctor">
            <summary>
Constructor with standard message text from resources
identified by IDS_ERR_UNKNOWN_PRINTER_ERROR. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Exceptions.UnknownPrinter">
            <summary>
This exception is thrown, if the given printer does not
exist.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.InvalidScheme.#ctor(System.String,System.String[])">
            <summary>
Constructor with name of scheme given by user.
</summary>
            <param name="schemeName"> Name of invalid schme used by user </param>
            <param name="validSchemesNames"> Name of invalid schme used by user </param>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Exceptions.InvalidScheme">
            <summary>
This exception is thrown, if the given scheme does not
exist. Actions and classes from HeSrvices use it.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.InvalidConverter.#ctor(System.String)">
            <summary>
Constructor with name of converter given by user.
</summary>
            <param name="convName">Converter name</param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.InvalidConverter.#ctor">
            <summary>
Constructor with standard message text from resources
identified by IDS_ERR_INVALID_CONVERTER. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Exceptions.InvalidConverter">
            <summary>
This exception is thrown, if the given converter does not
exist. Functions from classes DeviceService and PartsService use it.
</summary>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.HEServicesBase.#ctor(System.String)">
            <summary>
Constructor with custom message text.
</summary>
            <param name="message"> Detail description of exception </param>
        </member>
        <member name="M:Eplan.EplApi.HEServices.Exceptions.HEServicesBase.#ctor">
            <summary>
Constructor with standard message text. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.HEServices.Exceptions.HEServicesBase">
            <summary>
Base class for all HEServices exceptions;
</summary>
        </member>
    </members>
</doc>
